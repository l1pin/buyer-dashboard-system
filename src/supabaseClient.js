// –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π supabaseClient.js —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
// –ó–∞–º–µ–Ω–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ src/supabaseClient.js

import { createClient } from '@supabase/supabase-js';
import Papa from 'papaparse';

const supabaseUrl = process.env.REACT_APP_SUPABASE_URL;
const supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;
const supabaseServiceRoleKey = process.env.REACT_APP_SUPABASE_SERVICE_ROLE_KEY;

export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    persistSession: true,
    storageKey: 'supabase.auth.token',
    storage: window.localStorage,
  },
  realtime: {
    params: {
      eventsPerSecond: 10,
    },
  },
});

// –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω service role key)
let adminClient = null;
if (supabaseServiceRoleKey) {
  adminClient = createClient(supabaseUrl, supabaseServiceRoleKey, {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  });
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
export const userService = {
  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserProfile(userId) {
    const { data, error } = await supabase
      .from('users')
      .select('*')
      .eq('id', userId)
      .single();
    
    if (error) throw error;
    return data;
  },

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async createUser(userData) {
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { email: userData.email, role: userData.role });

    try {
      // –ú–µ—Ç–æ–¥ 1: –ü–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
      if (adminClient) {
        console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç...');
        
        const { data: authData, error: authError } = await adminClient.auth.admin.createUser({
          email: userData.email,
          password: userData.password,
          email_confirm: true, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º email
          user_metadata: {
            name: userData.name,
            role: userData.role
          }
        });

        if (authError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω API:', authError);
          throw authError;
        }

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ users
        if (authData.user) {
          const { error: profileError } = await supabase
            .from('users')
            .insert([
              {
                id: authData.user.id,
                email: userData.email,
                name: userData.name,
                role: userData.role,
                created_at: new Date().toISOString()
              }
            ]);

          if (profileError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', profileError);
            throw profileError;
          }
        }

        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω API');
        return authData;
      }

      // –ú–µ—Ç–æ–¥ 2: –û–±—ã—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
      console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏...');
      
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email: userData.email,
        password: userData.password,
        options: {
          data: {
            name: userData.name,
            role: userData.role
          },
          emailRedirectTo: undefined // –û—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç
        }
      });

      if (authError) {
        console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ signUp:', {
          message: authError.message,
          status: authError.status,
          error_code: authError.error_code || authError.code,
          details: authError
        });

        // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        if (authError.message?.includes('Email address') && authError.message?.includes('invalid')) {
          throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email –∞–¥—Ä–µ—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ email.');
        }
        
        if (authError.message?.includes('signup is disabled')) {
          throw new Error('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–∫–ª—é—á–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã.');
        }
        
        if (authError.message?.includes('email confirmation')) {
          throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase Auth.');
        }

        if (authError.status === 400) {
          throw new Error(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ${authError.message}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase Auth –≤ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.`);
        }

        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: ${authError.message}`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Å–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      if (!authData.user) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email.');
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ users
      const { error: profileError } = await supabase
        .from('users')
        .insert([
          {
            id: authData.user.id,
            email: userData.email,
            name: userData.name,
            role: userData.role,
            created_at: new Date().toISOString()
          }
        ]);

      if (profileError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', profileError);
        // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è, –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å auth –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
          if (adminClient) {
            await adminClient.auth.admin.deleteUser(authData.user.id);
          }
        } catch (cleanupError) {
          console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', cleanupError);
        }
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${profileError.message}`);
      }

      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
      return authData;

    } catch (error) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw error;
    }
  },

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Supabase
  async checkSupabaseConfig() {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Supabase...');
      
      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const testEmail = 'test@example.com';
      const { error } = await supabase.auth.signUp({
        email: testEmail,
        password: 'testpassword123',
        options: { data: { test: true } }
      });

      return {
        signUpEnabled: !error?.message?.includes('signup is disabled'),
        emailConfirmationRequired: error?.message?.includes('confirmation'),
        adminApiAvailable: !!adminClient,
        error: error?.message
      };

    } catch (error) {
      return {
        signUpEnabled: false,
        emailConfirmationRequired: false,
        adminApiAvailable: !!adminClient,
        error: error.message
      };
    }
  },

  // –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async deleteUser(userId) {
    try {
      console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

      // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      await supabase.from('tables').delete().eq('user_id', userId);
      await supabase.from('creatives').delete().eq('user_id', userId);
      
      // –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
      const { error: profileError } = await supabase
        .from('users')
        .delete()
        .eq('id', userId);
      
      if (profileError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', profileError);
      }

      // –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å auth –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω API
      if (adminClient) {
        try {
          const { error: authError } = await adminClient.auth.admin.deleteUser(userId);
          if (authError) {
            console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è auth –∑–∞–ø–∏—Å–∏:', authError);
          }
        } catch (authDeleteError) {
          console.error('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å auth –∑–∞–ø–∏—Å—å:', authDeleteError);
        }
      }

      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw error;
    }
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async updateUserProfile(userId, updates) {
    const { data, error } = await supabase
      .from('users')
      .update({
        ...updates,
        updated_at: new Date().toISOString()
      })
      .eq('id', userId)
      .select()
      .single();

    if (error) throw error;
    return data;
  },

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async uploadAvatar(userId, file) {
    try {
      const fileExt = file.name.split('.').pop();
      const fileName = `${userId}/avatar.${fileExt}`;

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Supabase Storage
      const { data: uploadData, error: uploadError } = await supabase.storage
        .from('avatars')
        .upload(fileName, file, {
          upsert: true
        });

      if (uploadError) throw uploadError;

      // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
      const { data: { publicUrl } } = supabase.storage
        .from('avatars')
        .getPublicUrl(fileName);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const updatedUser = await this.updateUserProfile(userId, {
        avatar_url: publicUrl
      });

      return updatedUser;
    } catch (error) {
      throw error;
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –±–∞–π–µ—Ä–æ–≤
  async getAllBuyers() {
    const { data, error } = await supabase
      .from('users')
      .select('*')
      .eq('role', 'buyer')
      .order('created_at', { ascending: false });
    
    if (error) throw error;
    return data;
  },

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async getAllUsers() {
    try {
      console.log('üì° –ó–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ users...');
      
      const { data, error } = await supabase
        .from('users')
        .select('*')
        .order('created_at', { ascending: false });
      
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ getAllUsers:', error);
        console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
          code: error.code,
          message: error.message,
          details: error.details
        });
        throw error;
      }
      
      const result = data || [];
      console.log('‚úÖ getAllUsers –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ, –ø–æ–ª—É—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', result.length);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –º–æ–Ω—Ç–∞–∂–µ—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ
      const editors = result.filter(u => u.role === 'editor');
      console.log('üë• –ù–∞–π–¥–µ–Ω–æ –º–æ–Ω—Ç–∞–∂–µ—Ä–æ–≤:', editors.length);
      
      return result;
      
    } catch (error) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ getAllUsers:', error);
      return [];
    }
  }
};

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
export const tableService = {
  // ... (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  async getUserTable(userId) {
    const { data, error } = await supabase
      .from('tables')
      .select('*')
      .eq('user_id', userId)
      .single();
    
    if (error && error.code !== 'PGRST116') throw error;
    return data;
  },

  async createTableFromCSV(userId, csvContent) {
    try {
      const parsedData = Papa.parse(csvContent, {
        header: false,
        skipEmptyLines: true,
        delimiter: ';'
      });

      if (!parsedData.data || parsedData.data.length === 0) {
        throw new Error('CSV —Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏');
      }

      const { data: tableData, error: tableError } = await supabase
        .from('tables')
        .upsert([
          {
            user_id: userId,
            html_content: null,
            css_content: null,
            updated_at: new Date().toISOString()
          }
        ], {
          onConflict: 'user_id'
        })
        .select()
        .single();

      if (tableError) throw tableError;

      const { error: deleteError } = await supabase
        .from('cells')
        .delete()
        .eq('table_id', tableData.id);

      if (deleteError) throw deleteError;

      const cellsToInsert = [];
      
      parsedData.data.forEach((row, rowIndex) => {
        row.forEach((cellValue, colIndex) => {
          if (cellValue !== null && cellValue !== undefined && cellValue !== '') {
            cellsToInsert.push({
              table_id: tableData.id,
              row_index: rowIndex,
              column_index: colIndex,
              value: String(cellValue).trim(),
              created_at: new Date().toISOString(),
              updated_at: new Date().toISOString()
            });
          }
        });
      });

      if (cellsToInsert.length > 0) {
        const batchSize = 1000;
        for (let i = 0; i < cellsToInsert.length; i += batchSize) {
          const batch = cellsToInsert.slice(i, i + batchSize);
          const { error: cellsError } = await supabase
            .from('cells')
            .insert(batch);
          
          if (cellsError) {
            console.error('Error inserting cells batch:', cellsError);
            throw cellsError;
          }
        }
      }

      return tableData;
    } catch (error) {
      console.error('Error creating table from CSV:', error);
      throw error;
    }
  },

  async getAllTables() {
    const { data, error } = await supabase
      .from('tables')
      .select(`
        *,
        users(name, email)
      `)
      .order('updated_at', { ascending: false });
    
    if (error) throw error;
    return data;
  }
};

export const cellService = {
  // ... (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  async getTableCells(tableId) {
    const { data, error } = await supabase
      .from('cells')
      .select('*')
      .eq('table_id', tableId)
      .order('row_index')
      .order('column_index');
    
    if (error) throw error;
    return data;
  },

  async getTableDataForGrid(tableId) {
    const cells = await this.getTableCells(tableId);
    
    if (cells.length === 0) {
      return { columnDefs: [], rowData: [] };
    }

    const maxRow = Math.max(...cells.map(cell => cell.row_index));
    const maxCol = Math.max(...cells.map(cell => cell.column_index));

    const grid = Array(maxRow + 1).fill(null).map(() => Array(maxCol + 1).fill(''));

    cells.forEach(cell => {
      grid[cell.row_index][cell.column_index] = cell.value;
    });

    const columnDefs = [];
    if (grid.length > 0) {
      grid[0].forEach((header, index) => {
        columnDefs.push({
          headerName: header || `–ö–æ–ª–æ–Ω–∫–∞ ${index + 1}`,
          field: `col_${index}`,
          editable: true,
          minWidth: 100,
          flex: 1,
          cellStyle: { 
            fontSize: '11px',
            padding: '2px 4px' 
          }
        });
      });
    }

    const rowData = [];
    for (let i = 1; i < grid.length; i++) {
      const rowObj = {};
      grid[i].forEach((cellValue, colIndex) => {
        rowObj[`col_${colIndex}`] = cellValue;
      });
      rowData.push({
        ...rowObj,
        _rowIndex: i
      });
    }

    return { columnDefs, rowData };
  },

  async updateCell(tableId, rowIndex, columnIndex, value) {
    try {
      const { data: existingCell, error: selectError } = await supabase
        .from('cells')
        .select('id')
        .eq('table_id', tableId)
        .eq('row_index', rowIndex)
        .eq('column_index', columnIndex)
        .single();

      if (existingCell) {
        const { data, error } = await supabase
          .from('cells')
          .update({
            value: String(value),
            updated_at: new Date().toISOString()
          })
          .eq('id', existingCell.id)
          .select();

        if (error) throw error;
        return data;
      } else {
        const { data, error } = await supabase
          .from('cells')
          .insert([
            {
              table_id: tableId,
              row_index: rowIndex,
              column_index: columnIndex,
              value: String(value),
              created_at: new Date().toISOString(),
              updated_at: new Date().toISOString()
            }
          ])
          .select();

        if (error) throw error;
        return data;
      }
    } catch (error) {
      console.error('Error updating cell:', error);
      throw error;
    }
  },

  async updateCellByField(tableId, rowIndex, field, value) {
    const columnIndex = parseInt(field.replace('col_', ''));
    return this.updateCell(tableId, rowIndex, columnIndex, value);
  },

  subscribeToTableChanges(tableId, callback) {
    return supabase
      .channel(`table_${tableId}`)
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'cells',
          filter: `table_id=eq.${tableId}`
        },
        callback
      )
      .subscribe();
  },

  async exportTableToCSV(tableId) {
    const cells = await this.getTableCells(tableId);
    
    if (cells.length === 0) {
      return '';
    }

    const maxRow = Math.max(...cells.map(cell => cell.row_index));
    const maxCol = Math.max(...cells.map(cell => cell.column_index));

    const grid = Array(maxRow + 1).fill(null).map(() => Array(maxCol + 1).fill(''));

    cells.forEach(cell => {
      grid[cell.row_index][cell.column_index] = cell.value;
    });

    return Papa.unparse(grid, {
      delimiter: ';',
      skipEmptyLines: false
    });
  }
};

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã (creativeService, metricsAnalyticsService) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
export const creativeService = {
  async createCreative(creativeData) {
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–µ–∞—Ç–∏–≤–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:', {
      article: creativeData.article,
      linksCount: creativeData.links?.length || 0,
      workTypesCount: creativeData.work_types?.length || 0,
      hasComment: !!creativeData.comment,
      cof_rating: creativeData.cof_rating,
      is_poland: creativeData.is_poland
    });

    const { data, error } = await supabase
      .from('creatives')
      .insert([
        {
          user_id: creativeData.user_id,
          editor_name: creativeData.editor_name,
          article: creativeData.article,
          links: creativeData.links,
          link_titles: creativeData.link_titles || [],
          work_types: creativeData.work_types,
          cof_rating: creativeData.cof_rating,
          comment: creativeData.comment || null,
          is_poland: creativeData.is_poland || false
        }
      ])
      .select();

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–µ–∞—Ç–∏–≤–∞:', error);
      throw error;
    }

    console.log('‚úÖ –ö—Ä–µ–∞—Ç–∏–≤ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:', data[0]);
    return data[0];
  },

  async getUserCreatives(userId) {
    try {
      console.log('üì° –ó–∞–ø—Ä–æ—Å –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
      
      const { data, error } = await supabase
        .from('creatives')
        .select('*')
        .eq('user_id', userId)
        .order('created_at', { ascending: false });
      
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ getUserCreatives:', error);
        throw error;
      }
      
      const result = data || [];
      console.log('‚úÖ getUserCreatives –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–ª—É—á–µ–Ω–æ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤:', result.length);
      
      const withComments = result.filter(c => c.comment && c.comment.trim());
      console.log('üí¨ –ö—Ä–µ–∞—Ç–∏–≤–æ–≤ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏:', withComments.length);
      
      return result;
      
    } catch (error) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ getUserCreatives:', error);
      return [];
    }
  },

  async getAllCreatives() {
    try {
      console.log('üì° –ó–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ creatives...');
      
      const { data, error } = await supabase
        .from('creatives')
        .select(`
          *,
          users(name, email)
        `)
        .order('created_at', { ascending: false });
      
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ getAllCreatives:', error);
        console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
          code: error.code,
          message: error.message,
          details: error.details,
          hint: error.hint
        });
        throw error;
      }
      
      const result = data || [];
      console.log('‚úÖ getAllCreatives –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ, –ø–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:', result.length);
      
      if (result.length > 0) {
        console.log('üìã –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏ –∫—Ä–µ–∞—Ç–∏–≤–∞:', {
          id: result[0].id,
          article: result[0].article,
          work_types: result[0].work_types,
          cof_rating: result[0].cof_rating,
          editor_name: result[0].editor_name,
          hasComment: !!result[0].comment,
          hasUsers: !!result[0].users
        });
      }
      
      const withComments = result.filter(c => c.comment && c.comment.trim());
      console.log('üí¨ –ö—Ä–µ–∞—Ç–∏–≤–æ–≤ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏:', withComments.length);
      
      return result;
      
    } catch (error) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ getAllCreatives:', error);
      return [];
    }
  },

  async updateCreative(creativeId, updates) {
    console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—Ä–µ–∞—Ç–∏–≤–∞:', creativeId, updates);

    const { data, error } = await supabase
      .from('creatives')
      .update(updates)
      .eq('id', creativeId)
      .select();

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—Ä–µ–∞—Ç–∏–≤–∞:', error);
      throw error;
    }

    console.log('‚úÖ –ö—Ä–µ–∞—Ç–∏–≤ –æ–±–Ω–æ–≤–ª–µ–Ω:', data[0]);
    return data[0];
  },

  async updateCreativeComment(creativeId, comment) {
    return this.updateCreative(creativeId, { 
      comment: comment && comment.trim() ? comment.trim() : null 
    });
  },

  async deleteCreative(creativeId) {
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫—Ä–µ–∞—Ç–∏–≤–∞:', creativeId);

    const { error } = await supabase
      .from('creatives')
      .delete()
      .eq('id', creativeId);
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫—Ä–µ–∞—Ç–∏–≤–∞:', error);
      throw error;
    }

    console.log('‚úÖ –ö—Ä–µ–∞—Ç–∏–≤ —É–¥–∞–ª–µ–Ω');
  },

  subscribeToUserCreatives(userId, callback) {
    return supabase
      .channel(`user_creatives_${userId}`)
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'creatives',
          filter: `user_id=eq.${userId}`
        },
        callback
      )
      .subscribe();
  },

  async getCreativesWithMetrics(userId = null) {
    try {
      let query = supabase
        .from('creatives')
        .select(`
          *,
          users(name, email)
        `)
        .order('created_at', { ascending: false });

      if (userId) {
        query = query.eq('user_id', userId);
      }

      const { data, error } = await query;
      
      if (error) throw error;
      
      const result = data || [];
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${result.length} –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫`);
      
      return result;
      
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏:', error);
      return [];
    }
  }
};

export const metricsAnalyticsService = {
  async uploadMetrics(metricsData) {
    try {
      console.log('üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', metricsData.length, '–∑–∞–ø–∏—Å–µ–π');

      const { error: deleteError } = await supabase
        .from('metrics_analytics')
        .delete()
        .neq('id', 0);

      if (deleteError) {
        console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –º–µ—Ç—Ä–∏–∫:', deleteError);
      }

      const batchSize = 50;
      let successfullyInserted = 0;
      
      for (let i = 0; i < metricsData.length; i += batchSize) {
        const batch = metricsData.slice(i, i + batchSize);
        console.log(`üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞—Ç—á–∞ ${Math.floor(i/batchSize) + 1}/${Math.ceil(metricsData.length/batchSize)} (–∑–∞–ø–∏—Å–∏ ${i + 1}-${Math.min(i + batchSize, metricsData.length)})`);
        
        const { data, error: insertError } = await supabase
          .from('metrics_analytics')
          .insert(batch)
          .select('id');

        if (insertError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –±–∞—Ç—á–∞ ${i + 1}-${i + batchSize}:`, {
            error: insertError,
            message: insertError.message,
            details: insertError.details,
            hint: insertError.hint,
            code: insertError.code,
            sampleData: batch[0]
          });
          continue;
        }
        
        successfullyInserted += data?.length || batch.length;
        console.log(`‚úÖ –ë–∞—Ç—á —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω, –≤—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${successfullyInserted}`);
      }

      const { error: updateError } = await supabase
        .from('metrics_analytics_meta')
        .upsert([
          {
            id: 1,
            last_updated: new Date().toISOString(),
            total_records: successfullyInserted
          }
        ], {
          onConflict: 'id'
        });

      if (updateError) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', updateError);
      }

      console.log(`‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${successfullyInserted} –∏–∑ ${metricsData.length} –∑–∞–ø–∏—Å–µ–π`);
      return { success: true, count: successfullyInserted, total: metricsData.length };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
      throw error;
    }
  },

  async getAllMetrics() {
    try {
      console.log('üì° –ó–∞–ø—Ä–æ—Å –º–µ—Ç—Ä–∏–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...');

      const { count, error: countError } = await supabase
        .from('metrics_analytics')
        .select('*', { count: 'exact', head: true });

      if (countError) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–ø–∏—Å–µ–π:', countError);
      }

      console.log(`üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ: ${count}`);

      const { data: metrics, error: metricsError } = await supabase
        .from('metrics_analytics')
        .select('*')
        .order('id', { ascending: true })
        .limit(10000);

      if (metricsError) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫:', metricsError);
        throw metricsError;
      }

      const { data: meta, error: metaError } = await supabase
        .from('metrics_analytics_meta')
        .select('*')
        .eq('id', 1)
        .single();

      if (metaError && metaError.code !== 'PGRST116') {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', metaError);
      }

      const actualCount = metrics?.length || 0;
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: ${actualCount} –∑–∞–ø–∏—Å–µ–π`);
      
      if (count && actualCount < count) {
        console.warn(`‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ ${actualCount} –∑–∞–ø–∏—Å–µ–π –∏–∑ ${count} –≤ –±–∞–∑–µ. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—è.`);
      }

      return {
        metrics: metrics || [],
        lastUpdated: meta?.last_updated,
        totalRecords: meta?.total_records || actualCount,
        actualCount: actualCount,
        databaseCount: count
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
      return {
        metrics: [],
        lastUpdated: null,
        totalRecords: 0,
        actualCount: 0,
        databaseCount: 0
      };
    }
  },

  async getMetricsWithPagination(page = 0, pageSize = 1000) {
    try {
      const from = page * pageSize;
      const to = from + pageSize - 1;

      console.log(`üì° –ó–∞–ø—Ä–æ—Å –º–µ—Ç—Ä–∏–∫: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1}, –∑–∞–ø–∏—Å–∏ ${from + 1}-${to + 1}`);

      const { data: metrics, error: metricsError, count } = await supabase
        .from('metrics_analytics')
        .select('*', { count: 'exact' })
        .order('id', { ascending: true })
        .range(from, to);

      if (metricsError) {
        throw metricsError;
      }

      return {
        metrics: metrics || [],
        totalCount: count,
        page: page,
        pageSize: pageSize,
        hasMore: count ? (to + 1) < count : false
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π:', error);
      throw error;
    }
  },

  async getAllMetricsLarge() {
    try {
      console.log('üì° –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫ (—Ä–µ–∂–∏–º –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü)...');
      
      let allMetrics = [];
      let page = 0;
      const pageSize = 1000;
      let hasMore = true;

      while (hasMore) {
        const result = await this.getMetricsWithPagination(page, pageSize);
        allMetrics = [...allMetrics, ...result.metrics];
        hasMore = result.hasMore;
        page++;
        
        console.log(`üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}, –≤—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${allMetrics.length}`);
        
        if (page > 50) {
          console.warn('‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü (50), –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É');
          break;
        }
      }

      const { data: meta, error: metaError } = await supabase
        .from('metrics_analytics_meta')
        .select('*')
        .eq('id', 1)
        .single();

      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏: ${allMetrics.length} –∑–∞–ø–∏—Å–µ–π`);

      return {
        metrics: allMetrics,
        lastUpdated: meta?.last_updated,
        totalRecords: meta?.total_records || allMetrics.length,
        actualCount: allMetrics.length
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫:', error);
      return {
        metrics: [],
        lastUpdated: null,
        totalRecords: 0,
        actualCount: 0
      };
    }
  },

  async getMetricsStats() {
    try {
      const { data, error } = await supabase
        .from('metrics_analytics')
        .select('offer_zone, actual_roi_percent, actual_lead')
        .not('actual_lead', 'eq', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
        .limit(10000);

      if (error) throw error;

      const stats = {
        totalItems: data.length,
        zones: [...new Set(data.map(item => item.offer_zone).filter(Boolean))],
        avgROI: data.reduce((sum, item) => sum + (item.actual_roi_percent || 0), 0) / data.length || 0,
        withLeadData: data.filter(item => item.actual_lead !== null).length
      };

      return stats;

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ—Ç—Ä–∏–∫:', error);
      return {
        totalItems: 0,
        zones: [],
        avgROI: 0,
        withLeadData: 0
      };
    }
  },

  async getZoneDataByArticle(article) {
    try {
      if (!article || !article.trim()) {
        return null;
      }

      console.log(`üéØ –ü–æ–∏—Å–∫ –∑–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞: ${article}`);

      const { data, error } = await supabase
        .from('metrics_analytics')
        .select('article, red_zone_price, pink_zone_price, gold_zone_price, green_zone_price, offer_zone')
        .eq('article', article.trim())
        .limit(1)
        .single();

      if (error) {
        if (error.code === 'PGRST116') {
          console.log(`‚ùå –ó–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞: ${article}`);
          return null;
        }
        throw error;
      }

      if (data) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã –∑–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ ${article}:`, {
          red: data.red_zone_price,
          pink: data.pink_zone_price,
          gold: data.gold_zone_price,
          green: data.green_zone_price,
          current_zone: data.offer_zone
        });
      }

      return data;

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ ${article}:`, error);
      return null;
    }
  },

  async getZoneDataByArticles(articles) {
    try {
      if (!articles || articles.length === 0) {
        return new Map();
      }

      const cleanArticles = articles
        .filter(article => article && article.trim())
        .map(article => article.trim());

      if (cleanArticles.length === 0) {
        return new Map();
      }

      console.log(`üéØ –ë–∞—Ç—á–µ–≤—ã–π –ø–æ–∏—Å–∫ –∑–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${cleanArticles.length} –∞—Ä—Ç–∏–∫—É–ª–æ–≤`);

      const { data, error } = await supabase
        .from('metrics_analytics')
        .select('article, red_zone_price, pink_zone_price, gold_zone_price, green_zone_price, offer_zone')
        .in('article', cleanArticles);

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –±–∞—Ç—á–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∑–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
        return new Map();
      }

      const zoneDataMap = new Map();
      
      if (data && data.length > 0) {
        data.forEach(item => {
          zoneDataMap.set(item.article, {
            red_zone_price: item.red_zone_price,
            pink_zone_price: item.pink_zone_price,
            gold_zone_price: item.gold_zone_price,
            green_zone_price: item.green_zone_price,
            offer_zone: item.offer_zone
          });
        });

        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã –∑–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${data.length} –∏–∑ ${cleanArticles.length} –∞—Ä—Ç–∏–∫—É–ª–æ–≤`);
      } else {
        console.log(`‚ùå –ó–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑ ${cleanArticles.length} –∞—Ä—Ç–∏–∫—É–ª–æ–≤`);
      }

      return zoneDataMap;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –±–∞—Ç—á–µ–≤–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      return new Map();
    }
  },

  formatZoneData(zoneData) {
    if (!zoneData) {
      return null;
    }

    const formatPrice = (price) => {
      if (price === null || price === undefined) return '‚Äî';
      return `$${Number(price).toFixed(2)}`;
    };

    return {
      red: formatPrice(zoneData.red_zone_price),
      pink: formatPrice(zoneData.pink_zone_price),
      gold: formatPrice(zoneData.gold_zone_price),
      green: formatPrice(zoneData.green_zone_price),
      currentZone: zoneData.offer_zone || '‚Äî'
    };
  },

  async clearAllMetrics() {
    try {
      const { error: deleteError } = await supabase
        .from('metrics_analytics')
        .delete()
        .neq('id', 0);

      if (deleteError) throw deleteError;

      const { error: metaError } = await supabase
        .from('metrics_analytics_meta')
        .delete()
        .eq('id', 1);

      if (metaError && metaError.code !== 'PGRST116') {
        console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', metaError);
      }

      console.log('‚úÖ –í—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —É–¥–∞–ª–µ–Ω—ã');
      return { success: true };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
      throw error;
    }
  }
};
