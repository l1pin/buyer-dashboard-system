// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ö—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ —Ä–µ–∫–ª–∞–º—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ period
// –ó–∞–º–µ–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ src/hooks/useMetrics.js

import { useState, useEffect, useCallback, useRef } from 'react';
import { MetricsService } from '../services/metricsService';

/**
 * –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
 */
export function useVideoMetrics(videoTitle, autoLoad = true, period = 'all') {
  const [metrics, setMetrics] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [lastUpdated, setLastUpdated] = useState(null);

  const loadMetrics = useCallback(async () => {
    if (!videoTitle || videoTitle.startsWith('–í–∏–¥–µ–æ ')) {
      return;
    }

    setLoading(true);
    setError('');

    try {
      console.log(`üîç –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –≤–∏–¥–µ–æ: ${videoTitle} –∑–∞ –ø–µ—Ä–∏–æ–¥: ${period}`);
      
      const result = await MetricsService.getVideoMetrics(videoTitle, period);
      
      if (result.found) {
        setMetrics(result.data);
        setLastUpdated(new Date());
        setError('');
      } else {
        setError(result.error || '–ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        setMetrics(null);
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫:', err);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + err.message);
      setMetrics(null);
    } finally {
      setLoading(false);
    }
  }, [videoTitle, period]);

  useEffect(() => {
    if (autoLoad && videoTitle) {
      loadMetrics();
    }
  }, [videoTitle, autoLoad, period, loadMetrics]);

  return {
    metrics,
    loading,
    error,
    lastUpdated,
    refresh: loadMetrics,
    hasMetrics: !!metrics
  };
}

/**
 * –•—É–∫ –¥–ª—è –±–∞—Ç—á–µ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ (—Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≤–∏–¥–µ–æ –∫–∞–∂–¥—ã–π)
 */
export function useBatchMetrics(creatives, autoLoad = true, period = 'all') {
  const [batchMetrics, setBatchMetrics] = useState(new Map());
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [stats, setStats] = useState({ total: 0, found: 0, notFound: 0 });
  const [lastUpdated, setLastUpdated] = useState(null);

  const loadBatchMetrics = useCallback(async () => {
    if (!creatives || creatives.length === 0) {
      setBatchMetrics(new Map());
      setStats({ total: 0, found: 0, notFound: 0 });
      return;
    }

    setLoading(true);
    setError('');

    try {
      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏–∑ –≤—Å–µ—Ö –∫—Ä–µ–∞—Ç–∏–≤–æ–≤
      const videoToCreativeMap = new Map(); // videoName -> [creativeId, videoIndex]
      let totalVideos = 0;

      creatives.forEach(creative => {
        if (creative.link_titles && creative.link_titles.length > 0) {
          creative.link_titles.forEach((videoTitle, videoIndex) => {
            if (videoTitle && !videoTitle.startsWith('–í–∏–¥–µ–æ ')) {
              totalVideos++;
              // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ
              const videoKey = `${creative.id}_${videoIndex}`;
              videoToCreativeMap.set(videoTitle, {
                creativeId: creative.id,
                videoIndex: videoIndex,
                videoKey: videoKey
              });
            }
          });
        }
      });

      if (videoToCreativeMap.size === 0) {
        setError('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Ç—Ä–∏–∫');
        setBatchMetrics(new Map());
        setStats({ total: 0, found: 0, notFound: 0 });
        return;
      }

      console.log(`üîç –ë–∞—Ç—á–µ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç—Ä–∏–∫ –¥–ª—è ${videoToCreativeMap.size} –≤–∏–¥–µ–æ –∏–∑ ${creatives.length} –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥: ${period}`);

      const videoNames = Array.from(videoToCreativeMap.keys());
      const results = await MetricsService.getBatchVideoMetrics(videoNames, period);
      
      const metricsMap = new Map();
      let successCount = 0;

      results.forEach(result => {
        const videoMapping = videoToCreativeMap.get(result.videoName);
        if (videoMapping) {
          const { videoKey, creativeId, videoIndex } = videoMapping;
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –∫–ª—é—á—É –≤–∏–¥–µ–æ
          metricsMap.set(videoKey, {
            found: result.found,
            data: result.data,
            error: result.error,
            videoName: result.videoName,
            period: period,
            creativeId: creativeId,
            videoIndex: videoIndex
          });

          if (result.found) {
            successCount++;
          }
        }
      });

      setBatchMetrics(metricsMap);
      setStats({
        total: totalVideos,
        found: successCount,
        notFound: totalVideos - successCount
      });
      setLastUpdated(new Date());
      
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–µ—Ç—Ä–∏–∫: ${successCount}/${totalVideos} –≤–∏–¥–µ–æ –∑–∞ –ø–µ—Ä–∏–æ–¥: ${period}`);

    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –±–∞—Ç—á–µ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫:', err);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + err.message);
      setBatchMetrics(new Map());
    } finally {
      setLoading(false);
    }
  }, [creatives, period]);

  useEffect(() => {
    if (autoLoad && creatives) {
      loadBatchMetrics();
    }
  }, [creatives, autoLoad, period, loadBatchMetrics]);

  const getVideoMetrics = useCallback((creativeId, videoIndex) => {
    const videoKey = `${creativeId}_${videoIndex}`;
    return batchMetrics.get(videoKey) || null;
  }, [batchMetrics]);

  const getCreativeMetrics = useCallback((creativeId) => {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –≤–∏–¥–µ–æ –∫—Ä–µ–∞—Ç–∏–≤–∞
    const creativeMetrics = [];
    let videoIndex = 0;
    
    while (true) {
      const videoKey = `${creativeId}_${videoIndex}`;
      const metrics = batchMetrics.get(videoKey);
      
      if (metrics) {
        creativeMetrics.push({
          videoIndex,
          ...metrics
        });
        videoIndex++;
      } else if (videoIndex === 0) {
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–∂–µ –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ, –≤—ã—Ö–æ–¥–∏–º
        break;
      } else {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–ø—É—Å–∫, –Ω–æ —É–∂–µ –Ω–∞–π–¥–µ–Ω—ã –º–µ—Ç—Ä–∏–∫–∏, –ø—Ä–æ–≤–µ—Ä–∏–º –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω–¥–µ–∫—Å–æ–≤
        videoIndex++;
        if (videoIndex > 10) break; // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
      }
    }
    
    return creativeMetrics.length > 0 ? creativeMetrics : null;
  }, [batchMetrics]);

  const hasVideoMetrics = useCallback((creativeId, videoIndex) => {
    const metrics = getVideoMetrics(creativeId, videoIndex);
    return metrics && metrics.found;
  }, [getVideoMetrics]);

  const getSuccessRate = useCallback(() => {
    if (stats.total === 0) return 0;
    return Math.round((stats.found / stats.total) * 100);
  }, [stats]);

  return {
    batchMetrics,
    loading,
    error,
    stats,
    lastUpdated,
    refresh: loadBatchMetrics,
    getVideoMetrics,
    getCreativeMetrics,
    hasVideoMetrics,
    getSuccessRate
  };
}

/**
 * –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –º–µ—Ç—Ä–∏–∫ (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞, –æ–±—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏)
 */
export function useMetricsApi() {
  const [apiStatus, setApiStatus] = useState('unknown'); // 'unknown', 'available', 'unavailable'
  const [checking, setChecking] = useState(false);
  const lastCheck = useRef(null);

  const checkApiStatus = useCallback(async (force = false) => {
    // –ö—ç—à–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ 5 –º–∏–Ω—É—Ç
    const now = Date.now();
    if (!force && lastCheck.current && (now - lastCheck.current) < 300000) {
      return apiStatus;
    }

    setChecking(true);
    
    try {
      const result = await MetricsService.checkApiStatus();
      const status = result.available ? 'available' : 'unavailable';
      setApiStatus(status);
      lastCheck.current = now;
      return status;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ API:', error);
      setApiStatus('unavailable');
      return 'unavailable';
    } finally {
      setChecking(false);
    }
  }, [apiStatus]);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å API –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
    checkApiStatus();
  }, [checkApiStatus]);

  return {
    apiStatus,
    checking,
    checkApiStatus,
    isAvailable: apiStatus === 'available',
    isUnavailable: apiStatus === 'unavailable'
  };
}

/**
 * –•—É–∫ –¥–ª—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ—Ç—Ä–∏–∫ (–æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ)
 */
export function useMetricsStats(creatives, batchMetricsMap = null) {
  const [stats, setStats] = useState({
    totalLeads: 0,
    totalCost: 0,
    totalClicks: 0,
    totalImpressions: 0,
    totalDays: 0,
    avgCPL: 0,
    avgCTR: 0,
    avgCPC: 0,
    avgCPM: 0,
    videosWithMetrics: 0,
    videosWithoutMetrics: 0,
    creativesWithMetrics: 0,
    creativesWithoutMetrics: 0
  });

  useEffect(() => {
    if (!creatives || creatives.length === 0 || !batchMetricsMap) {
      setStats({
        totalLeads: 0,
        totalCost: 0,
        totalClicks: 0,
        totalImpressions: 0,
        totalDays: 0,
        avgCPL: 0,
        avgCTR: 0,
        avgCPC: 0,
        avgCPM: 0,
        videosWithMetrics: 0,
        videosWithoutMetrics: 0,
        creativesWithMetrics: 0,
        creativesWithoutMetrics: 0
      });
      return;
    }

    let totalLeads = 0;
    let totalCost = 0;
    let totalClicks = 0;
    let totalImpressions = 0;
    let totalDays = 0;
    let videosWithMetrics = 0;
    let videosWithoutMetrics = 0;
    let creativesWithMetrics = 0;
    let creativesWithoutMetrics = 0;

    creatives.forEach(creative => {
      let creativeHasMetrics = false;
      const videoCount = creative.link_titles ? creative.link_titles.length : 0;
      
      for (let videoIndex = 0; videoIndex < videoCount; videoIndex++) {
        const videoKey = `${creative.id}_${videoIndex}`;
        const metrics = batchMetricsMap.get(videoKey);
        
        if (metrics && metrics.found && metrics.data) {
          const data = metrics.data.raw;
          totalLeads += data.leads || 0;
          totalCost += data.cost || 0;
          totalClicks += data.clicks || 0;
          totalImpressions += data.impressions || 0;
          totalDays += data.days_count || 0;
          videosWithMetrics++;
          creativeHasMetrics = true;
        } else {
          videosWithoutMetrics++;
        }
      }
      
      if (creativeHasMetrics) {
        creativesWithMetrics++;
      } else {
        creativesWithoutMetrics++;
      }
    });

    const avgCPL = totalLeads > 0 ? totalCost / totalLeads : 0;
    const avgCTR = totalImpressions > 0 ? (totalClicks / totalImpressions) * 100 : 0;
    const avgCPC = totalClicks > 0 ? totalCost / totalClicks : 0;
    const avgCPM = totalImpressions > 0 ? (totalCost / totalImpressions) * 1000 : 0;

    setStats({
      totalLeads,
      totalCost,
      totalClicks,
      totalImpressions,
      totalDays,
      avgCPL: Number(avgCPL.toFixed(2)),
      avgCTR: Number(avgCTR.toFixed(2)),
      avgCPC: Number(avgCPC.toFixed(2)),
      avgCPM: Number(avgCPM.toFixed(2)),
      videosWithMetrics,
      videosWithoutMetrics,
      creativesWithMetrics,
      creativesWithoutMetrics
    });

  }, [creatives, batchMetricsMap]);

  const formatStats = useCallback(() => {
    const formatInt = (n) => String(Math.round(Number(n) || 0));
    const formatMoney = (n) => (Number(n) || 0).toFixed(2) + "$";
    const formatPercent = (n) => (Number(n) || 0).toFixed(2) + "%";

    return {
      totalLeads: formatInt(stats.totalLeads),
      totalCost: formatMoney(stats.totalCost),
      totalClicks: formatInt(stats.totalClicks),
      totalImpressions: formatInt(stats.totalImpressions),
      totalDays: formatInt(stats.totalDays) + " –¥–Ω.",
      avgCPL: formatMoney(stats.avgCPL),
      avgCTR: formatPercent(stats.avgCTR),
      avgCPC: formatMoney(stats.avgCPC),
      avgCPM: formatMoney(stats.avgCPM),
      videosWithMetrics: formatInt(stats.videosWithMetrics),
      videosWithoutMetrics: formatInt(stats.videosWithoutMetrics),
      creativesWithMetrics: formatInt(stats.creativesWithMetrics),
      creativesWithoutMetrics: formatInt(stats.creativesWithoutMetrics),
      totalVideos: formatInt(stats.videosWithMetrics + stats.videosWithoutMetrics),
      totalCreatives: formatInt(stats.creativesWithMetrics + stats.creativesWithoutMetrics),
      videoMetricsSuccessRate: formatPercent(
        stats.videosWithMetrics + stats.videosWithoutMetrics > 0
          ? (stats.videosWithMetrics / (stats.videosWithMetrics + stats.videosWithoutMetrics)) * 100
          : 0
      ),
      creativeMetricsSuccessRate: formatPercent(
        stats.creativesWithMetrics + stats.creativesWithoutMetrics > 0
          ? (stats.creativesWithMetrics / (stats.creativesWithMetrics + stats.creativesWithoutMetrics)) * 100
          : 0
      )
    };
  }, [stats]);

  return {
    stats,
    formatStats,
    hasData: stats.videosWithMetrics > 0
  };
}

/**
 * –•—É–∫ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫
 */
export function useMetricsCache(cacheKey, ttlMinutes = 30) {
  const [cache, setCache] = useState(new Map());

  const getCachedData = useCallback((key) => {
    const fullKey = `${cacheKey}_${key}`;
    const cached = cache.get(fullKey);
    
    if (!cached) return null;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
    if (Date.now() - cached.timestamp > ttlMinutes * 60 * 1000) {
      cache.delete(fullKey);
      setCache(new Map(cache));
      return null;
    }
    
    return cached.data;
  }, [cache, cacheKey, ttlMinutes]);

  const setCachedData = useCallback((key, data) => {
    const fullKey = `${cacheKey}_${key}`;
    const newCache = new Map(cache);
    newCache.set(fullKey, {
      data,
      timestamp: Date.now()
    });
    setCache(newCache);
  }, [cache, cacheKey]);

  const clearCache = useCallback(() => {
    setCache(new Map());
  }, []);

  const getCacheSize = useCallback(() => {
    return cache.size;
  }, [cache]);

  return {
    getCachedData,
    setCachedData,
    clearCache,
    getCacheSize
  };
}
