// –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–ü–ò–°–ê–ù–ù–´–ï —Ö—É–∫–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫ - –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ –æ—á–µ—Ä–µ–¥–∏
// –ó–∞–º–µ–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ src/hooks/useMetrics.js

import { useState, useEffect, useCallback, useRef } from 'react';
import { MetricsService } from '../services/metricsService';

/**
 * –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é - –ü–ï–†–ï–ü–ò–°–ê–ù
 */
export function useVideoMetrics(videoTitle, autoLoad = true, period = 'all') {
  const [rawMetrics, setRawMetrics] = useState(null); // –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
  const [filteredMetrics, setFilteredMetrics] = useState(null); // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [lastUpdated, setLastUpdated] = useState(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö - –¢–û–õ–¨–ö–û –æ–¥–∏–Ω —Ä–∞–∑
  const loadRawMetrics = useCallback(async () => {
    if (!videoTitle || videoTitle.startsWith('–í–∏–¥–µ–æ ')) {
      return;
    }

    setLoading(true);
    setError('');

    try {
      console.log(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—ã—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è: ${videoTitle}`);
      const result = await MetricsService.getVideoMetricsRaw(videoTitle);
      
      if (result.found) {
        setRawMetrics(result);
        setLastUpdated(new Date());
        setError('');
        console.log(`‚úÖ –°—ã—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è: ${videoTitle}`);
      } else {
        setError(result.error || '–ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        setRawMetrics(null);
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + err.message);
      setRawMetrics(null);
    } finally {
      setLoading(false);
    }
  }, [videoTitle]);

  // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–µ—Ä–∏–æ–¥–∞
  const applyFilter = useCallback((rawData, targetPeriod) => {
    if (!rawData || !rawData.found) {
      setFilteredMetrics(null);
      return;
    }

    console.log(`‚ö° –ú–ì–ù–û–í–ï–ù–ù–ê–Ø —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è ${videoTitle}: ${targetPeriod}`);
    
    const filtered = MetricsService.filterRawMetricsByPeriod(rawData, targetPeriod);
    setFilteredMetrics(filtered);
  }, [videoTitle]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–º–µ–Ω–µ videoTitle
  useEffect(() => {
    if (autoLoad && videoTitle) {
      loadRawMetrics();
    }
  }, [videoTitle, autoLoad, loadRawMetrics]); // period –ù–ï–¢ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö!

  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–µ—Ä–∏–æ–¥–∞ –∏–ª–∏ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (rawMetrics) {
      applyFilter(rawMetrics, period);
    } else {
      setFilteredMetrics(null);
    }
  }, [rawMetrics, period, applyFilter]);

  return {
    metrics: filteredMetrics?.found ? filteredMetrics.data : null,
    loading,
    error: filteredMetrics?.found === false ? filteredMetrics.error : error,
    lastUpdated,
    refresh: loadRawMetrics, // –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    hasMetrics: filteredMetrics?.found || false,
    period: period // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
  };
}

/**
 * –ü–ï–†–ï–ü–ò–°–ê–ù–ù–´–ô —Ö—É–∫ –¥–ª—è –±–∞—Ç—á–µ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫ - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –±–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
 */
export function useBatchMetrics(creatives, autoLoad = false, period = 'all') {
  // –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è (–∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑)
  const [rawBatchMetrics, setRawBatchMetrics] = useState(new Map());
  
  // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ)
  const [filteredBatchMetrics, setFilteredBatchMetrics] = useState(new Map());
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [lastUpdated, setLastUpdated] = useState(null);
  const [stats, setStats] = useState({ total: 0, found: 0, notFound: 0 });

  // –°—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–≥—Ä—É–∑–∫–∏
  const loadingCancelRef = useRef(false);

  const loadRawBatchMetrics = useCallback(async (forceRefresh = false) => {
    if (!creatives || creatives.length === 0) {
      setRawBatchMetrics(new Map());
      setFilteredBatchMetrics(new Map());
      setStats({ total: 0, found: 0, notFound: 0 });
      return;
    }

    setLoading(true);
    setError('');
    loadingCancelRef.current = false;

    try {
      // –ï—Å–ª–∏ –Ω–µ —Ñ–æ—Ä—Å–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞
      if (!forceRefresh) {
        console.log('üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç—Ä–∏–∫ –∏–∑ –∫—ç—à–∞...');
        const creativeIds = creatives.map(c => c.id);
        const cachedData = await metricsAnalyticsService.getBatchMetricsCache(creativeIds, 'all');
        
        if (cachedData && cachedData.length > 0) {
          const rawMetricsMap = new Map();
          let successCount = 0;

          cachedData.forEach(cache => {
            const videoKey = `${cache.creative_id}_${cache.video_index}`;
            if (cache.metrics_data) {
              rawMetricsMap.set(videoKey, {
                found: true,
                data: {
                  ...cache.metrics_data,
                  fromCache: true,
                  cachedAt: cache.cached_at
                },
                error: null,
                videoName: cache.video_title,
                creativeId: cache.creative_id,
                videoIndex: cache.video_index
              });
              successCount++;
            }
          });

          if (rawMetricsMap.size > 0) {
            setRawBatchMetrics(rawMetricsMap);
            setLastUpdated(new Date());
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${successCount} –º–µ—Ç—Ä–∏–∫ –∏–∑ –∫—ç—à–∞`);
            setLoading(false);
            return;
          }
        }
        
        console.log('‚ö†Ô∏è –ö—ç—à –ø—É—Å—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ API...');
      } else {
        console.log('üîÑ –§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ API...');
      }

      console.log('üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –±–∞—Ç—á–µ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API...');
      
      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏–∑ –≤—Å–µ—Ö –∫—Ä–µ–∞—Ç–∏–≤–æ–≤
      const videoToCreativeMap = new Map();
      let totalVideos = 0;

      creatives.forEach(creative => {
        if (creative.link_titles && creative.link_titles.length > 0) {
          creative.link_titles.forEach((videoTitle, videoIndex) => {
            if (videoTitle && !videoTitle.startsWith('–í–∏–¥–µ–æ ')) {
              totalVideos++;
              const videoKey = `${creative.id}_${videoIndex}`;
              videoToCreativeMap.set(videoTitle, {
                creativeId: creative.id,
                videoIndex: videoIndex,
                videoKey: videoKey
              });
            }
          });
        }
      });

      if (videoToCreativeMap.size === 0) {
        setError('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Ç—Ä–∏–∫');
        setRawBatchMetrics(new Map());
        setFilteredBatchMetrics(new Map());
        setStats({ total: 0, found: 0, notFound: 0 });
        return;
      }

      const videoNames = Array.from(videoToCreativeMap.keys());
      console.log(`üìä –ó–∞–ø—É—Å–∫ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –∑–∞–≥—Ä—É–∑–∫–∏ ${videoNames.length} –≤–∏–¥–µ–æ...`);
      
      // –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –±–∞—Ç—á–µ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å –º–µ–Ω—å—à–∏–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
      // –ë–ê–¢–ß–ï–í–ê–Ø –û–ß–ï–†–ï–î–¨ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ 3 –∑–∞–ø—Ä–æ—Å–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
      const BATCH_SIZE = 3; // –ú–∞–∫—Å–∏–º—É–º 3 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
      const BATCH_DELAY = 500; // 500–º—Å –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
      
      const results = [];
      
      for (let i = 0; i < videoNames.length; i += BATCH_SIZE) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
        if (loadingCancelRef.current) {
          console.log('‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
          break;
        }
        
        const batch = videoNames.slice(i, i + BATCH_SIZE);
        console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ ${Math.floor(i / BATCH_SIZE) + 1}/${Math.ceil(videoNames.length / BATCH_SIZE)}: ${batch.length} –≤–∏–¥–µ–æ`);
        
        const batchResults = await Promise.allSettled(
          batch.map(async (videoName) => {
            try {
              const result = await MetricsService.getVideoMetricsRaw(videoName);
              return {
                videoName,
                ...result
              };
            } catch (error) {
              return {
                videoName,
                found: false,
                error: error.message
              };
            }
          })
        );
        
        results.push(...batchResults);
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
        if (i + BATCH_SIZE < videoNames.length) {
          await new Promise(resolve => setTimeout(resolve, BATCH_DELAY));
        }
      }

      const rawMetricsMap = new Map();
      let successCount = 0;

      results.forEach((result, index) => {
        const videoName = videoNames[index];
        const videoMapping = videoToCreativeMap.get(videoName);
        
        if (videoMapping) {
          const { videoKey, creativeId, videoIndex } = videoMapping;
          
          const resultData = result.status === 'fulfilled' ? result.value : {
            videoName,
            found: false,
            error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ'
          };
          
          rawMetricsMap.set(videoKey, {
            found: resultData.found,
            data: resultData.data,
            error: resultData.error,
            videoName: resultData.videoName || videoName,
            creativeId: creativeId,
            videoIndex: videoIndex
          });

          if (resultData.found) {
            successCount++;
          }
        }
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
      setRawBatchMetrics(rawMetricsMap);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ë–î
      await metricsAnalyticsService.updateMetricsLastUpdate();
      setLastUpdated(new Date());
      
      console.log(`‚úÖ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${successCount}/${results.length} –º–µ—Ç—Ä–∏–∫ –Ω–∞–π–¥–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫—ç—à`);

    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏:', err);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + err.message);
      setRawBatchMetrics(new Map());
      setFilteredBatchMetrics(new Map());
    } finally {
      setLoading(false);
      loadingCancelRef.current = false;
    }
  }, [creatives]);

  // –ú–ì–ù–û–í–ï–ù–ù–ê–Ø —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–µ—Ä–∏–æ–¥—É
  const applyPeriodFilter = useCallback((rawMetrics, targetPeriod) => {
    if (!rawMetrics || rawMetrics.size === 0) {
      setFilteredBatchMetrics(new Map());
      setStats({ total: 0, found: 0, notFound: 0 });
      return;
    }

    console.log(`‚ö° –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –±–∞—Ç—á–µ–≤–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞: ${targetPeriod}`);
    
    const filteredMap = new Map();
    let successCount = 0;
    let totalCount = 0;

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫ –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ –ù–ê –ö–õ–ò–ï–ù–¢–ï
    for (const [videoKey, rawMetric] of rawMetrics) {
      totalCount++;
      
      if (!rawMetric.found || !rawMetric.data) {
        // –ï—Å–ª–∏ –º–µ—Ç—Ä–∏–∫ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
        filteredMap.set(videoKey, {
          ...rawMetric,
          period: targetPeriod
        });
        continue;
      }

      try {
        // –ö–õ–ò–ï–ù–¢–°–ö–ê–Ø —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î
        const filteredResult = MetricsService.filterRawMetricsByPeriod(rawMetric, targetPeriod);
        
        if (filteredResult.found) {
          filteredMap.set(videoKey, {
            found: true,
            data: filteredResult.data,
            error: null,
            videoName: rawMetric.videoName,
            period: targetPeriod,
            creativeId: rawMetric.creativeId,
            videoIndex: rawMetric.videoIndex
          });
          successCount++;
        } else {
          filteredMap.set(videoKey, {
            found: false,
            data: null,
            error: filteredResult.error || `–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥: ${targetPeriod}`,
            videoName: rawMetric.videoName,
            period: targetPeriod,
            creativeId: rawMetric.creativeId,
            videoIndex: rawMetric.videoIndex
          });
        }
      } catch (err) {
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –º–µ—Ç—Ä–∏–∫ –Ω–µ—Ç –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥
        filteredMap.set(videoKey, {
          found: false,
          data: null,
          error: `–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${err.message}`,
          videoName: rawMetric.videoName,
          period: targetPeriod,
          creativeId: rawMetric.creativeId,
          videoIndex: rawMetric.videoIndex
        });
      }
    }

    setFilteredBatchMetrics(filteredMap);
    setStats({
      total: totalCount,
      found: successCount,
      notFound: totalCount - successCount
    });

    console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ú–ì–ù–û–í–ï–ù–ù–û: ${successCount}/${totalCount} –º–µ—Ç—Ä–∏–∫ –Ω–∞–π–¥–µ–Ω–æ`);
  }, []);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ (–ù–ï –ø–µ—Ä–∏–æ–¥–∞!)
  useEffect(() => {
    if (autoLoad && creatives) {
      loadRawBatchMetrics();
    }
    
    // –û—Ç–º–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ —Å–º–µ–Ω–µ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤
    return () => {
      loadingCancelRef.current = true;
    };
  }, [creatives, autoLoad, loadRawBatchMetrics]); // period —É–±—Ä–∞–Ω –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π!

  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∞ –∏–ª–∏ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö - –ú–ì–ù–û–í–ï–ù–ù–û
  useEffect(() => {
    if (rawBatchMetrics.size > 0) {
      applyPeriodFilter(rawBatchMetrics, period);
    } else {
      setFilteredBatchMetrics(new Map());
      setStats({ total: 0, found: 0, notFound: 0 });
    }
  }, [rawBatchMetrics, period, applyPeriodFilter]);

  const getVideoMetrics = useCallback((creativeId, videoIndex) => {
    const videoKey = `${creativeId}_${videoIndex}`;
    return filteredBatchMetrics.get(videoKey) || null;
  }, [filteredBatchMetrics]);

  const getCreativeMetrics = useCallback((creativeId) => {
    const creativeMetrics = [];
    let videoIndex = 0;
    
    while (true) {
      const videoKey = `${creativeId}_${videoIndex}`;
      const metrics = filteredBatchMetrics.get(videoKey);
      
      if (metrics) {
        creativeMetrics.push({
          videoIndex,
          ...metrics
        });
        videoIndex++;
      } else if (videoIndex === 0) {
        break;
      } else {
        videoIndex++;
        if (videoIndex > 10) break;
      }
    }
    
    return creativeMetrics.length > 0 ? creativeMetrics : null;
  }, [filteredBatchMetrics]);

  const hasVideoMetrics = useCallback((creativeId, videoIndex) => {
    const metrics = getVideoMetrics(creativeId, videoIndex);
    return metrics && metrics.found;
  }, [getVideoMetrics]);

  const getSuccessRate = useCallback(() => {
    if (stats.total === 0) return 0;
    return Math.round((stats.found / stats.total) * 100);
  }, [stats]);

  const refresh = useCallback(async () => {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π...');
    loadingCancelRef.current = true; // –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–≥—Ä—É–∑–∫—É
    await new Promise(resolve => setTimeout(resolve, 100)); // –ñ–¥–µ–º –æ—Ç–º–µ–Ω—ã
    await loadRawBatchMetrics(true); // –ü–µ—Ä–µ–¥–∞–µ–º true –¥–ª—è —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  }, [loadRawBatchMetrics]);

  return {
    batchMetrics: filteredBatchMetrics,
    rawBatchMetrics,
    loading,
    error,
    stats,
    lastUpdated,
    refresh,
    loadFromCache: () => loadRawBatchMetrics(false), // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞
    getVideoMetrics,
    getCreativeMetrics,
    hasVideoMetrics,
    getSuccessRate,
    currentPeriod: period // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
  };
}

/**
 * –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –º–µ—Ç—Ä–∏–∫ (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞, –æ–±—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏)
 */
export function useMetricsApi() {
  const [apiStatus, setApiStatus] = useState('unknown');
  const [checking, setChecking] = useState(false);
  const lastCheck = useRef(null);

  const checkApiStatus = useCallback(async (force = false) => {
    // –ö—ç—à–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ 5 –º–∏–Ω—É—Ç
    const now = Date.now();
    if (!force && lastCheck.current && (now - lastCheck.current) < 300000) {
      return apiStatus;
    }

    setChecking(true);
    
    try {
      const result = await MetricsService.checkApiStatus();
      const status = result.available ? 'available' : 'unavailable';
      setApiStatus(status);
      lastCheck.current = now;
      return status;
    } catch (error) {
      setApiStatus('unavailable');
      return 'unavailable';
    } finally {
      setChecking(false);
    }
  }, [apiStatus]);

  useEffect(() => {
    checkApiStatus();
  }, [checkApiStatus]);

  return {
    apiStatus,
    checking,
    checkApiStatus,
    isAvailable: apiStatus === 'available',
    isUnavailable: apiStatus === 'unavailable'
  };
}

/**
 * –•—É–∫ –¥–ª—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ—Ç—Ä–∏–∫
 */
export function useMetricsStats(creatives, batchMetricsMap = null) {
  const [stats, setStats] = useState({
    totalLeads: 0,
    totalCost: 0,
    totalClicks: 0,
    totalImpressions: 0,
    totalDays: 0,
    avgCPL: 0,
    avgCTR: 0,
    avgCPC: 0,
    avgCPM: 0,
    videosWithMetrics: 0,
    videosWithoutMetrics: 0,
    creativesWithMetrics: 0,
    creativesWithoutMetrics: 0
  });

  useEffect(() => {
    if (!creatives || creatives.length === 0 || !batchMetricsMap) {
      setStats({
        totalLeads: 0,
        totalCost: 0,
        totalClicks: 0,
        totalImpressions: 0,
        totalDays: 0,
        avgCPL: 0,
        avgCTR: 0,
        avgCPC: 0,
        avgCPM: 0,
        videosWithMetrics: 0,
        videosWithoutMetrics: 0,
        creativesWithMetrics: 0,
        creativesWithoutMetrics: 0
      });
      return;
    }

    let totalLeads = 0;
    let totalCost = 0;
    let totalClicks = 0;
    let totalImpressions = 0;
    let totalDays = 0;
    let videosWithMetrics = 0;
    let videosWithoutMetrics = 0;
    let creativesWithMetrics = 0;
    let creativesWithoutMetrics = 0;

    creatives.forEach(creative => {
      let creativeHasMetrics = false;
      const videoCount = creative.link_titles ? creative.link_titles.length : 0;
      
      for (let videoIndex = 0; videoIndex < videoCount; videoIndex++) {
        const videoKey = `${creative.id}_${videoIndex}`;
        const metrics = batchMetricsMap.get(videoKey);
        
        if (metrics && metrics.found && metrics.data) {
          const data = metrics.data.raw;
          totalLeads += data.leads || 0;
          totalCost += data.cost || 0;
          totalClicks += data.clicks || 0;
          totalImpressions += data.impressions || 0;
          totalDays += data.days_count || 0;
          videosWithMetrics++;
          creativeHasMetrics = true;
        } else {
          videosWithoutMetrics++;
        }
      }
      
      if (creativeHasMetrics) {
        creativesWithMetrics++;
      } else {
        creativesWithoutMetrics++;
      }
    });

    const avgCPL = totalLeads > 0 ? totalCost / totalLeads : 0;
    const avgCTR = totalImpressions > 0 ? (totalClicks / totalImpressions) * 100 : 0;
    const avgCPC = totalClicks > 0 ? totalCost / totalClicks : 0;
    const avgCPM = totalImpressions > 0 ? (totalCost / totalImpressions) * 1000 : 0;

    setStats({
      totalLeads,
      totalCost,
      totalClicks,
      totalImpressions,
      totalDays,
      avgCPL: Number(avgCPL.toFixed(2)),
      avgCTR: Number(avgCTR.toFixed(2)),
      avgCPC: Number(avgCPC.toFixed(2)),
      avgCPM: Number(avgCPM.toFixed(2)),
      videosWithMetrics,
      videosWithoutMetrics,
      creativesWithMetrics,
      creativesWithoutMetrics
    });

  }, [creatives, batchMetricsMap]);

  const formatStats = useCallback(() => {
    const formatInt = (n) => String(Math.round(Number(n) || 0));
    const formatMoney = (n) => (Number(n) || 0).toFixed(2) + "$";
    const formatPercent = (n) => (Number(n) || 0).toFixed(2) + "%";

    return {
      totalLeads: formatInt(stats.totalLeads),
      totalCost: formatMoney(stats.totalCost),
      totalClicks: formatInt(stats.totalClicks),
      totalImpressions: formatInt(stats.totalImpressions),
      totalDays: formatInt(stats.totalDays) + " –¥–Ω.",
      avgCPL: formatMoney(stats.avgCPL),
      avgCTR: formatPercent(stats.avgCTR),
      avgCPC: formatMoney(stats.avgCPC),
      avgCPM: formatMoney(stats.avgCPM),
      videosWithMetrics: formatInt(stats.videosWithMetrics),
      videosWithoutMetrics: formatInt(stats.videosWithoutMetrics),
      creativesWithMetrics: formatInt(stats.creativesWithMetrics),
      creativesWithoutMetrics: formatInt(stats.creativesWithoutMetrics),
      totalVideos: formatInt(stats.videosWithMetrics + stats.videosWithoutMetrics),
      totalCreatives: formatInt(stats.creativesWithMetrics + stats.creativesWithoutMetrics),
      videoMetricsSuccessRate: formatPercent(
        stats.videosWithMetrics + stats.videosWithoutMetrics > 0
          ? (stats.videosWithMetrics / (stats.videosWithMetrics + stats.videosWithoutMetrics)) * 100
          : 0
      ),
      creativeMetricsSuccessRate: formatPercent(
        stats.creativesWithMetrics + stats.creativesWithoutMetrics > 0
          ? (stats.creativesWithMetrics / (stats.creativesWithMetrics + stats.creativesWithoutMetrics)) * 100
          : 0
      )
    };
  }, [stats]);

  return {
    stats,
    formatStats,
    hasData: stats.videosWithMetrics > 0
  };
}
