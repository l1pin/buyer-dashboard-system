// src/hooks/useMetrics.js - –ë–ê–¢–ß–ï–í–ê–Ø –í–ï–†–°–ò–Ø
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API —Å –º–∏–Ω–∏–º—É–º–æ–º HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤

import { useState, useEffect, useCallback, useRef } from 'react';
import { MetricsService } from '../services/metricsService';
import { metricsAnalyticsService } from '../supabaseClient';

/**
 * –•—É–∫ –¥–ª—è –±–∞—Ç—á–µ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
 */
export function useBatchMetrics(creatives, autoLoad = false, period = 'all') {
  const [rawBatchMetrics, setRawBatchMetrics] = useState(new Map());
  const [filteredBatchMetrics, setFilteredBatchMetrics] = useState(new Map());
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [lastUpdated, setLastUpdated] = useState(null);
  const [stats, setStats] = useState({ total: 0, found: 0, notFound: 0 });
  const loadingCancelRef = useRef(false);

  /**
   * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –±–∞—Ç—á–µ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ - –û–î–ò–ù –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å–µ—Ö –≤–∏–¥–µ–æ
   */
  const loadRawBatchMetrics = useCallback(async (forceRefresh = false, targetPeriod = null) => {
    if (!creatives || creatives.length === 0) {
      setRawBatchMetrics(new Map());
      setFilteredBatchMetrics(new Map());
      setStats({ total: 0, found: 0, notFound: 0 });
      return;
    }

    setLoading(true);
    setError('');
    loadingCancelRef.current = false;

    try {
      console.log(`üöÄ –ë–ê–¢–ß–ï–í–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç—Ä–∏–∫ –¥–ª—è ${creatives.length} –∫—Ä–µ–∞—Ç–∏–≤–æ–≤...`);

      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–∏–¥–µ–æ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
      const videosToLoad = [];
      const videoMap = new Map(); // videoKey -> metadata

      creatives.forEach(creative => {
        if (creative.link_titles && creative.link_titles.length > 0) {
          creative.link_titles.forEach((videoTitle, videoIndex) => {
            if (videoTitle && !videoTitle.startsWith('–í–∏–¥–µ–æ ')) {
              const videoKey = `${creative.id}_${videoIndex}`;
              videosToLoad.push(videoTitle);
              videoMap.set(videoKey, {
                videoTitle,
                creativeId: creative.id,
                article: creative.article,
                videoIndex
              });
            }
          });
        }
      });

      if (videosToLoad.length === 0) {
        setError('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –≤–∏–¥–µ–æ');
        setRawBatchMetrics(new Map());
        setFilteredBatchMetrics(new Map());
        setStats({ total: 0, found: 0, notFound: 0 });
        return;
      }

      console.log(`üìä –í—Å–µ–≥–æ –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: ${videosToLoad.length}`);

      // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à Supabase –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ "all"
      const rawMetricsMap = new Map();
      const videosToLoadFromApi = [];
      
      if (!forceRefresh) {
        console.log(`üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞ Supabase –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ "all"...`);
        const creativeIds = creatives.map(c => c.id);
        
        try {
          const cachedData = await metricsAnalyticsService.getBatchMetricsCache(creativeIds, 'all');
          
          if (cachedData && cachedData.length > 0) {
            console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ: ${cachedData.length} –∑–∞–ø–∏—Å–µ–π`);
            
            cachedData.forEach(cache => {
              if (cache && cache.found && cache.data) {
                const videoKey = `${cache.creative_id}_${cache.video_index}`;
                rawMetricsMap.set(videoKey, {
                  found: true,
                  data: cache.data,
                  error: null,
                  videoName: cache.video_title,
                  creativeId: cache.creative_id,
                  videoIndex: cache.video_index,
                  fromCache: true
                });
              }
            });

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –≤–∏–¥–µ–æ –ù–ï –Ω–∞—à–ª–∏—Å—å –≤ –∫—ç—à–µ
            videoMap.forEach((metadata, videoKey) => {
              if (!rawMetricsMap.has(videoKey)) {
                videosToLoadFromApi.push(metadata.videoTitle);
              }
            });

            console.log(`‚úÖ –ò–∑ –∫—ç—à–∞: ${rawMetricsMap.size}, –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ API: ${videosToLoadFromApi.length}`);

            // –ï—Å–ª–∏ –≤—Å—ë –≤ –∫—ç—à–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è
            if (videosToLoadFromApi.length === 0) {
              setRawBatchMetrics(rawMetricsMap);
              setLastUpdated(new Date());
              console.log(`‚úÖ –í—Å–µ ${rawMetricsMap.size} –º–µ—Ç—Ä–∏–∫ –∏–∑ –∫—ç—à–∞`);
              setLoading(false);
              return;
            }
          } else {
            console.log('‚ö†Ô∏è –ö—ç—à –ø—É—Å—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∏–∑ API');
            videosToLoadFromApi.push(...videosToLoad);
          }
          
        } catch (cacheError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫—ç—à–∞:', cacheError);
          
          if (!forceRefresh) {
            console.log('‚ö†Ô∏è –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ –∫—ç—à–∞');
            setRawBatchMetrics(new Map());
            setFilteredBatchMetrics(new Map());
            setStats({ total: 0, found: 0, notFound: 0 });
            setError(`–û—à–∏–±–∫–∞ –∫—ç—à–∞: ${cacheError.message}. –ù–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å" –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.`);
            setLoading(false);
            return;
          }
          
          videosToLoadFromApi.push(...videosToLoad);
        }
      } else {
        console.log('üîÑ –§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –∑–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –∏–∑ API');
        videosToLoadFromApi.push(...videosToLoad);
      }

      // –ö–†–ò–¢–ò–ß–ù–û: –ï—Å–ª–∏ –Ω–µ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –µ—Å—Ç—å –≤–∏–¥–µ–æ –±–µ–∑ –∫—ç—à–∞ - –ù–ï –∑–∞–≥—Ä—É–∂–∞–µ–º
      if (!forceRefresh && videosToLoadFromApi.length > 0) {
        console.log(`‚ö†Ô∏è –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞: ${videosToLoadFromApi.length} –≤–∏–¥–µ–æ –±–µ–∑ –∫—ç—à–∞ - –ù–ï –∑–∞–≥—Ä—É–∂–∞–µ–º`);
        console.log(`‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ ${rawMetricsMap.size} –º–µ—Ç—Ä–∏–∫ –∏–∑ –∫—ç—à–∞`);
        
        setRawBatchMetrics(rawMetricsMap);
        setLastUpdated(new Date());
        setLoading(false);
        
        if (rawMetricsMap.size === 0) {
          setError(`–ö—ç—à –ø—É—Å—Ç. –ù–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å" –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫.`);
        } else {
          setError(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${rawMetricsMap.size} –º–µ—Ç—Ä–∏–∫ –∏–∑ –∫—ç—à–∞. –ù–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å" –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö.`);
        }
        
        return;
      }

      // –®–∞–≥ 2: –û–î–ò–ù –ë–ê–¢–ß–ï–í–´–ô –ó–ê–ü–†–û–° –¥–ª—è –≤—Å–µ—Ö –≤–∏–¥–µ–æ –±–µ–∑ –∫—ç—à–∞
      if (videosToLoadFromApi.length > 0) {
        console.log(`üåê –ë–∞—Ç—á–µ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ ${videosToLoadFromApi.length} –≤–∏–¥–µ–æ –∏–∑ API...`);
        console.log('üìã –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:', videosToLoadFromApi.slice(0, 5));
        
        const batchResult = await MetricsService.getBatchVideoMetrics(videosToLoadFromApi, {
          kind: 'daily_first4_total',
          useCache: true
        });

        console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê batchResult:', {
          success: batchResult.success,
          resultsCount: batchResult.results?.length,
          resultsType: typeof batchResult.results,
          isArray: Array.isArray(batchResult.results),
          error: batchResult.error
        });

        if (batchResult.success && batchResult.results) {
          console.log(`‚úÖ –ë–∞—Ç—á–µ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω: ${batchResult.results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
          
          // –ö–†–ò–¢–ò–ß–ù–û: –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
          console.log('üìã –ü–µ—Ä–≤—ã–µ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:');
          for (let i = 0; i < Math.min(3, batchResult.results.length); i++) {
            console.log(`  [${i}]:`, {
              videoName: batchResult.results[i].videoName,
              found: batchResult.results[i].found,
              dailyCount: batchResult.results[i].daily?.length,
              hasFirst4: !!batchResult.results[i].first4,
              hasTotal: !!batchResult.results[i].total
            });
          }
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ Map
          batchResult.results.forEach(videoResult => {
            // –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π
            const matchingKeys = [];
            
            videoMap.forEach((metadata, videoKey) => {
              // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
              if (metadata.videoTitle === videoResult.videoName) {
                matchingKeys.push(videoKey);
              }
            });
            
            if (matchingKeys.length === 0) {
              console.warn(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è –≤–∏–¥–µ–æ "${videoResult.videoName}" –≤ videoMap`);
              
              // –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
              const similar = [];
              videoMap.forEach((metadata, videoKey) => {
                if (metadata.videoTitle.toLowerCase().includes(videoResult.videoName.toLowerCase()) ||
                    videoResult.videoName.toLowerCase().includes(metadata.videoTitle.toLowerCase())) {
                  similar.push({ key: videoKey, title: metadata.videoTitle });
                }
              });
              
              if (similar.length > 0) {
                console.log(`  –ü–æ—Ö–æ–∂–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è:`, similar);
              }
              
              return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            }
            
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${matchingKeys.length} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è "${videoResult.videoName}"`);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            matchingKeys.forEach(videoKey => {
              const metadata = videoMap.get(videoKey);
              
              if (metadata.videoTitle === videoResult.videoName) {
                if (videoResult.found && videoResult.daily && videoResult.daily.length > 0) {
                  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ —Ñ–æ—Ä–º–∞—Ç—É rawMetrics
                  const allDailyData = videoResult.daily.map(d => ({
                    date: d.date,
                    leads: d.leads,
                    cost: d.cost,
                    clicks: d.clicks,
                    impressions: d.impressions,
                    avg_duration: d.avg_duration
                  }));

                  const aggregates = MetricsService.aggregateDailyData(allDailyData);
                  const metrics = MetricsService.computeDerivedMetrics(aggregates);
                  const formatted = MetricsService.formatMetrics(metrics);

                  rawMetricsMap.set(videoKey, {
                    found: true,
                    data: {
                      raw: metrics,
                      formatted: formatted,
                      allDailyData: allDailyData,
                      dailyData: allDailyData,
                      videoName: metadata.videoTitle,
                      period: 'all',
                      updatedAt: new Date().toISOString()
                    },
                    error: null,
                    videoName: metadata.videoTitle,
                    creativeId: metadata.creativeId,
                    videoIndex: metadata.videoIndex,
                    fromCache: false,
                    noData: false
                  });
                } else {
                  // –ö–†–ò–¢–ò–ß–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –¥–∞–∂–µ –¥–ª—è –≤–∏–¥–µ–æ –±–µ–∑ –º–µ—Ç—Ä–∏–∫
                  rawMetricsMap.set(videoKey, {
                    found: false,
                    data: null,
                    error: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                    videoName: metadata.videoTitle,
                    creativeId: metadata.creativeId,
                    videoIndex: metadata.videoIndex,
                    noData: true // –§–ª–∞–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö
                  });
                }
              }
            });
          });
        } else {
          console.error('‚ùå –û—à–∏–±–∫–∞ –±–∞—Ç—á–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', batchResult.error);
          setError(`–û—à–∏–±–∫–∞ API: ${batchResult.error}`);
        }
      }

      console.log('üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê rawMetricsMap:');
      console.log(`  üì¶ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ Map: ${rawMetricsMap.size}`);
      console.log(`  ‚úÖ –° –¥–∞–Ω–Ω—ã–º–∏ (found=true): ${Array.from(rawMetricsMap.values()).filter(m => m.found).length}`);
      console.log(`  ‚ùå –ë–µ–∑ –¥–∞–Ω–Ω—ã—Ö (found=false): ${Array.from(rawMetricsMap.values()).filter(m => !m.found).length}`);
      
      // –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π
      const entries = Array.from(rawMetricsMap.entries());
      if (entries.length > 0) {
        console.log('üìã –ü–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏ –≤ rawMetricsMap:');
        for (let i = 0; i < Math.min(3, entries.length); i++) {
          const [key, value] = entries[i];
          console.log(`  [${key}]:`, {
            found: value.found,
            videoName: value.videoName,
            hasData: !!value.data,
            leads: value.data?.raw?.leads
          });
        }
      }

      // üÜï –®–ê–ì 4: LIKE –ø–æ–∏—Å–∫ –¥–ª—è –≤–∏–¥–µ–æ –±–µ–∑ –º–µ—Ç—Ä–∏–∫ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ forceRefresh)
      if (forceRefresh) {
        const videosWithoutMetrics = [];
        const videosWithoutMetricsMap = new Map();
        
        videoMap.forEach((metadata, videoKey) => {
          const existingMetric = rawMetricsMap.get(videoKey);
          if (!existingMetric || !existingMetric.found || existingMetric.noData) {
            // –û–±—Ä–µ–∑–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è LIKE –ø–æ–∏—Å–∫–∞
            const videoTitle = metadata.videoTitle;
            const nameWithoutExt = videoTitle.replace(/\.(mp4|avi|mov|mkv|webm|m4v)$/i, '');
            
            videosWithoutMetrics.push(nameWithoutExt);
            videosWithoutMetricsMap.set(nameWithoutExt, {
              videoKey,
              originalTitle: videoTitle,
              metadata
            });
          }
        });
        
        if (videosWithoutMetrics.length > 0) {
          console.log(`üîç LIKE –ø–æ–∏—Å–∫: –Ω–∞–π–¥–µ–Ω–æ ${videosWithoutMetrics.length} –≤–∏–¥–µ–æ –ë–ï–ó –º–µ—Ç—Ä–∏–∫`);
          console.log('üìã –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è LIKE –ø–æ–∏—Å–∫–∞:', videosWithoutMetrics.slice(0, 3));
          
          try {
            const likeBatchResult = await MetricsService.getBatchVideoMetrics(videosWithoutMetrics, {
              kind: 'daily_first4_total',
              useCache: false,
              useLike: true // üî• LIKE —Ä–µ–∂–∏–º
            });
            
            if (likeBatchResult.success && likeBatchResult.results && likeBatchResult.results.length > 0) {
              console.log(`‚úÖ LIKE –ø–æ–∏—Å–∫ –Ω–∞—à–µ–ª ${likeBatchResult.results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
              
              // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã LIKE –ø–æ–∏—Å–∫–∞
              likeBatchResult.results.forEach(videoResult => {
                if (!videoResult.found || !videoResult.daily || videoResult.daily.length === 0) {
                  return;
                }
                
                // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π videoKey –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
                let matchedVideoKey = null;
                let matchedMetadata = null;
                
                for (const [nameWithoutExt, info] of videosWithoutMetricsMap.entries()) {
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ª–∏ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –≤–∏–¥–µ–æ
                  if (videoResult.videoName.includes(nameWithoutExt) || nameWithoutExt.includes(videoResult.videoName)) {
                    matchedVideoKey = info.videoKey;
                    matchedMetadata = info.metadata;
                    console.log(`‚úÖ LIKE —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: "${nameWithoutExt}" ‚Üî "${videoResult.videoName}"`);
                    break;
                  }
                }
                
                if (!matchedVideoKey) {
                  console.warn(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è LIKE —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: "${videoResult.videoName}"`);
                  return;
                }
                
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ —Ñ–æ—Ä–º–∞—Ç—É rawMetrics
                const allDailyData = videoResult.daily.map(d => ({
                  date: d.date,
                  leads: d.leads,
                  cost: d.cost,
                  clicks: d.clicks,
                  impressions: d.impressions,
                  avg_duration: d.avg_duration
                }));

                const aggregates = MetricsService.aggregateDailyData(allDailyData);
                const metrics = MetricsService.computeDerivedMetrics(aggregates);
                const formatted = MetricsService.formatMetrics(metrics);

                // –û–±–Ω–æ–≤–ª—è–µ–º rawMetricsMap –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
                rawMetricsMap.set(matchedVideoKey, {
                  found: true,
                  data: {
                    raw: metrics,
                    formatted: formatted,
                    allDailyData: allDailyData,
                    dailyData: allDailyData,
                    videoName: matchedMetadata.videoTitle,
                    period: 'all',
                    updatedAt: new Date().toISOString()
                  },
                  error: null,
                  videoName: matchedMetadata.videoTitle,
                  creativeId: matchedMetadata.creativeId,
                  videoIndex: matchedMetadata.videoIndex,
                  fromCache: false,
                  noData: false,
                  foundViaLike: true // üè∑Ô∏è –ú–∞—Ä–∫–µ—Ä LIKE –ø–æ–∏—Å–∫–∞
                });
                
                console.log(`üéØ LIKE –º–µ—Ç—Ä–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è: ${matchedMetadata.videoTitle}`);
              });
              
              console.log(`üéâ LIKE –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${likeBatchResult.results.length} –≤–∏–¥–µ–æ`);
            } else {
              console.log('‚ö†Ô∏è LIKE –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
            }
          } catch (likeError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ LIKE –ø–æ–∏—Å–∫–∞:', likeError);
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
          }
        } else {
          console.log('‚úÖ –í—Å–µ –≤–∏–¥–µ–æ –∏–º–µ—é—Ç –º–µ—Ç—Ä–∏–∫–∏, LIKE –ø–æ–∏—Å–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
        }
      }

      setRawBatchMetrics(rawMetricsMap);

      // –®–∞–≥ 3: –ë–ê–¢–ß–ï–í–û–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à Supabase (–ø–µ—Ä–∏–æ–¥ "all" –∏ "4days")
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï –º–µ—Ç—Ä–∏–∫–∏, –≤–∫–ª—é—á–∞—è –≤–∏–¥–µ–æ –ë–ï–ó –¥–∞–Ω–Ω—ã—Ö (—Å NULL)
      const allMetricsToSave = Array.from(rawMetricsMap.values()).filter(m => 
        !m.fromCache // –¢–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ, –Ω–µ –∏–∑ –∫—ç—à–∞
      );

      if (allMetricsToSave.length > 0) {
        console.log(`üíæ –ë–∞—Ç—á–µ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${allMetricsToSave.length} –º–µ—Ç—Ä–∏–∫ –≤ –∫—ç—à (–≤–∫–ª—é—á–∞—è –≤–∏–¥–µ–æ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö)...`);
        
        // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –º–µ—Ç—Ä–∏–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
        const metricsWithData = allMetricsToSave.filter(m => m.found && m.data);
        const metricsWithoutData = allMetricsToSave.filter(m => !m.found || !m.data);

        console.log(`üìä –° –¥–∞–Ω–Ω—ã–º–∏: ${metricsWithData.length}, –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö: ${metricsWithoutData.length}`);
        
        // === –°–û–•–†–ê–ù–Ø–ï–ú –ü–ï–†–ò–û–î "ALL" ===
        
        // –ú–µ—Ç—Ä–∏–∫–∏ –° –î–ê–ù–ù–´–ú–ò –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ "all"
        const metricsToSaveAll = metricsWithData.map(m => ({
          creativeId: m.creativeId,
          article: videoMap.get(`${m.creativeId}_${m.videoIndex}`)?.article || m.videoName,
          videoIndex: m.videoIndex,
          videoTitle: m.videoName,
          metricsData: m.data,
          period: 'all',
          hasData: true
        }));

        // –ú–µ—Ç—Ä–∏–∫–∏ –ë–ï–ó –î–ê–ù–ù–´–• –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ "all" (—Å NULL)
        const metricsToSaveAllNoData = metricsWithoutData.map(m => ({
          creativeId: m.creativeId,
          article: videoMap.get(`${m.creativeId}_${m.videoIndex}`)?.article || m.videoName,
          videoIndex: m.videoIndex,
          videoTitle: m.videoName,
          metricsData: null,
          period: 'all',
          hasData: false
        }));

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–µ—Ä–∏–æ–¥–∞ "all"
        const allPeriodAll = [...metricsToSaveAll, ...metricsToSaveAllNoData];
        
        if (allPeriodAll.length > 0) {
          await metricsAnalyticsService.saveBatchMetricsCache(allPeriodAll);
          console.log(`‚úÖ –ü–µ—Ä–∏–æ–¥ "all" —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${metricsToSaveAll.length} —Å –¥–∞–Ω–Ω—ã–º–∏ + ${metricsToSaveAllNoData.length} –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö`);
        }

        // === –°–û–•–†–ê–ù–Ø–ï–ú –ü–ï–†–ò–û–î "4DAYS" ===
        
        // –ú–µ—Ç—Ä–∏–∫–∏ –° –î–ê–ù–ù–´–ú–ò –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ "4days"
        const metricsToSave4Days = [];
        
        metricsWithData.forEach(m => {
          const allDailyData = m.data.allDailyData || m.data.dailyData || [];
          
          if (allDailyData.length > 0) {
            // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 4 –¥–Ω—è
            const first4Days = allDailyData.slice(0, Math.min(4, allDailyData.length));
            
            // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–≤—ã–µ 4 –¥–Ω—è
            const aggregated = {
              leads: 0,
              cost: 0,
              clicks: 0,
              impressions: 0,
              duration_sum: 0,
              days_count: 0
            };
            
            first4Days.forEach(day => {
              aggregated.leads += day.leads || 0;
              aggregated.cost += day.cost || 0;
              aggregated.clicks += day.clicks || 0;
              aggregated.impressions += day.impressions || 0;
              aggregated.duration_sum += day.avg_duration || 0;
              aggregated.days_count += 1;
            });
            
            // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            const avg_duration = aggregated.days_count > 0 ? aggregated.duration_sum / aggregated.days_count : 0;
            const cpl = aggregated.leads > 0 ? aggregated.cost / aggregated.leads : 0;
            const ctr_percent = aggregated.impressions > 0 ? (aggregated.clicks / aggregated.impressions) * 100 : 0;
            const cpc = aggregated.clicks > 0 ? aggregated.cost / aggregated.clicks : 0;
            const cpm = aggregated.impressions > 0 ? (aggregated.cost / aggregated.impressions) * 1000 : 0;
            
            const raw = {
              leads: aggregated.leads,
              cost: Number(aggregated.cost.toFixed(2)),
              clicks: aggregated.clicks,
              impressions: aggregated.impressions,
              avg_duration: Number(avg_duration.toFixed(2)),
              days_count: aggregated.days_count,
              cpl: Number(cpl.toFixed(2)),
              ctr_percent: Number(ctr_percent.toFixed(2)),
              cpc: Number(cpc.toFixed(2)),
              cpm: Number(cpm.toFixed(2))
            };
            
            const formatted = {
              leads: String(Math.round(raw.leads)),
              cpl: raw.cpl.toFixed(2) + '$',
              cost: raw.cost.toFixed(2) + '$',
              ctr: raw.ctr_percent.toFixed(2) + '%',
              cpc: raw.cpc.toFixed(2) + '$',
              cpm: raw.cpm.toFixed(2) + '$',
              clicks: String(Math.round(raw.clicks)),
              impressions: String(Math.round(raw.impressions)),
              avg_duration: raw.avg_duration.toFixed(1) + '—Å',
              days: String(raw.days_count) + ' –¥–Ω.'
            };
            
            const data4Days = {
              raw: raw,
              formatted: formatted,
              allDailyData: first4Days,
              dailyData: first4Days,
              videoName: m.videoName,
              period: '4days',
              updatedAt: m.data.updatedAt
            };
            
            metricsToSave4Days.push({
              creativeId: m.creativeId,
              article: videoMap.get(`${m.creativeId}_${m.videoIndex}`)?.article || m.videoName,
              videoIndex: m.videoIndex,
              videoTitle: m.videoName,
              metricsData: data4Days,
              period: '4days',
              hasData: true
            });
          }
        });

        // –ú–µ—Ç—Ä–∏–∫–∏ –ë–ï–ó –î–ê–ù–ù–´–• –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ "4days" (—Å NULL)
        const metricsToSave4DaysNoData = metricsWithoutData.map(m => ({
          creativeId: m.creativeId,
          article: videoMap.get(`${m.creativeId}_${m.videoIndex}`)?.article || m.videoName,
          videoIndex: m.videoIndex,
          videoTitle: m.videoName,
          metricsData: null,
          period: '4days',
          hasData: false
        }));

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–µ—Ä–∏–æ–¥–∞ "4days"
        const allPeriod4Days = [...metricsToSave4Days, ...metricsToSave4DaysNoData];
        
        if (allPeriod4Days.length > 0) {
          await metricsAnalyticsService.saveBatchMetricsCache(allPeriod4Days);
          console.log(`‚úÖ –ü–µ—Ä–∏–æ–¥ "4days" —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${metricsToSave4Days.length} —Å –¥–∞–Ω–Ω—ã–º–∏ + ${metricsToSave4DaysNoData.length} –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö`);
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      await metricsAnalyticsService.updateMetricsLastUpdate();
      setLastUpdated(new Date());
      
      const successCount = Array.from(rawMetricsMap.values()).filter(m => m.found).length;
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${successCount}/${videosToLoad.length} –º–µ—Ç—Ä–∏–∫`);

    } catch (err) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', err);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + err.message);
      setRawBatchMetrics(new Map());
      setFilteredBatchMetrics(new Map());
    } finally {
      setLoading(false);
      loadingCancelRef.current = false;
    }
  }, [creatives]);

  /**
   * –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–µ—Ä–∏–æ–¥–∞
   */
  const loadForPeriod = useCallback(async (targetPeriod) => {
    if (!rawBatchMetrics || rawBatchMetrics.size === 0) {
      console.log('‚ö†Ô∏è –ù–µ—Ç —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–º–µ–Ω—ã –ø–µ—Ä–∏–æ–¥–∞');
      setFilteredBatchMetrics(new Map());
      setStats({ total: 0, found: 0, notFound: 0 });
      return;
    }

    console.log(`‚ö° –ú–ì–ù–û–í–ï–ù–ù–ê–Ø —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ: –ø–µ—Ä–∏–æ–¥ "${targetPeriod}"`);

    // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞ Supabase –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    if (targetPeriod === '4days') {
      const creativeIds = [...new Set(
        Array.from(rawBatchMetrics.keys()).map(key => key.split('_')[0])
      )];

      try {
        console.log(`üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ "4days"...`);
        const cachedData = await metricsAnalyticsService.getBatchMetricsCache(creativeIds, '4days');

        if (cachedData && cachedData.length > 0) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ ${cachedData.length} –∑–∞–ø–∏—Å–µ–π –¥–ª—è "4days"`);
          
          const cachedMap = new Map();
          
          cachedData.forEach(cache => {
            if (cache && cache.found && cache.data) {
              const videoKey = `${cache.creative_id}_${cache.video_index}`;
              cachedMap.set(videoKey, {
                found: true,
                data: cache.data,
                error: null,
                videoName: cache.video_title,
                period: '4days',
                creativeId: cache.creative_id,
                videoIndex: cache.video_index,
                fromCache: true
              });
            }
          });

          // –ï—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
          if (cachedMap.size === rawBatchMetrics.size) {
            console.log(`‚úÖ –í–°–ï –º–µ—Ç—Ä–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫—ç—à–∞ –¥–ª—è "4days"`);
            setFilteredBatchMetrics(cachedMap);
            setStats({
              total: cachedMap.size,
              found: cachedMap.size,
              notFound: 0
            });
            return;
          }

          // –î–æ–ø–æ–ª–Ω—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —á–µ—Ä–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
          console.log(`‚ö° ${cachedMap.size} –∏–∑ –∫—ç—à–∞, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–µ—Ä–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é...`);
          
          for (const [videoKey, rawMetric] of rawBatchMetrics) {
            if (cachedMap.has(videoKey)) continue;

            if (!rawMetric.found || !rawMetric.data) {
              cachedMap.set(videoKey, {
                ...rawMetric,
                period: targetPeriod
              });
              continue;
            }

            const filtered = MetricsService.filterRawMetricsByPeriod(rawMetric, targetPeriod);
            cachedMap.set(videoKey, {
              found: filtered.found,
              data: filtered.data,
              error: filtered.error,
              videoName: rawMetric.videoName,
              period: targetPeriod,
              creativeId: rawMetric.creativeId,
              videoIndex: rawMetric.videoIndex
            });
          }

          setFilteredBatchMetrics(cachedMap);
          const successCount = Array.from(cachedMap.values()).filter(m => m.found).length;
          setStats({
            total: cachedMap.size,
            found: successCount,
            notFound: cachedMap.size - successCount
          });

          console.log(`‚úÖ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: ${cachedMap.size} –º–µ—Ç—Ä–∏–∫`);
          return;
        }
      } catch (cacheError) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫—ç—à–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é:', cacheError);
      }
    }

    // –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫
    const filteredMap = new Map();
    let successCount = 0;
    let totalCount = 0;

    for (const [videoKey, rawMetric] of rawBatchMetrics) {
      totalCount++;
      
      if (!rawMetric.found || !rawMetric.data) {
        filteredMap.set(videoKey, {
          ...rawMetric,
          period: targetPeriod
        });
        continue;
      }

      const filtered = MetricsService.filterRawMetricsByPeriod(rawMetric, targetPeriod);
      
      if (filtered.found) {
        filteredMap.set(videoKey, {
          found: true,
          data: filtered.data,
          error: null,
          videoName: rawMetric.videoName,
          period: targetPeriod,
          creativeId: rawMetric.creativeId,
          videoIndex: rawMetric.videoIndex
        });
        successCount++;
      } else {
        filteredMap.set(videoKey, {
          found: false,
          data: null,
          error: filtered.error || `–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥: ${targetPeriod}`,
          videoName: rawMetric.videoName,
          period: targetPeriod,
          creativeId: rawMetric.creativeId,
          videoIndex: rawMetric.videoIndex
        });
      }
    }

    setFilteredBatchMetrics(filteredMap);
    setStats({
      total: totalCount,
      found: successCount,
      notFound: totalCount - successCount
    });

    console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${successCount}/${totalCount}`);
  }, [rawBatchMetrics]);

  // –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞
  useEffect(() => {
    if (autoLoad && creatives) {
      loadRawBatchMetrics();
    }
    
    return () => {
      loadingCancelRef.current = true;
    };
  }, [creatives, autoLoad, loadRawBatchMetrics]);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–µ—Ä–∏–æ–¥–∞
  useEffect(() => {
    if (rawBatchMetrics.size > 0) {
      loadForPeriod(period);
    } else {
      setFilteredBatchMetrics(new Map());
      setStats({ total: 0, found: 0, notFound: 0 });
    }
  }, [rawBatchMetrics, period, loadForPeriod]);

  const getVideoMetrics = useCallback((creativeId, videoIndex) => {
    const videoKey = `${creativeId}_${videoIndex}`;
    return filteredBatchMetrics.get(videoKey) || null;
  }, [filteredBatchMetrics]);

  const getCreativeMetrics = useCallback((creativeId) => {
    const creativeMetrics = [];
    
    for (const [videoKey, metrics] of filteredBatchMetrics) {
      if (videoKey.startsWith(`${creativeId}_`)) {
        const videoIndex = parseInt(videoKey.split('_').pop());
        
        if (!isNaN(videoIndex)) {
          creativeMetrics.push({
            videoIndex,
            ...metrics
          });
        }
      }
    }
    
    creativeMetrics.sort((a, b) => a.videoIndex - b.videoIndex);
    
    return creativeMetrics.length > 0 ? creativeMetrics : null;
  }, [filteredBatchMetrics]);

  const hasVideoMetrics = useCallback((creativeId, videoIndex) => {
    const metrics = getVideoMetrics(creativeId, videoIndex);
    return metrics && metrics.found;
  }, [getVideoMetrics]);

  const getSuccessRate = useCallback(() => {
    if (stats.total === 0) return 0;
    return Math.round((stats.found / stats.total) * 100);
  }, [stats]);

  const refresh = useCallback(async () => {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...');
    loadingCancelRef.current = true;
    await new Promise(resolve => setTimeout(resolve, 100));
    await loadRawBatchMetrics(true, period);
  }, [loadRawBatchMetrics, period]);

  return {
    batchMetrics: filteredBatchMetrics,
    rawBatchMetrics,
    loading,
    error,
    stats,
    lastUpdated,
    refresh,
    loadFromCache: () => loadRawBatchMetrics(false),
    getVideoMetrics,
    getCreativeMetrics,
    hasVideoMetrics,
    getSuccessRate,
    currentPeriod: period
  };
}

/**
 * –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ö—É–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
 */
export function useVideoMetrics(videoTitle, autoLoad = true, period = 'all', creativeId = null, videoIndex = null) {
  const [rawMetrics, setRawMetrics] = useState(null);
  const [filteredMetrics, setFilteredMetrics] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [lastUpdated, setLastUpdated] = useState(null);

  const loadRawMetrics = useCallback(async () => {
    if (!videoTitle || videoTitle.startsWith('–í–∏–¥–µ–æ ')) {
      return;
    }

    setLoading(true);
    setError('');

    try {
      console.log(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è: ${videoTitle}`);
      
      const result = await MetricsService.getVideoMetricsRaw(
        videoTitle,
        true,
        creativeId,
        videoIndex,
        null
      );
      
      if (result.found) {
        setRawMetrics(result);
        setLastUpdated(new Date());
        setError('');
        console.log(`‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è: ${videoTitle}`);
      } else {
        setError(result.error || '–ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        setRawMetrics(null);
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + err.message);
      setRawMetrics(null);
    } finally {
      setLoading(false);
    }
  }, [videoTitle, creativeId, videoIndex]);

  const applyFilter = useCallback((rawData, targetPeriod) => {
    if (!rawData || !rawData.found) {
      setFilteredMetrics(null);
      return;
    }

    console.log(`‚ö° –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è ${videoTitle}: ${targetPeriod}`);
    
    const filtered = MetricsService.filterRawMetricsByPeriod(rawData, targetPeriod);
    setFilteredMetrics(filtered);
  }, [videoTitle]);

  useEffect(() => {
    if (autoLoad && videoTitle) {
      loadRawMetrics();
    }
  }, [videoTitle, autoLoad, loadRawMetrics]);

  useEffect(() => {
    if (rawMetrics) {
      applyFilter(rawMetrics, period);
    } else {
      setFilteredMetrics(null);
    }
  }, [rawMetrics, period, applyFilter]);

  return {
    metrics: filteredMetrics?.found ? filteredMetrics.data : null,
    loading,
    error: filteredMetrics?.found === false ? filteredMetrics.error : error,
    lastUpdated,
    refresh: loadRawMetrics,
    hasMetrics: filteredMetrics?.found || false,
    period: period
  };
}

export function useMetricsApi() {
  const [apiStatus, setApiStatus] = useState('unknown');
  const [checking, setChecking] = useState(false);
  const lastCheck = useRef(null);

  const checkApiStatus = useCallback(async (force = false) => {
    const now = Date.now();
    if (!force && lastCheck.current && (now - lastCheck.current) < 300000) {
      return apiStatus;
    }

    setChecking(true);
    
    try {
      const result = await MetricsService.checkApiStatus();
      const status = result.available ? 'available' : 'unavailable';
      setApiStatus(status);
      lastCheck.current = now;
      return status;
    } catch (error) {
      setApiStatus('unavailable');
      return 'unavailable';
    } finally {
      setChecking(false);
    }
  }, [apiStatus]);

  useEffect(() => {
    checkApiStatus();
  }, [checkApiStatus]);

  return {
    apiStatus,
    checking,
    checkApiStatus,
    isAvailable: apiStatus === 'available',
    isUnavailable: apiStatus === 'unavailable'
  };
}

export function useMetricsStats(creatives, batchMetricsMap = null) {
  const [stats, setStats] = useState({
    totalLeads: 0,
    totalCost: 0,
    totalClicks: 0,
    totalImpressions: 0,
    totalDays: 0,
    avgCPL: 0,
    avgCTR: 0,
    avgCPC: 0,
    avgCPM: 0,
    videosWithMetrics: 0,
    videosWithoutMetrics: 0,
    creativesWithMetrics: 0,
    creativesWithoutMetrics: 0
  });

  useEffect(() => {
    if (!creatives || creatives.length === 0 || !batchMetricsMap) {
      setStats({
        totalLeads: 0,
        totalCost: 0,
        totalClicks: 0,
        totalImpressions: 0,
        totalDays: 0,
        avgCPL: 0,
        avgCTR: 0,
        avgCPC: 0,
        avgCPM: 0,
        videosWithMetrics: 0,
        videosWithoutMetrics: 0,
        creativesWithMetrics: 0,
        creativesWithoutMetrics: 0
      });
      return;
    }

    let totalLeads = 0;
    let totalCost = 0;
    let totalClicks = 0;
    let totalImpressions = 0;
    let totalDays = 0;
    let videosWithMetrics = 0;
    let videosWithoutMetrics = 0;
    let creativesWithMetrics = 0;
    let creativesWithoutMetrics = 0;

    creatives.forEach(creative => {
      let creativeHasMetrics = false;
      const videoCount = creative.link_titles ? creative.link_titles.length : 0;
      
      for (let videoIndex = 0; videoIndex < videoCount; videoIndex++) {
        const videoKey = `${creative.id}_${videoIndex}`;
        const metrics = batchMetricsMap.get(videoKey);
        
        if (metrics && metrics.found && metrics.data) {
          const data = metrics.data.raw;
          totalLeads += data.leads || 0;
          totalCost += data.cost || 0;
          totalClicks += data.clicks || 0;
          totalImpressions += data.impressions || 0;
          totalDays += data.days_count || 0;
          videosWithMetrics++;
          creativeHasMetrics = true;
        } else {
          videosWithoutMetrics++;
        }
      }
      
      if (creativeHasMetrics) {
        creativesWithMetrics++;
      } else {
        creativesWithoutMetrics++;
      }
    });

    const avgCPL = totalLeads > 0 ? totalCost / totalLeads : 0;
    const avgCTR = totalImpressions > 0 ? (totalClicks / totalImpressions) * 100 : 0;
    const avgCPC = totalClicks > 0 ? totalCost / totalClicks : 0;
    const avgCPM = totalImpressions > 0 ? (totalCost / totalImpressions) * 1000 : 0;

    setStats({
      totalLeads,
      totalCost,
      totalClicks,
      totalImpressions,
      totalDays,
      avgCPL: Number(avgCPL.toFixed(2)),
      avgCTR: Number(avgCTR.toFixed(2)),
      avgCPC: Number(avgCPC.toFixed(2)),
      avgCPM: Number(avgCPM.toFixed(2)),
      videosWithMetrics,
      videosWithoutMetrics,
      creativesWithMetrics,
      creativesWithoutMetrics
    });

  }, [creatives, batchMetricsMap]);

  const formatStats = useCallback(() => {
    const formatInt = (n) => String(Math.round(Number(n) || 0));
    const formatMoney = (n) => (Number(n) || 0).toFixed(2) + "$";
    const formatPercent = (n) => (Number(n) || 0).toFixed(2) + "%";

    return {
      totalLeads: formatInt(stats.totalLeads),
      totalCost: formatMoney(stats.totalCost),
      totalClicks: formatInt(stats.totalClicks),
      totalImpressions: formatInt(stats.totalImpressions),
      totalDays: formatInt(stats.totalDays) + " –¥–Ω.",
      avgCPL: formatMoney(stats.avgCPL),
      avgCTR: formatPercent(stats.avgCTR),
      avgCPC: formatMoney(stats.avgCPC),
      avgCPM: formatMoney(stats.avgCPM),
      videosWithMetrics: formatInt(stats.videosWithMetrics),
      videosWithoutMetrics: formatInt(stats.videosWithoutMetrics),
      creativesWithMetrics: formatInt(stats.creativesWithMetrics),
      creativesWithoutMetrics: formatInt(stats.creativesWithoutMetrics),
      totalVideos: formatInt(stats.videosWithMetrics + stats.videosWithoutMetrics),
      totalCreatives: formatInt(stats.creativesWithMetrics + stats.creativesWithoutMetrics),
      videoMetricsSuccessRate: formatPercent(
        stats.videosWithMetrics + stats.videosWithoutMetrics > 0
          ? (stats.videosWithMetrics / (stats.videosWithMetrics + stats.videosWithoutMetrics)) * 100
          : 0
      ),
      creativeMetricsSuccessRate: formatPercent(
        stats.creativesWithMetrics + stats.creativesWithoutMetrics > 0
          ? (stats.creativesWithMetrics / (stats.creativesWithMetrics + stats.creativesWithoutMetrics)) * 100
          : 0
      )
    };
  }, [stats]);

  return {
    stats,
    formatStats,
    hasData: stats.videosWithMetrics > 0
  };
}
