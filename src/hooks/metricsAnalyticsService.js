// src/services/metricsAnalyticsService.js
import { supabase } from '../supabaseClient';

class MetricsAnalyticsService {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∑–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ (–±–∞—Ç—á–µ–≤—ã–π –∑–∞–ø—Ä–æ—Å)
   */
  async getZoneDataByArticles(articles) {
    try {
      if (!articles || articles.length === 0) {
        return new Map();
      }

      console.log(`üéØ –ë–∞—Ç—á–µ–≤—ã–π –ø–æ–∏—Å–∫ –∑–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${articles.length} –∞—Ä—Ç–∏–∫—É–ª–æ–≤`);

      const { data, error } = await supabase
        .from('metrics_analytics')
        .select('article, red_zone_price, pink_zone_price, gold_zone_price, green_zone_price, offer_zone')
        .in('article', articles);

      if (error) {
        throw error;
      }

      if (!data || data.length === 0) {
        console.log(`‚ùå –ó–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑ ${articles.length} –∞—Ä—Ç–∏–∫—É–ª–æ–≤`);
        return new Map();
      }

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã –∑–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${data.length}/${articles.length} –∞—Ä—Ç–∏–∫—É–ª–æ–≤`);
      console.log('üì¶ –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î:', data[0]);

      // –°–æ–∑–¥–∞–µ–º Map –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
      const zoneDataMap = new Map();
      data.forEach(item => {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–Ω –≤ —á–∏—Å–ª–∞
        const processedItem = {
          ...item,
          red_zone_price: item.red_zone_price ? parseFloat(item.red_zone_price) : null,
          pink_zone_price: item.pink_zone_price ? parseFloat(item.pink_zone_price) : null,
          gold_zone_price: item.gold_zone_price ? parseFloat(item.gold_zone_price) : null,
          green_zone_price: item.green_zone_price ? parseFloat(item.green_zone_price) : null
        };
        
        console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–æ–Ω –¥–ª—è ${item.article}:`, {
          red: processedItem.red_zone_price,
          pink: processedItem.pink_zone_price,
          gold: processedItem.gold_zone_price,
          green: processedItem.green_zone_price
        });
        
        zoneDataMap.set(item.article, processedItem);
      });

      return zoneDataMap;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  formatZoneData(zoneData) {
    if (!zoneData) {
      return null;
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –≤ —á–∏—Å–ª–æ
    const parsePrice = (value) => {
      if (value === null || value === undefined || value === '' || value === '‚Äî') {
        return null;
      }
      
      // –ï—Å–ª–∏ —É–∂–µ —á–∏—Å–ª–æ
      if (typeof value === 'number') {
        return value;
      }
      
      // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ - –ø–∞—Ä—Å–∏–º
      const parsed = parseFloat(String(value).replace(',', '.'));
      return isNaN(parsed) ? null : parsed;
    };

    const redPrice = parsePrice(zoneData.red_zone_price);
    const pinkPrice = parsePrice(zoneData.pink_zone_price);
    const goldPrice = parsePrice(zoneData.gold_zone_price);
    const greenPrice = parsePrice(zoneData.green_zone_price);

    console.log(`üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–æ–Ω –¥–ª—è ${zoneData.article}:`, {
      red: redPrice,
      pink: pinkPrice,
      gold: goldPrice,
      green: greenPrice
    });

    return {
      red: redPrice !== null ? `$${redPrice.toFixed(2)}` : '‚Äî',
      pink: pinkPrice !== null ? `$${pinkPrice.toFixed(2)}` : '‚Äî',
      gold: goldPrice !== null ? `$${goldPrice.toFixed(2)}` : '‚Äî',
      green: greenPrice !== null ? `$${greenPrice.toFixed(2)}` : '‚Äî',
      currentZone: zoneData.offer_zone || '‚Äî'
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ (–¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ú–µ—Ç—Ä–∏–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞)
   */
  async getAllMetricsLarge() {
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç—Ä–∏–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã metrics_analytics...');

      const { data, error, count } = await supabase
        .from('metrics_analytics')
        .select('*', { count: 'exact' })
        .order('id', { ascending: true });

      if (error) {
        throw error;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      const { data: lastUpdate } = await supabase
        .from('metrics_analytics')
        .select('created_at')
        .order('created_at', { ascending: false })
        .limit(1)
        .single();

      return {
        metrics: data || [],
        lastUpdated: lastUpdate?.created_at || null,
        actualCount: data?.length || 0,
        totalRecords: count || 0,
        databaseCount: data?.length || 0
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ CSV
   */
  async uploadMetrics(metrics) {
    try {
      console.log(`üì§ –ó–∞–≥—Ä—É–∑–∫–∞ ${metrics.length} –∑–∞–ø–∏—Å–µ–π –º–µ—Ç—Ä–∏–∫...`);

      // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
      const { error: deleteError } = await supabase
        .from('metrics_analytics')
        .delete()
        .neq('id', 0); // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏

      if (deleteError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π:', deleteError);
        throw deleteError;
      }

      console.log('‚úÖ –°—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã');

      // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –±–∞—Ç—á–∞–º–∏ –ø–æ 1000
      const batchSize = 1000;
      let inserted = 0;

      for (let i = 0; i < metrics.length; i += batchSize) {
        const batch = metrics.slice(i, i + batchSize);
        
        const { error: insertError } = await supabase
          .from('metrics_analytics')
          .insert(batch);

        if (insertError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –±–∞—Ç—á–∞ ${i}-${i + batch.length}:`, insertError);
          throw insertError;
        }

        inserted += batch.length;
        console.log(`‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ ${inserted}/${metrics.length} –∑–∞–ø–∏—Å–µ–π`);
      }

      return {
        count: inserted,
        total: metrics.length
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
   */
  async getMetricsLastUpdate() {
    try {
      const { data, error } = await supabase
        .from('metrics_analytics')
        .select('created_at')
        .order('created_at', { ascending: false })
        .limit(1)
        .single();

      if (error) throw error;

      return data?.created_at || null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –∫—ç—à–∞
   */
  async getMetricsCache(creativeId, videoIndex, period) {
    try {
      const { data, error } = await supabase
        .from('metrics_cache')
        .select('*')
        .eq('creative_id', creativeId)
        .eq('video_index', videoIndex)
        .eq('period', period)
        .single();

      if (error) {
        if (error.code === 'PGRST116') {
          // –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
          return null;
        }
        throw error;
      }

      return data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫—ç—à–∞ –º–µ—Ç—Ä–∏–∫:', error);
      return null;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –≤ –∫—ç—à
   */
  async saveMetricsCache(creativeId, article, videoIndex, videoName, metricsData, period) {
    try {
      const cacheEntry = {
        creative_id: creativeId,
        article: article,
        video_index: videoIndex,
        video_name: videoName,
        period: period,
        metrics_data: metricsData,
        cached_at: new Date().toISOString()
      };

      const { error } = await supabase
        .from('metrics_cache')
        .upsert(cacheEntry, {
          onConflict: 'creative_id,video_index,period'
        });

      if (error) throw error;

      console.log(`‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à –¥–ª—è ${videoName} (${period})`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à:', error);
      throw error;
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
const metricsAnalyticsService = new MetricsAnalyticsService();

export { metricsAnalyticsService };
export default metricsAnalyticsService;
