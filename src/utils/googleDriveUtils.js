// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π googleDriveUtils.js —Å OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –¥–ª—è Google Drive
// –ó–∞–º–µ–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ src/utils/googleDriveUtils.js

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Google OAuth
const GOOGLE_CONFIG = {
  client_id: '570232776340-q495aojp96lvg75vbb54ud9ltp8u2kmn.apps.googleusercontent.com',
  api_key: 'AIzaSyAgBZt6xX69phg8vD2NUcrXtsVCFxrVV1w',
  discovery_docs: ['https://www.googleapis.com/discovery/v1/apis/drive/v3/rest'],
  scopes: 'https://www.googleapis.com/auth/drive.metadata.readonly'
};

let gapi = null;
let isGapiInitialized = false;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google API
 */
const initializeGoogleAPI = async () => {
  if (isGapiInitialized && gapi) {
    return gapi;
  }

  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º Google API Script
    if (!window.gapi) {
      await loadGoogleAPIScript();
    }

    gapi = window.gapi;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google API
    await new Promise((resolve, reject) => {
      gapi.load('client:auth2', resolve);
    });

    await gapi.client.init({
      apiKey: GOOGLE_CONFIG.api_key,
      clientId: GOOGLE_CONFIG.client_id,
      discoveryDocs: GOOGLE_CONFIG.discovery_docs,
      scope: GOOGLE_CONFIG.scopes
    });

    isGapiInitialized = true;
    console.log('Google API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    return gapi;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google API:', error);
    throw error;
  }
};

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ Google API Script
 */
const loadGoogleAPIScript = () => {
  return new Promise((resolve, reject) => {
    if (window.gapi) {
      resolve();
      return;
    }

    const script = document.createElement('script');
    script.src = 'https://apis.google.com/js/api.js';
    script.onload = resolve;
    script.onerror = reject;
    document.head.appendChild(script);
  });
};

/**
 * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Google
 */
const authorizeGoogleUser = async () => {
  try {
    const gapi = await initializeGoogleAPI();
    const authInstance = gapi.auth2.getAuthInstance();
    
    if (authInstance.isSignedIn.get()) {
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ Google');
      return authInstance.currentUser.get();
    }

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const user = await authInstance.signIn();
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ Google');
    return user;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google:', error);
    throw error;
  }
};

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç File ID –∏–∑ —Å—Å—ã–ª–∫–∏
 */
export const extractFileIdFromUrl = (url) => {
  if (!url) return null;
  
  const patterns = [
    /drive\.google\.com\/file\/d\/([a-zA-Z0-9_-]+)/,
    /drive\.google\.com\/open\?id=([a-zA-Z0-9_-]+)/,
    /docs\.google\.com\/.+\/d\/([a-zA-Z0-9_-]+)/,
  ];
  
  for (const pattern of patterns) {
    const match = url.match(pattern);
    if (match && match[1]) {
      return match[1];
    }
  }
  
  return null;
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
 */
const getFileNameViaOAuth = async (fileId) => {
  try {
    const gapi = await initializeGoogleAPI();
    const authInstance = gapi.auth2.getAuthInstance();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if (!authInstance.isSignedIn.get()) {
      console.log('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º —Ñ–∞–π–ª–∞–º');
      await authorizeGoogleUser();
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    const response = await gapi.client.drive.files.get({
      fileId: fileId,
      fields: 'name,mimeType'
    });

    if (response.result && response.result.name) {
      return cleanFileName(response.result.name);
    }
  } catch (error) {
    console.log('OAuth –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error);
    // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞, –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    if (error.status === 404 || error.status === 403) {
      return null;
    }
    throw error;
  }
  
  return null;
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π API (–¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)
 */
const getFileNameViaPublicAPI = async (fileId) => {
  const apiKeys = [
    'AIzaSyAgBZt6xX69phg8vD2NUcrXtsVCFxrVV1w',
    'AIzaSyDxrdk_ipzlUefe49uiEslMWt7laGdz4OU'
  ];

  for (const apiKey of apiKeys) {
    try {
      const response = await fetch(
        `https://www.googleapis.com/drive/v3/files/${fileId}?fields=name,mimeType&key=${apiKey}`,
        {
          method: 'GET',
          headers: { 'Accept': 'application/json' }
        }
      );

      if (response.ok) {
        const data = await response.json();
        if (data.name) {
          return cleanFileName(data.name);
        }
      }
    } catch (error) {
      continue;
    }
  }
  
  return null;
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
 */
const getFileNameViaAlternative = async (fileId) => {
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
    const response = await fetch(`https://drive.google.com/file/d/${fileId}/view`, {
      method: 'HEAD',
      mode: 'no-cors'
    });
    
    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑-–∑–∞ CORS, –Ω–æ –ø–æ–ø—Ä–æ–±—É–µ–º
    return null;
  } catch (error) {
    return null;
  }
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
 */
export const getFileInfo = async (fileId, showAuthPrompt = true) => {
  if (!fileId) return null;
  
  console.log(`–ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ñ–∞–π–ª–∞: ${fileId}`);

  // –ú–µ—Ç–æ–¥ 1: –ü—Ä–æ–±—É–µ–º OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
  if (showAuthPrompt) {
    try {
      const title = await getFileNameViaOAuth(fileId);
      if (title && isValidTitle(title)) {
        console.log(`‚úì –ü–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ OAuth: "${title}"`);
        return { name: title, mimeType: 'video/mp4', id: fileId };
      }
    } catch (error) {
      console.log('OAuth –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error.message);
    }
  }

  // –ú–µ—Ç–æ–¥ 2: –ü—É–±–ª–∏—á–Ω—ã–π API –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  try {
    const title = await getFileNameViaPublicAPI(fileId);
    if (title && isValidTitle(title)) {
      console.log(`‚úì –ü–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π API: "${title}"`);
      return { name: title, mimeType: 'video/mp4', id: fileId };
    }
  } catch (error) {
    console.log('–ü—É–±–ª–∏—á–Ω—ã–π API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error.message);
  }

  // –ú–µ—Ç–æ–¥ 3: Netlify —Ñ—É–Ω–∫—Ü–∏—è
  try {
    const response = await fetch(`/.netlify/functions/get-drive-title?fileId=${fileId}`);
    if (response.ok) {
      const data = await response.json();
      if (data.title && isValidTitle(data.title)) {
        console.log(`‚úì –ü–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ Netlify: "${data.title}"`);
        return { name: cleanFileName(data.title), mimeType: 'video/mp4', id: fileId };
      }
    }
  } catch (error) {
    console.log('Netlify –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error.message);
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
  console.log(`‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ñ–∞–π–ª–∞ ${fileId}`);
  return null;
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google
 */
export const checkGoogleAuth = async () => {
  try {
    const gapi = await initializeGoogleAPI();
    const authInstance = gapi.auth2.getAuthInstance();
    return authInstance.isSignedIn.get();
  } catch (error) {
    return false;
  }
};

/**
 * –†—É—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
 */
export const requestGoogleAuth = async () => {
  try {
    await authorizeGoogleUser();
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    return false;
  }
};

/**
 * –í—ã—Ö–æ–¥ –∏–∑ Google –∞–∫–∫–∞—É–Ω—Ç–∞
 */
export const signOutGoogle = async () => {
  try {
    if (gapi) {
      const authInstance = gapi.auth2.getAuthInstance();
      await authInstance.signOut();
      console.log('–í—ã—Ö–æ–¥ –∏–∑ Google –∞–∫–∫–∞—É–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ Google:', error);
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è
 */
const isValidTitle = (title) => {
  if (!title || typeof title !== 'string') return false;
  
  const cleaned = title.trim();
  
  const invalidPatterns = [
    /^untitled$/i,
    /^–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è$/i,
    /sign in/i,
    /–≤–æ–π—Ç–∏/i,
    /access denied/i,
    /error/i,
    /loading/i
  ];

  return !invalidPatterns.some(pattern => pattern.test(cleaned)) && 
         cleaned.length > 0 && 
         cleaned.length < 300;
};

/**
 * –û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
 */
const cleanFileName = (filename) => {
  if (!filename) return filename;
  
  let cleaned = filename.trim();
  
  // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤
  cleaned = cleaned.replace(/\.(mp4|avi|mov|mkv|webm|m4v|flv|wmv)$/i, '');
  
  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
  cleaned = cleaned.replace(/\s+/g, ' ').trim();
  
  return cleaned;
};

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–∏–≤–∞ —Å—Å—ã–ª–æ–∫ —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –Ω–∞–∑–≤–∞–Ω–∏–π
 */
export const processLinksAndExtractTitles = async (links, showAuthPrompt = true) => {
  if (!links || links.length === 0) {
    return { links, titles: [] };
  }
  
  console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è', links.length, '—Å—Å—ã–ª–æ–∫...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é Google –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫
  let isAuthorized = false;
  if (showAuthPrompt) {
    try {
      isAuthorized = await checkGoogleAuth();
      if (isAuthorized) {
        console.log('‚úì Google –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞ - –º–æ–∂–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏');
      } else {
        console.log('‚ö† Google –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ - —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –ø—É–±–ª–∏—á–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏');
      }
    } catch (error) {
      console.log('‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é Google');
    }
  }
  
  const results = await Promise.allSettled(
    links.map(async (link, index) => {
      try {
        console.log(`üìé –°—Å—ã–ª–∫–∞ ${index + 1}:`, link.substring(0, 50) + '...');
        
        const fileId = extractFileIdFromUrl(link);
        
        if (!fileId) {
          console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å File ID –∏–∑ —Å—Å—ã–ª–∫–∏ ${index + 1}`);
          return `–í–∏–¥–µ–æ ${index + 1}`;
        }
        
        console.log(`üîë File ID ${index + 1}: ${fileId}`);
        
        const fileInfo = await getFileInfo(fileId, showAuthPrompt);
        
        if (fileInfo?.name && isValidTitle(fileInfo.name)) {
          console.log(`‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ ${index + 1}: "${fileInfo.name}"`);
          return fileInfo.name;
        } else {
          console.log(`üìπ Fallback ${index + 1}: –í–∏–¥–µ–æ ${index + 1}`);
          return `–í–∏–¥–µ–æ ${index + 1}`;
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏ ${index + 1}:`, error);
        return `–í–∏–¥–µ–æ ${index + 1}`;
      }
    })
  );
  
  const titles = results.map((result, index) => 
    result.status === 'fulfilled' ? result.value : `–í–∏–¥–µ–æ ${index + 1}`
  );
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const extractedCount = titles.filter(title => !title.startsWith('–í–∏–¥–µ–æ ')).length;
  const fallbackCount = titles.length - extractedCount;
  
  console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è:');
  console.log(`  ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–π: ${extractedCount}/${titles.length}`);
  console.log(`  üìπ Fallback –Ω–∞–∑–≤–∞–Ω–∏–π: ${fallbackCount}/${titles.length}`);
  console.log('üìù –ò—Ç–æ–≥–æ–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è:', titles);
  
  return { links, titles };
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export const formatFileName = (name, maxLength = 25) => {
  if (!name) return '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π —Ñ–∞–π–ª';
  
  let cleanName = name.trim();
  
  if (cleanName.length <= maxLength) {
    return cleanName;
  }
  
  return cleanName.substring(0, maxLength - 3) + '...';
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ Google Drive —Å—Å—ã–ª–∫–∏
 */
export const isGoogleDriveUrl = (url) => {
  if (!url) return false;
  return /(?:drive|docs)\.google\.com/.test(url);
};
