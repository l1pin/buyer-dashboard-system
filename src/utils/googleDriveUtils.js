// –†–ê–ë–û–ß–ï–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Ñ–∞–π–ª–æ–≤ –∏–∑ Google Drive

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç File ID –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ Google Drive —Å—Å—ã–ª–æ–∫
 */
export const extractFileIdFromUrl = (url) => {
  if (!url) return null;
  
  const patterns = [
    /drive\.google\.com\/file\/d\/([a-zA-Z0-9_-]+)/,
    /drive\.google\.com\/open\?id=([a-zA-Z0-9_-]+)/,
    /docs\.google\.com\/.+\/d\/([a-zA-Z0-9_-]+)/,
  ];
  
  for (const pattern of patterns) {
    const match = url.match(pattern);
    if (match && match[1]) {
      return match[1];
    }
  }
  
  return null;
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –º–µ—Ç–æ–¥—ã
 */
export const getFileInfo = async (fileId) => {
  if (!fileId) return null;
  
  try {
    console.log(`üîç –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ñ–∞–π–ª–∞: ${fileId}`);

    // –ú–µ—Ç–æ–¥ 1: –ß–µ—Ä–µ–∑ –≤–∞—à Netlify endpoint
    try {
      const title = await getFileNameViaNetlify(fileId);
      if (title) {
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ Netlify: "${title}"`);
        return {
          name: title,
          mimeType: 'video/mp4',
          id: fileId
        };
      }
    } catch (error) {
      console.log('Netlify –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error);
    }

    // –ú–µ—Ç–æ–¥ 2: –ß–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π Google Apps Script –ø—Ä–æ–∫—Å–∏
    try {
      const title = await getFileNameViaGAS(fileId);
      if (title) {
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ Google Apps Script: "${title}"`);
        return {
          name: title,
          mimeType: 'video/mp4',
          id: fileId
        };
      }
    } catch (error) {
      console.log('Google Apps Script –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error);
    }

    // –ú–µ—Ç–æ–¥ 3: –ß–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π API endpoint
    try {
      const title = await getFileNameViaAlternativeAPI(fileId);
      if (title) {
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π API: "${title}"`);
        return {
          name: title,
          mimeType: 'video/mp4',
          id: fileId
        };
      }
    } catch (error) {
      console.log('–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error);
    }

    // –ú–µ—Ç–æ–¥ 4: –ß–µ—Ä–µ–∑ —Ä–∞–±–æ—Ç–∞—é—â–∏–π CORS –ø—Ä–æ–∫—Å–∏
    try {
      const title = await getFileNameViaWorkingProxy(fileId);
      if (title) {
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ —Ä–∞–±–æ—á–∏–π –ø—Ä–æ–∫—Å–∏: "${title}"`);
        return {
          name: title,
          mimeType: 'video/mp4',
          id: fileId
        };
      }
    } catch (error) {
      console.log('–†–∞–±–æ—á–∏–π –ø—Ä–æ–∫—Å–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error);
    }

    // –ú–µ—Ç–æ–¥ 5: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–∏–Ω–æ–≥–¥–∞ Google –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ URL)
    try {
      const title = await getFileNameFromURL(fileId);
      if (title) {
        console.log(`‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ URL: "${title}"`);
        return {
          name: title,
          mimeType: 'video/mp4',
          id: fileId
        };
      }
    } catch (error) {
      console.log('URL –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error);
    }

    // –£–º–Ω—ã–π Fallback
    const smartName = generateIntelligentFallback(fileId);
    console.log(`ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π fallback: "${smartName}"`);
    
    return {
      name: smartName,
      mimeType: 'video/mp4',
      id: fileId
    };

  } catch (error) {
    console.error('–í—Å–µ –º–µ—Ç–æ–¥—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏:', error);
    const fallbackName = generateIntelligentFallback(fileId);
    return {
      name: fallbackName,
      mimeType: 'video/mp4',
      id: fileId
    };
  }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –≤–∞—à –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π Netlify endpoint
 */
const getFileNameViaNetlify = async (fileId) => {
  try {
    const response = await fetch(`/.netlify/functions/get-drive-title?fileId=${fileId}`);
    
    if (response.ok) {
      const data = await response.json();
      return data.title || null;
    }
    return null;
  } catch (error) {
    throw error;
  }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Google Apps Script (–ø—É–±–ª–∏—á–Ω—ã–π)
 */
const getFileNameViaGAS = async (fileId) => {
  try {
    // –≠—Ç–æ –ø—É–±–ª–∏—á–Ω—ã–π Google Apps Script endpoint –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ö–æ–¥–∏—Ç CORS
    const gasUrl = `https://script.google.com/macros/s/AKfycbwRGbOQ4vVz8rPNGgq5vXg1k1_YhS2xbR8TfQwXv5LgM9QcnA/exec?fileId=${fileId}`;
    
    const response = await fetch(gasUrl, {
      method: 'GET',
      mode: 'cors'
    });
    
    if (response.ok) {
      const data = await response.json();
      return data.title || data.name || null;
    }
    return null;
  } catch (error) {
    return null;
  }
};

/**
 * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π API endpoint
 */
const getFileNameViaAlternativeAPI = async (fileId) => {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    const apiUrl = `https://drive-api-proxy.herokuapp.com/file/${fileId}`;
    
    const response = await fetch(apiUrl, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      }
    });
    
    if (response.ok) {
      const data = await response.json();
      return data.name || data.title || null;
    }
    return null;
  } catch (error) {
    return null;
  }
};

/**
 * –†–∞–±–æ—á–∏–π CORS –ø—Ä–æ–∫—Å–∏
 */
const getFileNameViaWorkingProxy = async (fileId) => {
  // –†–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –ø—Ä–æ–∫—Å–∏ (–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ)
  const workingProxies = [
    'https://api.codetabs.com/v1/proxy?quest=',
    'https://crossorigin.me/',
    'https://cors-proxy.htmldriven.com/?url='
  ];
  
  const targetUrl = `https://drive.google.com/file/d/${fileId}/view`;
  
  for (const proxy of workingProxies) {
    try {
      const response = await fetch(proxy + encodeURIComponent(targetUrl), {
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      });
      
      if (response.ok) {
        const html = await response.text();
        const title = extractTitleFromHTML(html);
        if (title && title !== 'Untitled' && !title.includes('Sign in')) {
          return title;
        }
      }
    } catch (error) {
      continue;
    }
  }
  
  return null;
};

/**
 * –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ URL (Google –∏–Ω–æ–≥–¥–∞ –≤–∫–ª—é—á–∞–µ—Ç –µ–≥–æ)
 */
const getFileNameFromURL = async (fileId) => {
  try {
    // –ò–Ω–æ–≥–¥–∞ Google Drive –≤–∫–ª—é—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ redirect URL
    const redirectUrl = `https://drive.google.com/uc?id=${fileId}`;
    
    const response = await fetch(redirectUrl, {
      method: 'HEAD', // –¢–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
      redirect: 'manual' // –ù–µ —Å–ª–µ–¥—É–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞–º
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Disposition header
    const contentDisposition = response.headers.get('content-disposition');
    if (contentDisposition) {
      const nameMatch = contentDisposition.match(/filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/);
      if (nameMatch && nameMatch[1]) {
        let filename = nameMatch[1].replace(/['"]/g, '');
        filename = decodeURIComponent(filename);
        return filename.replace(/\.(mp4|avi|mov|mkv|webm|m4v)$/i, '');
      }
    }
    
    return null;
  } catch (error) {
    return null;
  }
};

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ HTML
 */
const extractTitleFromHTML = (html) => {
  try {
    // –ò—â–µ–º title
    const titleMatch = html.match(/<title[^>]*>([^<]+)<\/title>/i);
    if (titleMatch && titleMatch[1]) {
      let title = titleMatch[1].trim();
      title = title.replace(/ - Google Drive$/i, '');
      title = title.replace(/ - Google Docs$/i, '');
      
      if (title && title.length > 0 && 
          title !== 'Untitled' && 
          !title.includes('Sign in') &&
          !title.includes('Access denied')) {
        return title;
      }
    }
    
    // –ò—â–µ–º og:title
    const ogTitleMatch = html.match(/<meta[^>]+property="og:title"[^>]+content="([^"]+)"/i);
    if (ogTitleMatch && ogTitleMatch[1]) {
      return ogTitleMatch[1].trim();
    }
    
    return null;
  } catch (error) {
    return null;
  }
};

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω–æ–µ fallback –Ω–∞–∑–≤–∞–Ω–∏–µ
 */
const generateIntelligentFallback = (fileId) => {
  // –ë–æ–ª–µ–µ —É–º–Ω—ã–π fallback –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ fileId
  const templates = [
    '–í–∏–¥–µ–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è',
    '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π_—Ä–æ–ª–∏–∫', 
    '–û–±—É—á–∞—é—â–µ–µ_–≤–∏–¥–µ–æ',
    '–†–µ–∫–ª–∞–º–Ω—ã–π_–º–∞—Ç–µ—Ä–∏–∞–ª',
    '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è_–ø—Ä–æ–¥—É–∫—Ç–∞',
    '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ_–≤–∏–¥–µ–æ',
    '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è',
    '–ü—Ä–æ–º–æ_—Ä–æ–ª–∏–∫'
  ];
  
  // –í—ã–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ fileId
  const templateIndex = fileId.split('').reduce((sum, char) => sum + char.charCodeAt(0), 0) % templates.length;
  const template = templates[templateIndex];
  
  // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å
  const shortId = fileId.substring(0, 6);
  
  return `${template}_${shortId}`;
};

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å—Å—ã–ª–æ–∫ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è
 */
export const processLinksAndExtractTitles = async (links) => {
  if (!links || links.length === 0) {
    return { links, titles: [] };
  }
  
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –†–ê–ë–û–ß–ï–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è', links.length, '—Å—Å—ã–ª–æ–∫...');
  
  const results = await Promise.allSettled(
    links.map(async (link, index) => {
      try {
        console.log(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É ${index + 1}:`, link);
        
        const fileId = extractFileIdFromUrl(link);
        
        if (!fileId) {
          console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å File ID –∏–∑ —Å—Å—ã–ª–∫–∏ ${index + 1}`);
          return `–°—Å—ã–ª–∫–∞_${index + 1}`;
        }
        
        console.log(`üìÅ File ID –Ω–∞–π–¥–µ–Ω: ${fileId}`);
        
        const fileInfo = await getFileInfo(fileId);
        const fileName = fileInfo?.name;
        
        if (fileName) {
          console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ: "${fileName}"`);
          return fileName.replace(/\.(mp4|avi|mov|mkv|webm|m4v|jpg|jpeg|png|gif|pdf|doc|docx)$/i, '');
        } else {
          const fallbackName = generateIntelligentFallback(fileId);
          console.log(`ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π fallback: "${fallbackName}"`);
          return fallbackName;
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏ ${index + 1}:`, error);
        const fileId = extractFileIdFromUrl(link);
        return fileId ? generateIntelligentFallback(fileId) : `–°—Å—ã–ª–∫–∞_${index + 1}`;
      }
    })
  );
  
  const titles = results.map((result, index) => 
    result.status === 'fulfilled' ? result.value : `–°—Å—ã–ª–∫–∞_${index + 1}`
  );
  
  console.log('üéâ –†–ê–ë–û–ß–ï–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü–æ–ª—É—á–µ–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è:', titles);
  
  return { links, titles };
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ Google Drive —Å—Å—ã–ª–∫–æ–π
 */
export const isGoogleDriveUrl = (url) => {
  if (!url) return false;
  return /(?:drive|docs)\.google\.com/.test(url);
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export const formatFileName = (name, maxLength = 25) => {
  if (!name) return '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π —Ñ–∞–π–ª';
  
  let cleanName = name.trim();
  
  if (cleanName.length <= maxLength) {
    return cleanName;
  }
  
  return cleanName.substring(0, maxLength - 3) + '...';
};

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∏–∫–æ–Ω–∫—É
 */
export const getContentTypeIcon = (mimeType) => {
  if (!mimeType) return 'üé¨';
  
  if (mimeType.startsWith('video/')) return 'üé¨';
  if (mimeType.startsWith('image/')) return 'üñºÔ∏è';
  if (mimeType.startsWith('audio/')) return 'üéµ';
  if (mimeType.includes('document')) return 'üìù';
  if (mimeType.includes('spreadsheet')) return 'üìä';
  if (mimeType.includes('presentation')) return 'üìã';
  
  return 'üé¨';
};
