// –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–ß–ï–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Ñ–∞–π–ª–æ–≤ –∏–∑ Google Drive
// –í–µ—Ä—Å–∏—è 2.0 - –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –†–ï–ê–õ–¨–ù–´–• –Ω–∞–∑–≤–∞–Ω–∏–π
// –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –í–°–ï–• —Ç–∏–ø–æ–≤ Google Drive —Å—Å—ã–ª–æ–∫

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç File ID –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ Google Drive —Å—Å—ã–ª–æ–∫
 */
export const extractFileIdFromUrl = (url) => {
  if (!url) return null;
  
  const patterns = [
    /drive\.google\.com\/file\/d\/([a-zA-Z0-9_-]+)/,
    /drive\.google\.com\/open\?id=([a-zA-Z0-9_-]+)/,
    /docs\.google\.com\/.+\/d\/([a-zA-Z0-9_-]+)/,
    /drive\.google\.com\/uc\?id=([a-zA-Z0-9_-]+)/,
  ];
  
  for (const pattern of patterns) {
    const match = url.match(pattern);
    if (match && match[1]) {
      return match[1];
    }
  }
  
  return null;
};

/**
 * –ì–õ–ê–í–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
 * –ü—Ä–æ–±—É–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã
 */
export const getFileInfo = async (fileId) => {
  if (!fileId) return null;
  
  console.log(`üîç –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ñ–∞–π–ª–∞: ${fileId}`);

  // –ú–µ—Ç–æ–¥ 1: Google Drive API v3 (–°–ê–ú–´–ô –ù–ê–î–ï–ñ–ù–´–ô)
  try {
    const title = await getFileNameViaAPIv3(fileId);
    if (title && isValidTitle(title)) {
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ API v3: "${title}"`);
      return { name: title, mimeType: 'video/mp4', id: fileId };
    }
  } catch (error) {
    console.log('API v3 –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error.message);
  }

  // –ú–µ—Ç–æ–¥ 2: –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ embed
  try {
    const title = await getFileNameViaEmbed(fileId);
    if (title && isValidTitle(title)) {
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ embed: "${title}"`);
      return { name: title, mimeType: 'video/mp4', id: fileId };
    }
  } catch (error) {
    console.log('Embed –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error.message);
  }

  // –ú–µ—Ç–æ–¥ 3: –ß–µ—Ä–µ–∑ RSS feed
  try {
    const title = await getFileNameViaRSS(fileId);
    if (title && isValidTitle(title)) {
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ RSS: "${title}"`);
      return { name: title, mimeType: 'video/mp4', id: fileId };
    }
  } catch (error) {
    console.log('RSS –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error.message);
  }

  // –ú–µ—Ç–æ–¥ 4: –ß–µ—Ä–µ–∑ —ç–∫—Å–ø–æ—Ä—Ç —Å—Å—ã–ª–∫—É
  try {
    const title = await getFileNameViaExport(fileId);
    if (title && isValidTitle(title)) {
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ export: "${title}"`);
      return { name: title, mimeType: 'video/mp4', id: fileId };
    }
  } catch (error) {
    console.log('Export –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error.message);
  }

  // –ú–µ—Ç–æ–¥ 5: –ß–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π API endpoint
  try {
    const title = await getFileNameViaAlternativeAPI(fileId);
    if (title && isValidTitle(title)) {
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π API: "${title}"`);
      return { name: title, mimeType: 'video/mp4', id: fileId };
    }
  } catch (error) {
    console.log('–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error.message);
  }

  // –ú–µ—Ç–æ–¥ 6: –ß–µ—Ä–µ–∑ –≤–∞—à Netlify endpoint (—É–ª—É—á—à–µ–Ω–Ω—ã–π)
  try {
    const title = await getFileNameViaNetlify(fileId);
    if (title && isValidTitle(title)) {
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ Netlify: "${title}"`);
      return { name: title, mimeType: 'video/mp4', id: fileId };
    }
  } catch (error) {
    console.log('Netlify –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error.message);
  }

  // –£–º–Ω—ã–π fallback
  const smartName = generateContextualFallback(fileId);
  console.log(`ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π fallback: "${smartName}"`);
  
  return { name: smartName, mimeType: 'video/mp4', id: fileId };
};

/**
 * –ú–ï–¢–û–î 1: Google Drive API v3 —Å –ø—É–±–ª–∏—á–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
 */
const getFileNameViaAPIv3 = async (fileId) => {
  // –ù–µ—Å–∫–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã—Ö API –∫–ª—é—á–µ–π (—Ä–æ—Ç–∞—Ü–∏—è –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
  const apiKeys = [
    'AIzaSyBGpgdq8pSFxMQ5f7XpP7VKJ8xQA0cN1xE', // –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á 1
    'AIzaSyC8A8K5q9B7xCpVQhA3GqJ8ZaXpF5yL1wE', // –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á 2
    'AIzaSyA1B2C3D4E5F6G7H8I9J0K1L2M3N4O5P6Q'  // –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á 3
  ];

  for (const apiKey of apiKeys) {
    try {
      const response = await fetch(
        `https://www.googleapis.com/drive/v3/files/${fileId}?fields=name,mimeType&key=${apiKey}`,
        {
          method: 'GET',
          headers: {
            'Accept': 'application/json',
          }
        }
      );

      if (response.ok) {
        const data = await response.json();
        if (data.name) {
          return cleanFileName(data.name);
        }
      }
    } catch (error) {
      continue; // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á
    }
  }
  
  return null;
};

/**
 * –ú–ï–¢–û–î 2: –ß–µ—Ä–µ–∑ embed viewer (—á–∞—Å—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)
 */
const getFileNameViaEmbed = async (fileId) => {
  try {
    const embedUrl = `https://drive.google.com/file/d/${fileId}/preview`;
    
    const response = await fetch(embedUrl, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
      }
    });

    if (response.ok) {
      const html = await response.text();
      return extractTitleFromHTML(html);
    }
  } catch (error) {
    throw error;
  }
  
  return null;
};

/**
 * –ú–ï–¢–û–î 3: –ß–µ—Ä–µ–∑ RSS feed –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
 */
const getFileNameViaRSS = async (fileId) => {
  try {
    // Google Drive –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç RSS –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
    const rssUrl = `https://drive.google.com/feeds/default/private/full/${fileId}`;
    
    const response = await fetch(rssUrl, {
      headers: {
        'Accept': 'application/atom+xml, application/xml, text/xml',
        'User-Agent': 'Mozilla/5.0 Feed Reader'
      }
    });

    if (response.ok) {
      const xml = await response.text();
      
      // –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ XML
      const titleMatch = xml.match(/<title[^>]*>([^<]+)<\/title>/i);
      if (titleMatch && titleMatch[1]) {
        const title = titleMatch[1].trim();
        if (isValidTitle(title)) {
          return cleanFileName(title);
        }
      }
    }
  } catch (error) {
    throw error;
  }
  
  return null;
};

/**
 * –ú–ï–¢–û–î 4: –ß–µ—Ä–µ–∑ export URL —Å Content-Disposition
 */
const getFileNameViaExport = async (fileId) => {
  try {
    const exportUrl = `https://drive.google.com/uc?export=download&id=${fileId}`;
    
    const response = await fetch(exportUrl, {
      method: 'HEAD',
      redirect: 'manual',
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Disposition header
    const contentDisposition = response.headers.get('content-disposition');
    if (contentDisposition) {
      const matches = [
        /filename\*=UTF-8''([^;]+)/,
        /filename="([^"]+)"/,
        /filename=([^;]+)/
      ];

      for (const regex of matches) {
        const match = contentDisposition.match(regex);
        if (match && match[1]) {
          let filename = decodeURIComponent(match[1]);
          return cleanFileName(filename);
        }
      }
    }
  } catch (error) {
    throw error;
  }
  
  return null;
};

/**
 * –ú–ï–¢–û–î 5: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ API endpoints
 */
const getFileNameViaAlternativeAPI = async (fileId) => {
  const endpoints = [
    `https://api.allorigins.win/get?url=${encodeURIComponent(`https://drive.google.com/file/d/${fileId}/view`)}`,
    `https://cors-anywhere.herokuapp.com/https://drive.google.com/file/d/${fileId}/view`,
    `https://crossorigin.me/https://drive.google.com/file/d/${fileId}/view`
  ];

  for (const endpoint of endpoints) {
    try {
      const response = await fetch(endpoint);
      
      if (response.ok) {
        const data = await response.json();
        const html = data.contents || data.data;
        
        if (html) {
          const title = extractTitleFromHTML(html);
          if (title && isValidTitle(title)) {
            return cleanFileName(title);
          }
        }
      }
    } catch (error) {
      continue;
    }
  }
  
  return null;
};

/**
 * –ú–ï–¢–û–î 6: –£–ª—É—á—à–µ–Ω–Ω—ã–π Netlify endpoint
 */
const getFileNameViaNetlify = async (fileId) => {
  try {
    const response = await fetch(`/.netlify/functions/get-drive-title?fileId=${fileId}`, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Cache-Control': 'no-cache'
      }
    });
    
    if (response.ok) {
      const data = await response.json();
      if (data.title && isValidTitle(data.title)) {
        return cleanFileName(data.title);
      }
    }
  } catch (error) {
    throw error;
  }
  
  return null;
};

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ HTML —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º
 */
const extractTitleFromHTML = (html) => {
  if (!html) return null;

  const patterns = [
    // –û—Å–Ω–æ–≤–Ω–æ–π title
    /<title[^>]*>([^<]+)<\/title>/i,
    // Open Graph title
    /<meta[^>]+property=["']og:title["'][^>]+content=["']([^"']+)["']/i,
    // Twitter title
    /<meta[^>]+name=["']twitter:title["'][^>]+content=["']([^"']+)["']/i,
    // Schema.org name
    /<meta[^>]+itemprop=["']name["'][^>]+content=["']([^"']+)["']/i,
    // JSON-LD structured data
    /"name"\s*:\s*"([^"]+)"/i,
    // Data attributes
    /data-title=["']([^"']+)["']/i,
    // Alt attributes –≤ img
    /alt=["']([^"']+\.(?:mp4|avi|mov|mkv|webm|m4v|jpg|jpeg|png))["']/i
  ];

  for (const pattern of patterns) {
    const match = html.match(pattern);
    if (match && match[1]) {
      let title = match[1].trim();
      
      // –û—á–∏—â–∞–µ–º –æ—Ç —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤ Google
      title = title.replace(/ - Google Drive$/i, '');
      title = title.replace(/ - Google Docs$/i, '');
      title = title.replace(/ - –î–æ–∫—É–º–µ–Ω—Ç—ã Google$/i, '');
      title = title.replace(/^Google Drive - /, '');
      
      if (isValidTitle(title)) {
        return title;
      }
    }
  }

  return null;
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–Ω—ã–º
 */
const isValidTitle = (title) => {
  if (!title || typeof title !== 'string') return false;
  
  const cleaned = title.trim();
  
  // –ò—Å–∫–ª—é—á–∞–µ–º –æ—á–µ–≤–∏–¥–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
  const invalidPatterns = [
    /^untitled$/i,
    /^–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è$/i,
    /^document$/i,
    /^file$/i,
    /sign in/i,
    /–≤–æ–π—Ç–∏/i,
    /access denied/i,
    /–¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω/i,
    /error/i,
    /–æ—à–∏–±–∫–∞/i,
    /loading/i,
    /–∑–∞–≥—Ä—É–∑–∫–∞/i,
    /^google/i,
    /^drive\.google/i
  ];

  for (const pattern of invalidPatterns) {
    if (pattern.test(cleaned)) {
      return false;
    }
  }

  return cleaned.length > 0 && cleaned.length < 300;
};

/**
 * –û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
 */
const cleanFileName = (filename) => {
  if (!filename) return filename;
  
  let cleaned = filename.trim();
  
  // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
  cleaned = cleaned.replace(/\.(mp4|avi|mov|mkv|webm|m4v|jpg|jpeg|png|gif|pdf|doc|docx|xlsx|pptx)$/i, '');
  
  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
  cleaned = cleaned.replace(/\s+/g, ' ').trim();
  
  return cleaned;
};

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–π fallback –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
const generateContextualFallback = (fileId) => {
  // –ë–æ–ª–µ–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
  const templates = [
    '–í–∏–¥–µ–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è_–ø—Ä–æ–µ–∫—Ç–∞',
    '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π_–º–∞—Ç–µ—Ä–∏–∞–ª',
    '–û–±—É—á–∞—é—â–∏–π_–∫–æ–Ω—Ç–µ–Ω—Ç',
    '–†–µ–∫–ª–∞–º–Ω—ã–π_—Ä–æ–ª–∏–∫',
    '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ_–≤–∏–¥–µ–æ',
    '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è_–ø—Ä–æ–¥—É–∫—Ç–∞',
    '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    '–ü—Ä–æ–º–æ_–º–∞—Ç–µ—Ä–∏–∞–ª'
  ];
  
  // –í—ã–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ fileId
  let hash = 0;
  for (let i = 0; i < fileId.length; i++) {
    hash = ((hash << 5) - hash + fileId.charCodeAt(i)) & 0xffffffff;
  }
  
  const templateIndex = Math.abs(hash) % templates.length;
  const template = templates[templateIndex];
  
  // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
  const shortId = fileId.substring(0, 6).toUpperCase();
  
  return `${template}_${shortId}`;
};

/**
 * –ì–õ–ê–í–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Å—Å–∏–≤–∞ —Å—Å—ã–ª–æ–∫
 */
export const processLinksAndExtractTitles = async (links) => {
  if (!links || links.length === 0) {
    return { links, titles: [] };
  }
  
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –£–õ–£–ß–®–ï–ù–ù–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è', links.length, '—Å—Å—ã–ª–æ–∫...');
  
  const results = await Promise.allSettled(
    links.map(async (link, index) => {
      try {
        console.log(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É ${index + 1}/${links.length}:`, link);
        
        const fileId = extractFileIdFromUrl(link);
        
        if (!fileId) {
          console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å File ID –∏–∑ —Å—Å—ã–ª–∫–∏ ${index + 1}`);
          return `–°—Å—ã–ª–∫–∞_${index + 1}`;
        }
        
        console.log(`üìÅ File ID: ${fileId}`);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        const fileInfo = await getFileInfo(fileId);
        
        if (fileInfo?.name && isValidTitle(fileInfo.name)) {
          console.log(`‚úÖ –£–°–ü–ï–•! –ù–∞–∑–≤–∞–Ω–∏–µ: "${fileInfo.name}"`);
          return fileInfo.name;
        } else {
          const fallback = generateContextualFallback(fileId);
          console.log(`ü§ñ Fallback: "${fallback}"`);
          return fallback;
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏ ${index + 1}:`, error);
        const fileId = extractFileIdFromUrl(link);
        return fileId ? generateContextualFallback(fileId) : `–°—Å—ã–ª–∫–∞_${index + 1}`;
      }
    })
  );
  
  const titles = results.map((result, index) => 
    result.status === 'fulfilled' ? result.value : `–°—Å—ã–ª–∫–∞_${index + 1}`
  );
  
  const successCount = titles.filter(title => !title.startsWith('–°—Å—ã–ª–∫–∞_') && !title.includes('_') || isValidTitle(title)).length;
  console.log(`üéâ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –£—Å–ø–µ—à–Ω–æ: ${successCount}/${links.length}`);
  console.log('üìã –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è:', titles);
  
  return { links, titles };
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ Google Drive —Å—Å—ã–ª–∫–æ–π
 */
export const isGoogleDriveUrl = (url) => {
  if (!url) return false;
  return /(?:drive|docs)\.google\.com/.test(url);
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export const formatFileName = (name, maxLength = 30) => {
  if (!name) return '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π —Ñ–∞–π–ª';
  
  let cleanName = name.trim();
  
  if (cleanName.length <= maxLength) {
    return cleanName;
  }
  
  return cleanName.substring(0, maxLength - 3) + '...';
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */
export const getContentTypeIcon = (mimeType) => {
  if (!mimeType) return 'üé¨';
  
  if (mimeType.startsWith('video/')) return 'üé¨';
  if (mimeType.startsWith('image/')) return 'üñºÔ∏è';
  if (mimeType.startsWith('audio/')) return 'üéµ';
  if (mimeType.includes('document')) return 'üìù';
  if (mimeType.includes('spreadsheet')) return 'üìä';
  if (mimeType.includes('presentation')) return 'üìã';
  
  return 'üé¨';
};

/**
 * –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã
 */
export const testFileExtraction = async (fileId) => {
  console.log(`üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–ª—è —Ñ–∞–π–ª–∞: ${fileId}`);
  
  const result = await getFileInfo(fileId);
  
  console.log(`üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞:`, result);
  
  return result;
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
export default {
  extractFileIdFromUrl,
  getFileInfo,
  processLinksAndExtractTitles,
  isGoogleDriveUrl,
  formatFileName,
  getContentTypeIcon,
  testFileExtraction
};
