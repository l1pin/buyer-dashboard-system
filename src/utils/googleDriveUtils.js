// –†–µ–∞–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Ñ–∞–π–ª–æ–≤ –∏–∑ Google Drive

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç File ID –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ Google Drive —Å—Å—ã–ª–æ–∫
 */
export const extractFileIdFromUrl = (url) => {
  if (!url) return null;
  
  const patterns = [
    /drive\.google\.com\/file\/d\/([a-zA-Z0-9_-]+)/,
    /drive\.google\.com\/open\?id=([a-zA-Z0-9_-]+)/,
    /docs\.google\.com\/.+\/d\/([a-zA-Z0-9_-]+)/,
  ];
  
  for (const pattern of patterns) {
    const match = url.match(pattern);
    if (match && match[1]) {
      return match[1];
    }
  }
  
  return null;
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ Google Drive
 */
export const getFileInfo = async (fileId) => {
  if (!fileId) return null;
  
  try {
    // –ú–µ—Ç–æ–¥ 1: –ß–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π API –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    const metadataUrl = `https://www.googleapis.com/drive/v3/files/${fileId}?fields=name,mimeType&key=AIzaSyC5MtQgTJvY9cZj8ggKhK5W3YqK1X2JH4k`;
    
    try {
      const response = await fetch(metadataUrl);
      if (response.ok) {
        const data = await response.json();
        return {
          name: data.name,
          mimeType: data.mimeType || 'video/mp4',
          id: fileId
        };
      }
    } catch (apiError) {
      console.log('API –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π:', apiError);
    }

    // –ú–µ—Ç–æ–¥ 2: –ß–µ—Ä–µ–∑ oEmbed API
    try {
      const title = await getFileNameViaOEmbed(fileId);
      if (title) {
        return {
          name: title,
          mimeType: 'video/mp4',
          id: fileId
        };
      }
    } catch (oembedError) {
      console.log('oEmbed –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', oembedError);
    }

    // –ú–µ—Ç–æ–¥ 3: –ß–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º (JSONP)
    try {
      const title = await getFileNameViaJSONP(fileId);
      if (title) {
        return {
          name: title,
          mimeType: 'video/mp4',
          id: fileId
        };
      }
    } catch (jsonpError) {
      console.log('JSONP –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', jsonpError);
    }

    // –ú–µ—Ç–æ–¥ 4: –ü–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
    try {
      const title = await getFileNameViaProxy(fileId);
      if (title) {
        return {
          name: title,
          mimeType: 'video/mp4',
          id: fileId
        };
      }
    } catch (proxyError) {
      console.log('–ü—Ä–æ–∫—Å–∏ –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', proxyError);
    }

    // Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π ID –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ
    return {
      name: `–§–∞–π–ª_${fileId.substring(0, 8)}`,
      mimeType: 'video/mp4',
      id: fileId
    };

  } catch (error) {
    console.error('–í—Å–µ –º–µ—Ç–æ–¥—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏:', error);
    return {
      name: `–§–∞–π–ª_${fileId.substring(0, 8)}`,
      mimeType: 'video/mp4',
      id: fileId
    };
  }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ oEmbed API
 */
const getFileNameViaOEmbed = async (fileId) => {
  try {
    const oembedUrl = `https://docs.google.com/oembed?url=https://drive.google.com/file/d/${fileId}/view&format=json`;
    const response = await fetch(oembedUrl);
    
    if (response.ok) {
      const data = await response.json();
      return data.title || null;
    }
    return null;
  } catch (error) {
    return null;
  }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ JSONP –≤—ã–∑–æ–≤
 */
const getFileNameViaJSONP = async (fileId) => {
  return new Promise((resolve) => {
    try {
      const script = document.createElement('script');
      const callbackName = `gdrive_callback_${Date.now()}`;
      
      window[callbackName] = (data) => {
        document.head.removeChild(script);
        delete window[callbackName];
        
        if (data && data.name) {
          resolve(data.name);
        } else {
          resolve(null);
        }
      };
      
      script.src = `https://www.googleapis.com/drive/v3/files/${fileId}?callback=${callbackName}&fields=name&key=AIzaSyC5MtQgTJvY9cZj8ggKhK5W3YqK1X2JH4k`;
      script.onerror = () => {
        document.head.removeChild(script);
        delete window[callbackName];
        resolve(null);
      };
      
      document.head.appendChild(script);
      
      // Timeout —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        if (window[callbackName]) {
          document.head.removeChild(script);
          delete window[callbackName];
          resolve(null);
        }
      }, 5000);
      
    } catch (error) {
      resolve(null);
    }
  });
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ CORS –ø—Ä–æ–∫—Å–∏
 */
const getFileNameViaProxy = async (fileId) => {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ CORS –ø—Ä–æ–∫—Å–∏
    const proxies = [
      'https://api.allorigins.win/raw?url=',
      'https://cors-anywhere.herokuapp.com/',
      'https://thingproxy.freeboard.io/fetch/'
    ];
    
    const targetUrl = `https://drive.google.com/file/d/${fileId}/view`;
    
    for (const proxy of proxies) {
      try {
        const response = await fetch(proxy + encodeURIComponent(targetUrl), {
          method: 'GET',
          headers: {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
          }
        });
        
        if (response.ok) {
          const html = await response.text();
          const title = extractTitleFromHTML(html);
          if (title && title !== 'Untitled') {
            return title;
          }
        }
      } catch (proxyError) {
        continue; // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–∫—Å–∏
      }
    }
    
    return null;
  } catch (error) {
    return null;
  }
};

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã Google Drive
 */
const extractTitleFromHTML = (html) => {
  try {
    // –ò—â–µ–º title –≤ meta tags
    const titleMatch = html.match(/<title[^>]*>([^<]+)<\/title>/i);
    if (titleMatch && titleMatch[1]) {
      let title = titleMatch[1].trim();
      
      // –£–±–∏—Ä–∞–µ–º " - Google Drive" –∏–∑ –∫–æ–Ω—Ü–∞
      title = title.replace(/ - Google Drive$/i, '');
      
      // –£–±–∏—Ä–∞–µ–º –¥—Ä—É–≥–∏–µ —Å—É—Ñ—Ñ–∏–∫—Å—ã Google
      title = title.replace(/ - Google Docs$/i, '');
      title = title.replace(/ - Google Sheets$/i, '');
      title = title.replace(/ - Google Slides$/i, '');
      
      if (title && title.length > 0 && title !== 'Untitled') {
        return title;
      }
    }
    
    // –ò—â–µ–º –≤ data-title –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
    const dataTitleMatch = html.match(/data-title="([^"]+)"/i);
    if (dataTitleMatch && dataTitleMatch[1]) {
      return dataTitleMatch[1].trim();
    }
    
    // –ò—â–µ–º –≤ JSON –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const jsonMatch = html.match(/"title":"([^"]+)"/i);
    if (jsonMatch && jsonMatch[1]) {
      return jsonMatch[1].trim();
    }
    
    return null;
  } catch (error) {
    return null;
  }
};

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å—Å—ã–ª–æ–∫ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –†–ï–ê–õ–¨–ù–´–ï –Ω–∞–∑–≤–∞–Ω–∏—è
 */
export const processLinksAndExtractTitles = async (links) => {
  if (!links || links.length === 0) {
    return { links, titles: [] };
  }
  
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è', links.length, '—Å—Å—ã–ª–æ–∫...');
  
  const results = await Promise.allSettled(
    links.map(async (link, index) => {
      try {
        console.log(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É ${index + 1}:`, link);
        
        const fileId = extractFileIdFromUrl(link);
        
        if (!fileId) {
          console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å File ID –∏–∑ —Å—Å—ã–ª–∫–∏ ${index + 1}`);
          return `–°—Å—ã–ª–∫–∞_${index + 1}`;
        }
        
        console.log(`üìÅ File ID –Ω–∞–π–¥–µ–Ω: ${fileId}`);
        
        const fileInfo = await getFileInfo(fileId);
        const fileName = fileInfo?.name;
        
        if (fileName && fileName !== `–§–∞–π–ª_${fileId.substring(0, 8)}`) {
          console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: "${fileName}"`);
          // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
          return fileName.replace(/\.(mp4|avi|mov|mkv|webm|m4v|jpg|jpeg|png|gif|pdf|doc|docx)$/i, '');
        } else {
          console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback`);
          return `–í–∏–¥–µ–æ_${fileId.substring(0, 8)}`;
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏ ${index + 1}:`, error);
        const fileId = extractFileIdFromUrl(link);
        return fileId ? `–í–∏–¥–µ–æ_${fileId.substring(0, 8)}` : `–°—Å—ã–ª–∫–∞_${index + 1}`;
      }
    })
  );
  
  const titles = results.map((result, index) => 
    result.status === 'fulfilled' ? result.value : `–í–∏–¥–µ–æ_${index + 1}`
  );
  
  console.log('üéâ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü–æ–ª—É—á–µ–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è:', titles);
  
  return { links, titles };
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ Google Drive —Å—Å—ã–ª–∫–æ–π
 */
export const isGoogleDriveUrl = (url) => {
  if (!url) return false;
  return /(?:drive|docs)\.google\.com/.test(url);
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export const formatFileName = (name, maxLength = 25) => {
  if (!name) return '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π —Ñ–∞–π–ª';
  
  let cleanName = name.trim();
  
  if (cleanName.length <= maxLength) {
    return cleanName;
  }
  
  return cleanName.substring(0, maxLength - 3) + '...';
};

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∏–∫–æ–Ω–∫—É
 */
export const getContentTypeIcon = (mimeType) => {
  if (!mimeType) return 'üé¨';
  
  if (mimeType.startsWith('video/')) return 'üé¨';
  if (mimeType.startsWith('image/')) return 'üñºÔ∏è';
  if (mimeType.startsWith('audio/')) return 'üéµ';
  if (mimeType.includes('document')) return 'üìù';
  if (mimeType.includes('spreadsheet')) return 'üìä';
  if (mimeType.includes('presentation')) return 'üìã';
  
  return 'üé¨';
};
