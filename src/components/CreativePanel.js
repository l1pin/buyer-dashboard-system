// CreativePanel.js - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Ñ–ª–∞–≥–∞–º–∏ —Å—Ç—Ä–∞–Ω
// –ó–∞–º–µ–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ src/components/CreativePanel.js

import React, { useState, useEffect } from 'react';
import { creativeService } from '../supabaseClient';
import { 
  processLinksAndExtractTitles, 
  formatFileName, 
  ensureGoogleAuth,
  isGoogleDriveUrl
} from '../utils/googleDriveUtils';
import CreativeMetrics from './CreativeMetrics';
import { useBatchMetrics, useMetricsStats } from '../hooks/useMetrics';
import { MetricsService } from '../services/metricsService';
import { 
  Plus, 
  X, 
  Link as LinkIcon,
  Calendar,
  Eye,
  Trash2,
  RefreshCw,
  AlertCircle,
  CheckCircle,
  Video,
  Image as ImageIcon,
  User,
  Play,
  TrendingUp,
  BarChart3,
  Activity,
  MessageCircle,
  FileText,
  ExternalLink,
  Clock,
  MoreHorizontal,
  Edit,
  Bug,
  Users,
  Target,
  DollarSign,
  MousePointer
} from 'lucide-react';

function CreativePanel({ user }) {
  const [creatives, setCreatives] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showCommentModal, setShowCommentModal] = useState(false);
  const [selectedComment, setSelectedComment] = useState(null);
  const [creating, setCreating] = useState(false);
  const [authorizing, setAuthorizing] = useState(false);
  const [metricsPeriod, setMetricsPeriod] = useState('all');
  const [showPeriodDropdown, setShowPeriodDropdown] = useState(false);
  const [expandedWorkTypes, setExpandedWorkTypes] = useState(new Set());
  const [openDropdowns, setOpenDropdowns] = useState(new Set());
  const [debugMode, setDebugMode] = useState(false);
  
  const [newCreative, setNewCreative] = useState({
    article: '',
    links: [''],
    work_types: [],
    link_titles: [],
    comment: '',
    is_poland: false  // –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ñ–ª–∞–≥–∞ —Å—Ç—Ä–∞–Ω—ã
  });

  const [extractingTitles, setExtractingTitles] = useState(false);

  // –•—É–∫–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const { 
    batchMetrics, 
    loading: metricsLoading, 
    error: metricsError,
    stats: metricsStats,
    getVideoMetrics,
    refresh: refreshMetrics 
  } = useBatchMetrics(creatives, true, metricsPeriod);

  const { 
    stats: aggregatedMetricsStats,
    formatStats,
    hasData: hasMetricsData 
  } = useMetricsStats(creatives, batchMetrics);

  const workTypes = [
    '–ú–æ–Ω—Ç–∞–∂ _Video',
    'Upscale_Video', 
    '–†–µ—Å–∞–π–∑ 1',
    '–û–∑–≤—É—á–∫–∞',
    '–°—É–±—Ç–∏—Ç—Ä—ã',
    '–†–µ—Å–∞–π–∑ 2',
    '–ù–∞–ø–∏—Å–∞–Ω–Ω—è_Sub',
    'Video_Avarat',
    '–ú–æ–Ω—Ç–∞–∂ > 21s',
    '–ü—Ä–∞–≤–∫–∏_video',
    '–ü—Ä–µ–≤—å—é—à–∫–∞',
    '–°—Ç–∞—Ç–∏–∫–∞ 1',
    '–°—Ç–∞—Ç–∏–∫–∞ 2', 
    '–°—Ç–∞—Ç–∏–∫–∞ 3',
    '–°—Ç–∞—Ç–∏–∫–∞ 4',
    '–†–µ—Å–∞–π–∑ St 1',
    '–†–µ—Å–∞–π–∑ St 2',
    '–†–µ—Å–∞–π–∑ St 3', 
    '–†–µ—Å–∞–π–∑ St 4',
    '–ü—Ä–∞–≤–∫–∏ –°—Ç–∞—Ç–∏–∫–∞',
    '–î–æ–ø. 0,2',
    '–î–æ–ø. 0,4',
    '–î–æ–ø. 0,6',
    '–î–æ–ø. 0,8',
    '–î–æ–ø. 1',
    '–î–æ–ø. 2'
  ];

  const workTypeValues = {
    '–ú–æ–Ω—Ç–∞–∂ _Video': 1,
    '–ú–æ–Ω—Ç–∞–∂ > 21s': 0.4,
    'Upscale_Video': 0.2,
    '–†–µ—Å–∞–π–∑ 1': 0.4,
    '–û–∑–≤—É—á–∫–∞': 0.2,
    '–°—É–±—Ç–∏—Ç—Ä—ã': 0.2,
    '–†–µ—Å–∞–π–∑ 2': 0.4,
    '–ù–∞–ø–∏—Å–∞–Ω–Ω—è_Sub': 0.2,
    'Video_Avarat': 0.4,
    '–ü—Ä–∞–≤–∫–∏_video': 0.2,
    '–ü—Ä–µ–≤—å—é—à–∫–∞': 0.2,
    '–°—Ç–∞—Ç–∏–∫–∞ 1': 1,
    '–°—Ç–∞—Ç–∏–∫–∞ 2': 1,
    '–°—Ç–∞—Ç–∏–∫–∞ 3': 1,
    '–°—Ç–∞—Ç–∏–∫–∞ 4': 1,
    '–†–µ—Å–∞–π–∑ St 1': 0.2,
    '–†–µ—Å–∞–π–∑ St 2': 0.2,
    '–†–µ—Å–∞–π–∑ St 3': 0.2,
    '–†–µ—Å–∞–π–∑ St 4': 0.2,
    '–ü—Ä–∞–≤–∫–∏ –°—Ç–∞—Ç–∏–∫–∞': 0.2,
    '–î–æ–ø. 0,2': 0.2,
    '–î–æ–ø. 0,4': 0.4,
    '–î–æ–ø. 0,6': 0.6,
    '–î–æ–ø. 0,8': 0.8,
    '–î–æ–ø. 1': 1,
    '–î–æ–ø. 2': 2
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ñ–ª–∞–≥–æ–≤
  const UkraineFlag = () => (
    <div className="w-6 h-6 rounded-full overflow-hidden border border-gray-300 flex-shrink-0">
      <div className="w-full h-3 bg-blue-500"></div>
      <div className="w-full h-3 bg-yellow-400"></div>
    </div>
  );

  const PolandFlag = () => (
    <div className="w-6 h-6 rounded-full overflow-hidden border border-gray-300 flex-shrink-0">
      <div className="w-full h-3 bg-white"></div>
      <div className="w-full h-3 bg-red-500"></div>
    </div>
  );

  const calculateCOF = (workTypes) => {
    if (!workTypes || !Array.isArray(workTypes)) return 0;
    return workTypes.reduce((total, workType) => {
      const value = workTypeValues[workType] || 0;
      return total + value;
    }, 0);
  };

  const formatCOF = (cof) => {
    return cof % 1 === 0 ? cof.toString() : cof.toFixed(1);
  };

  const getCOFBadgeColor = (cof) => {
    if (cof >= 4) return 'bg-red-600 text-white border-red-600';
    if (cof >= 3) return 'bg-red-300 text-red-800 border-red-300';
    if (cof >= 2) return 'bg-yellow-300 text-yellow-800 border-yellow-300';
    if (cof >= 1.01) return 'bg-green-200 text-green-800 border-green-200';
    return 'bg-green-500 text-white border-green-500';
  };

  const getCOFStats = () => {
    const totalCOF = creatives.reduce((sum, creative) => {
      return sum + calculateCOF(creative.work_types);
    }, 0);

    const avgCOF = creatives.length > 0 ? totalCOF / creatives.length : 0;
    
    return {
      totalCOF: totalCOF,
      avgCOF: avgCOF,
      maxCOF: Math.max(...creatives.map(c => calculateCOF(c.work_types)), 0),
      minCOF: creatives.length > 0 ? Math.min(...creatives.map(c => calculateCOF(c.work_types))) : 0
    };
  };

  const getCurrentMonthYear = () => {
    const now = new Date();
    const months = [
      '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
      '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
    ];
    const month = months[now.getMonth()];
    const year = now.getFullYear();
    return `${month}, ${year}`;
  };

  useEffect(() => {
    loadCreatives();
  }, []);

  const loadCreatives = async () => {
    try {
      setLoading(true);
      setError('');
      console.log('üì° –ó–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      const data = await creativeService.getUserCreatives(user.id);
      setCreatives(data);
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.length} –∫—Ä–µ–∞—Ç–∏–≤–æ–≤`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤:', error);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  const validateGoogleDriveLinks = (links) => {
    const validLinks = links.filter(link => link.trim() !== '');
    const invalidLinks = [];

    for (const link of validLinks) {
      if (!isGoogleDriveUrl(link)) {
        invalidLinks.push(link);
      }
    }

    return { validLinks, invalidLinks };
  };

  const handleCreateCreative = async () => {
    if (!newCreative.article.trim()) {
      setError('–ê—Ä—Ç–∏–∫—É–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
      return;
    }

    const { validLinks, invalidLinks } = validateGoogleDriveLinks(newCreative.links);
    
    if (validLinks.length === 0) {
      setError('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Å—ã–ª–∫—É –Ω–∞ Google Drive');
      return;
    }

    if (invalidLinks.length > 0) {
      setError(`–ù–µ–≤–µ—Ä–Ω—ã–µ —Å—Å—ã–ª–∫–∏ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å Google Drive): ${invalidLinks.join(', ')}`);
      return;
    }

    if (newCreative.work_types.length === 0) {
      setError('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø —Ä–∞–±–æ—Ç—ã');
      return;
    }

    try {
      setCreating(true);
      setError('');
      setSuccess('');

      setAuthorizing(true);
      const authSuccess = await ensureGoogleAuth();
      setAuthorizing(false);

      if (!authSuccess) {
        setError('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —Ñ–∞–π–ª–æ–≤');
        setCreating(false);
        return;
      }

      setExtractingTitles(true);
      const { links, titles } = await processLinksAndExtractTitles(validLinks, true);
      setExtractingTitles(false);

      const extractedTitles = titles.filter(title => !title.startsWith('–í–∏–¥–µ–æ '));
      if (extractedTitles.length === 0) {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ –≤–∞—à–∏—Ö —Å—Å—ã–ª–æ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Å—Å—ã–ª–∫–∏ –≤–µ–¥—É—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã Google Drive –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        setCreating(false);
        return;
      }

      const cofRating = calculateCOF(newCreative.work_types);

      await creativeService.createCreative({
        user_id: user.id,
        editor_name: user.name,
        article: newCreative.article.trim(),
        links: links,
        link_titles: titles,
        work_types: newCreative.work_types,
        cof_rating: cofRating,
        comment: newCreative.comment.trim() || null,
        is_poland: newCreative.is_poland  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã
      });

      setNewCreative({
        article: '',
        links: [''],
        work_types: [],
        link_titles: [],
        comment: '',
        is_poland: false
      });
      setShowCreateModal(false);

      await loadCreatives();
      
      const successCount = extractedTitles.length;
      const totalCount = titles.length;
      const cof = calculateCOF(newCreative.work_types);
      const country = newCreative.is_poland ? 'PL' : 'UA';
      setSuccess(`–ö—Ä–µ–∞—Ç–∏–≤ —Å–æ–∑–¥–∞–Ω! COF: ${formatCOF(cof)} | –°—Ç—Ä–∞–Ω–∞: ${country} | –ù–∞–∑–≤–∞–Ω–∏–π –∏–∑–≤–ª–µ—á–µ–Ω–æ: ${successCount}/${totalCount}`);
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–µ–∞—Ç–∏–≤–∞: ' + error.message);
      setExtractingTitles(false);
      setAuthorizing(false);
    } finally {
      setCreating(false);
    }
  };

  const handleDeleteCreative = async (creativeId, article) => {
    if (!window.confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫—Ä–µ–∞—Ç–∏–≤ "${article}"?`)) {
      return;
    }

    try {
      await creativeService.deleteCreative(creativeId);
      await loadCreatives();
      setSuccess('–ö—Ä–µ–∞—Ç–∏–≤ —É–¥–∞–ª–µ–Ω');
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫—Ä–µ–∞—Ç–∏–≤–∞: ' + error.message);
    }
  };

  const addLinkField = () => {
    setNewCreative({
      ...newCreative,
      links: [...newCreative.links, '']
    });
  };

  const removeLinkField = (index) => {
    const newLinks = newCreative.links.filter((_, i) => i !== index);
    setNewCreative({
      ...newCreative,
      links: newLinks.length === 0 ? [''] : newLinks
    });
  };

  const updateLink = (index, value) => {
    const newLinks = [...newCreative.links];
    newLinks[index] = value;
    setNewCreative({
      ...newCreative,
      links: newLinks
    });
  };

  const handleWorkTypeChange = (workType, isChecked) => {
    let updatedWorkTypes;
    if (isChecked) {
      updatedWorkTypes = [...newCreative.work_types, workType];
    } else {
      updatedWorkTypes = newCreative.work_types.filter(type => type !== workType);
    }
    
    setNewCreative({
      ...newCreative,
      work_types: updatedWorkTypes
    });
  };

  const showComment = (creative) => {
    setSelectedComment({
      article: creative.article,
      comment: creative.comment,
      createdAt: creative.created_at,
      editorName: creative.editor_name
    });
    setShowCommentModal(true);
  };

  const toggleWorkTypes = (creativeId) => {
    const newExpanded = new Set(expandedWorkTypes);
    if (newExpanded.has(creativeId)) {
      newExpanded.delete(creativeId);
    } else {
      newExpanded.add(creativeId);
    }
    setExpandedWorkTypes(newExpanded);
  };

  const toggleDropdown = (creativeId) => {
    const newOpenDropdowns = new Set(openDropdowns);
    if (newOpenDropdowns.has(creativeId)) {
      newOpenDropdowns.delete(creativeId);
    } else {
      newOpenDropdowns.add(creativeId);
    }
    setOpenDropdowns(newOpenDropdowns);
  };

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (!event.target.closest('.dropdown-menu') && !event.target.closest('.dropdown-trigger')) {
        setOpenDropdowns(new Set());
      }
      if (!event.target.closest('.period-dropdown') && !event.target.closest('.period-trigger')) {
        setShowPeriodDropdown(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  const handlePeriodChange = (period) => {
    console.log(`üîÑ –ú–ì–ù–û–í–ï–ù–ù–ê–Ø —Å–º–µ–Ω–∞ –ø–µ—Ä–∏–æ–¥–∞ –º–µ—Ç—Ä–∏–∫: ${metricsPeriod} -> ${period}`);
    setMetricsPeriod(period);
    setShowPeriodDropdown(false);
    clearMessages();
    
    if (period === '4days') {
      console.log('‚ö° –í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º "4 –¥–Ω—è" - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î');
    }
  };

  const getPeriodButtonText = () => {
    return metricsPeriod === 'all' ? '–í—Å–µ –≤—Ä–µ–º—è' : '4 –¥–Ω—è';
  };

  const debugCreativeMetrics = async (creative) => {
    if (!creative.link_titles || creative.link_titles.length === 0) {
      console.log('‚ùå –£ –∫—Ä–µ–∞—Ç–∏–≤–∞ –Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–π –≤–∏–¥–µ–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏');
      return;
    }

    console.log(`üêõ === –û–¢–õ–ê–î–ö–ê –ú–ï–¢–†–ò–ö –î–õ–Ø –ö–†–ï–ê–¢–ò–í–ê "${creative.article}" ===`);
    console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—Ä–µ–∞—Ç–∏–≤–µ:');
    console.log('  - ID:', creative.id);
    console.log('  - –ê—Ä—Ç–∏–∫—É–ª:', creative.article);
    console.log('  - –í–∏–¥–µ–æ:', creative.link_titles);
    console.log('  - –ü–µ—Ä–∏–æ–¥:', metricsPeriod);
    
    for (let i = 0; i < creative.link_titles.length; i++) {
      const videoTitle = creative.link_titles[i];
      if (videoTitle && !videoTitle.startsWith('–í–∏–¥–µ–æ ')) {
        console.log(`üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –≤–∏–¥–µ–æ ${i + 1}: "${videoTitle}"`);
        try {
          const result = await MetricsService.getVideoMetrics(videoTitle, metricsPeriod);
          console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –¥–ª—è –≤–∏–¥–µ–æ ${i + 1}:`, result);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –¥–ª—è –≤–∏–¥–µ–æ ${i + 1}:`, error);
        }
      }
    }
    
    console.log('üêõ === –ö–û–ù–ï–¶ –û–¢–õ–ê–î–ö–ò –ú–ï–¢–†–ò–ö ===');
  };

  const formatKyivTime = (dateString) => {
    try {
      const date = new Date(dateString);
      const dateStr = date.toLocaleDateString('ru-RU', {
        timeZone: 'Europe/Kiev',
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
      });
      const timeStr = date.toLocaleTimeString('ru-RU', {
        timeZone: 'Europe/Kiev',
        hour: '2-digit',
        minute: '2-digit',
        hour12: false
      });
      return { date: dateStr, time: timeStr };
    } catch (error) {
      console.error('Error formatting date:', error);
      const fallback = new Date(dateString).toLocaleDateString('ru-RU', {
        timeZone: 'Europe/Kiev'
      });
      return { date: fallback, time: '00:00' };
    }
  };

  const getWorkTypeIcon = (workTypes) => {
    const firstType = workTypes[0] || '';
    if (firstType.toLowerCase().includes('video') || firstType.toLowerCase().includes('–º–æ–Ω—Ç–∞–∂')) {
      return <Video className="h-4 w-4" />;
    }
    if (firstType.toLowerCase().includes('—Å—Ç–∞—Ç–∏–∫–∞')) {
      return <ImageIcon className="h-4 w-4" />;
    }
    return <Eye className="h-4 w-4" />;
  };

  const getWorkTypeColor = (workTypes) => {
    const firstType = workTypes[0] || '';
    if (firstType.toLowerCase().includes('video') || firstType.toLowerCase().includes('–º–æ–Ω—Ç–∞–∂')) {
      return 'bg-blue-100 text-blue-800';
    }
    if (firstType.toLowerCase().includes('—Å—Ç–∞—Ç–∏–∫–∞')) {
      return 'bg-green-100 text-green-800';
    }
    if (firstType.toLowerCase().includes('–¥–æ–ø')) {
      return 'bg-purple-100 text-purple-800';
    }
    return 'bg-gray-100 text-gray-800';
  };

  const clearMessages = () => {
    setError('');
    setSuccess('');
  };

  const handleRefreshAll = async () => {
    console.log(`üîÑ –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–∏–æ–¥: ${metricsPeriod})`);
    await loadCreatives();
    refreshMetrics();
  };

  const cofStats = getCOFStats();

  if (loading) {
    return (
      <div className="flex items-center justify-center h-full">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto"></div>
          <p className="mt-4 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="h-full flex flex-col bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b border-gray-200 px-6 py-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <div className="w-12 h-12 rounded-full overflow-hidden bg-gray-200 flex items-center justify-center flex-shrink-0">
              {user?.avatar_url ? (
                <img
                  src={user.avatar_url}
                  alt="Avatar"
                  className="w-full h-full object-cover"
                  onError={(e) => {
                    e.target.style.display = 'none';
                    e.target.nextSibling.style.display = 'flex';
                  }}
                />
              ) : null}
              <div className={`w-full h-full flex items-center justify-center ${user?.avatar_url ? 'hidden' : ''}`}>
                <User className="h-6 w-6 text-gray-400" />
              </div>
            </div>
            <div>
              <h1 className="text-2xl font-semibold text-gray-900">–ö—Ä–µ–∞—Ç–∏–≤—ã</h1>
              <p className="text-sm text-gray-600 mt-1">
                {user?.name} ‚Ä¢ {creatives.length} –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ ‚Ä¢ COF: {formatCOF(cofStats.totalCOF)}
              </p>
            </div>
          </div>
          <div className="flex items-center space-x-3">
            <div className="relative">
              <button
                onClick={() => setShowPeriodDropdown(!showPeriodDropdown)}
                className="period-trigger inline-flex items-center px-3 py-2 text-sm font-medium rounded-md transition-colors duration-200 bg-blue-100 text-blue-700 border border-blue-300 hover:bg-blue-200"
              >
                <BarChart3 className="h-4 w-4 mr-2" />
                {getPeriodButtonText()}
                <svg className="ml-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                </svg>
              </button>
              
              {showPeriodDropdown && (
                <div className="period-dropdown absolute right-0 mt-2 w-32 bg-white border border-gray-200 rounded-md shadow-lg z-50">
                  <div className="py-1">
                    <button
                      onClick={() => handlePeriodChange('all')}
                      className={`flex items-center w-full px-3 py-2 text-sm hover:bg-gray-100 transition-colors duration-200 ${
                        metricsPeriod === 'all' ? 'bg-blue-50 text-blue-700 font-medium' : 'text-gray-700'
                      }`}
                    >
                      <Clock className="h-4 w-4 mr-2" />
                      –í—Å–µ –≤—Ä–µ–º—è
                    </button>
                    <button
                      onClick={() => handlePeriodChange('4days')}
                      className={`flex items-center w-full px-3 py-2 text-sm hover:bg-gray-100 transition-colors duration-200 ${
                        metricsPeriod === '4days' ? 'bg-blue-50 text-blue-700 font-medium' : 'text-gray-700'
                      }`}
                    >
                      <Calendar className="h-4 w-4 mr-2" />
                      4 –¥–Ω—è
                    </button>
                  </div>
                </div>
              )}
            </div>

            {metricsPeriod === '4days' && (
              <button
                onClick={() => setDebugMode(!debugMode)}
                className={`inline-flex items-center px-3 py-2 text-sm font-medium rounded-md transition-colors duration-200 ${
                  debugMode 
                    ? 'bg-yellow-100 text-yellow-700 border border-yellow-300' 
                    : 'bg-gray-100 text-gray-700 border border-gray-300 hover:bg-gray-200'
                }`}
                title="–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –º–µ—Ç—Ä–∏–∫"
              >
                <Bug className="h-4 w-4 mr-2" />
                {debugMode ? '–û—Ç–ª–∞–¥–∫–∞ –í–ö–õ' : '–û—Ç–ª–∞–¥–∫–∞'}
              </button>
            )}
            
            <button
              onClick={handleRefreshAll}
              className="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              <RefreshCw className="h-4 w-4 mr-2" />
              –û–±–Ω–æ–≤–∏—Ç—å
            </button>
            <button
              onClick={() => setShowCreateModal(true)}
              className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              <Plus className="h-4 w-4 mr-2" />
              –°–æ–∑–¥–∞—Ç—å –∫—Ä–µ–∞—Ç–∏–≤
            </button>
          </div>
        </div>
      </div>

      {/* Statistics Cards */}
      {creatives.length > 0 && (
        <div className="bg-gray-50 border-b border-gray-200 px-6 py-4">
          <div className="grid grid-cols-2 md:grid-cols-5 lg:grid-cols-9 gap-4 mb-4">
            {/* –ö—Ä–µ–∞—Ç–∏–≤–æ–≤ */}
            <div className="bg-white overflow-hidden shadow-sm rounded-lg border border-gray-200">
              <div className="p-4">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <Video className="h-6 w-6 text-blue-500" />
                  </div>
                  <div className="ml-3 w-0 flex-1">
                    <dl>
                      <dt className="text-xs font-medium text-gray-500 truncate">
                        –ö—Ä–µ–∞—Ç–∏–≤–æ–≤
                      </dt>
                      <dd className="text-lg font-semibold text-gray-900">
                        {creatives.length}
                      </dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>

            {/* –û–±—â–∏–π COF */}
            <div className="bg-white overflow-hidden shadow-sm rounded-lg border border-gray-200">
              <div className="p-4">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <div className="h-6 w-6 bg-green-500 rounded-full flex items-center justify-center">
                      <span className="text-white text-xs font-bold">COF</span>
                    </div>
                  </div>
                  <div className="ml-3 w-0 flex-1">
                    <dl>
                      <dt className="text-xs font-medium text-gray-500 truncate">
                        –û–±—â–∏–π COF
                      </dt>
                      <dd className="text-lg font-semibold text-gray-900">
                        {formatCOF(cofStats.totalCOF)}
                      </dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>

            {/* –°—Ä–µ–¥–Ω–∏–π COF */}
            <div className="bg-white overflow-hidden shadow-sm rounded-lg border border-gray-200">
              <div className="p-4">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <Target className="h-6 w-6 text-orange-500" />
                  </div>
                  <div className="ml-3 w-0 flex-1">
                    <dl>
                      <dt className="text-xs font-medium text-gray-500 truncate">
                        –°—Ä–µ–¥–Ω–∏–π COF
                      </dt>
                      <dd className="text-lg font-semibold text-gray-900">
                        {formatCOF(cofStats.avgCOF)}
                      </dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>

            {/* –° –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ */}
            <div className="bg-white overflow-hidden shadow-sm rounded-lg border border-gray-200">
              <div className="p-4">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <MessageCircle className="h-6 w-6 text-indigo-500" />
                  </div>
                  <div className="ml-3 w-0 flex-1">
                    <dl>
                      <dt className="text-xs font-medium text-gray-500 truncate">
                        –° –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
                      </dt>
                      <dd className="text-lg font-semibold text-gray-900">
                        {creatives.filter(c => c.comment && c.comment.trim()).length}
                      </dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>

            {/* –õ–∏–¥–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç—Ä–∏–∫–∏) */}
            {hasMetricsData && (
              <div className="bg-white overflow-hidden shadow-sm rounded-lg border border-gray-200">
                <div className="p-4">
                  <div className="flex items-center">
                    <div className="flex-shrink-0">
                      <Users className="h-6 w-6 text-purple-500" />
                    </div>
                    <div className="ml-3 w-0 flex-1">
                      <dl>
                        <dt className="text-xs font-medium text-gray-500 truncate">
                          –õ–∏–¥–æ–≤
                        </dt>
                        <dd className="text-lg font-semibold text-gray-900">
                          {formatStats().totalLeads}
                        </dd>
                      </dl>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* –†–∞—Å—Ö–æ–¥—ã (–µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç—Ä–∏–∫–∏) */}
            {hasMetricsData && (
              <div className="bg-white overflow-hidden shadow-sm rounded-lg border border-gray-200">
                <div className="p-4">
                  <div className="flex items-center">
                    <div className="flex-shrink-0">
                      <DollarSign className="h-6 w-6 text-green-500" />
                    </div>
                    <div className="ml-3 w-0 flex-1">
                      <dl>
                        <dt className="text-xs font-medium text-gray-500 truncate">
                          –†–∞—Å—Ö–æ–¥—ã
                        </dt>
                        <dd className="text-lg font-semibold text-gray-900">
                          {formatStats().totalCost}
                        </dd>
                      </dl>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* CTR (–µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç—Ä–∏–∫–∏) */}
            {hasMetricsData && (
              <div className="bg-white overflow-hidden shadow-sm rounded-lg border border-gray-200">
                <div className="p-4">
                  <div className="flex items-center">
                    <div className="flex-shrink-0">
                      <MousePointer className="h-6 w-6 text-pink-500" />
                    </div>
                    <div className="ml-3 w-0 flex-1">
                      <dl>
                        <dt className="text-xs font-medium text-gray-500 truncate">
                          CTR
                        </dt>
                        <dd className="text-lg font-semibold text-gray-900">
                          {formatStats().avgCTR}
                        </dd>
                      </dl>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* –°—Ä–µ–¥–Ω–µ–µ –ª–∏–¥–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç—Ä–∏–∫–∏) */}
            {hasMetricsData && (
              <div className="bg-white overflow-hidden shadow-sm rounded-lg border border-gray-200">
                <div className="p-4">
                  <div className="flex items-center">
                    <div className="flex-shrink-0">
                      <TrendingUp className="h-6 w-6 text-blue-600" />
                    </div>
                    <div className="ml-3 w-0 flex-1">
                      <dl>
                        <dt className="text-xs font-medium text-gray-500 truncate">
                          –°—Ä. –ª–∏–¥–æ–≤
                        </dt>
                        <dd className="text-lg font-semibold text-gray-900">
                          {creatives.length > 0 ? Math.round(aggregatedMetricsStats.totalLeads / creatives.length) : 0}
                        </dd>
                      </dl>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* –°—Ä–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã (–µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç—Ä–∏–∫–∏) */}
            {hasMetricsData && (
              <div className="bg-white overflow-hidden shadow-sm rounded-lg border border-gray-200">
                <div className="p-4">
                  <div className="flex items-center">
                    <div className="flex-shrink-0">
                      <BarChart3 className="h-6 w-6 text-red-500" />
                    </div>
                    <div className="ml-3 w-0 flex-1">
                      <dl>
                        <dt className="text-xs font-medium text-gray-500 truncate">
                          –°—Ä. —Ä–∞—Å—Ö–æ–¥—ã
                        </dt>
                        <dd className="text-lg font-semibold text-gray-900">
                          ${creatives.length > 0 ? (aggregatedMetricsStats.totalCost / creatives.length).toFixed(2) : '0.00'}
                        </dd>
                      </dl>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* –°—Ç–∞—Ç—É—Å –º–µ—Ç—Ä–∏–∫ */}
          <div className="flex items-center justify-between text-sm">
            <div className="flex items-center space-x-2">
              <Activity className="h-4 w-4 text-blue-500" />
              <span className="text-blue-600">
                {metricsLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç—Ä–∏–∫...' : 
                 metricsStats ? `–ú–µ—Ç—Ä–∏–∫–∏ (${getPeriodButtonText()}): ${metricsStats.found}/${metricsStats.total}` : 
                 `–ú–µ—Ç—Ä–∏–∫–∏ (${getPeriodButtonText()}) –≤–∫–ª—é—á–µ–Ω—ã`}
              </span>
              {metricsPeriod === '4days' && metricsStats?.found === 0 && metricsStats?.total > 0 && (
                <span className="text-red-600 text-xs font-medium">
                  (–í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 –¥–Ω—è)
                </span>
              )}
            </div>
          </div>
        </div>
      )}

      {/* Messages */}
      {success && (
        <div className="mx-6 mt-4 bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-md text-sm flex items-center">
          <CheckCircle className="h-4 w-4 mr-2 flex-shrink-0" />
          {success}
        </div>
      )}

      {error && (
        <div className="mx-6 mt-4 bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-md text-sm flex items-center">
          <AlertCircle className="h-4 w-4 mr-2 flex-shrink-0" />
          {error}
        </div>
      )}

      {metricsError && (
        <div className="mx-6 mt-4 bg-yellow-50 border border-yellow-200 text-yellow-700 px-4 py-3 rounded-md text-sm flex items-center">
          <AlertCircle className="h-4 w-4 mr-2 flex-shrink-0" />
          –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫: {metricsError}
          {metricsPeriod === '4days' && (
            <span className="ml-2 text-xs">
              (–ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ 4 –¥–Ω—è–º)
            </span>
          )}
        </div>
      )}

      {debugMode && metricsPeriod === '4days' && (
        <div className="mx-6 mt-4 bg-yellow-50 border border-yellow-200 text-yellow-700 px-4 py-3 rounded-md text-sm">
          <div className="flex items-center mb-2">
            <Bug className="h-4 w-4 mr-2" />
            <span className="font-medium">–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –∞–∫—Ç–∏–≤–µ–Ω</span>
          </div>
          <p className="text-xs">
            –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12) –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ç—Ä–∏–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥ "4 –¥–Ω—è".
            –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "üêõ" —Ä—è–¥–æ–º —Å –∫—Ä–µ–∞—Ç–∏–≤–æ–º –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.
          </p>
        </div>
      )}

      {/* Content */}
      <div className="flex-1 overflow-auto p-6">
        {creatives.length === 0 ? (
          <div className="text-center py-12">
            <Video className="h-16 w-16 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">
              –ù–µ—Ç –∫—Ä–µ–∞—Ç–∏–≤–æ–≤
            </h3>
            <p className="text-gray-600 mb-4">
              –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∫—Ä–µ–∞—Ç–∏–≤ —Å Google Drive —Å—Å—ã–ª–∫–∞–º–∏
            </p>
            <button
              onClick={() => setShowCreateModal(true)}
              className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700"
            >
              <Plus className="h-4 w-4 mr-2" />
              –°–æ–∑–¥–∞—Ç—å –∫—Ä–µ–∞—Ç–∏–≤
            </button>
          </div>
        ) : (
          <div className="bg-white shadow-sm rounded-lg border border-gray-200">
            <div className="px-4 py-5 sm:p-6">
              <h3 className="text-lg leading-6 font-medium text-gray-900 mb-4 text-center">
                {getCurrentMonthYear()}
              </h3>
              
              <div className="overflow-hidden">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        –î–∞—Ç–∞
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        –ê—Ä—Ç–∏–∫—É–ª
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        –í–∏–¥–µ–æ
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        –¢–∏–ø—ã —Ä–∞–±–æ—Ç
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        COF
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        –ó–æ–Ω—ã
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        –¢–µ–∫—É—â–∞—è –∑–æ–Ω–∞
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        –õ–∏–¥—ã
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        CPL
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        CTR
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Trello
                      </th>
                      <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider w-16">
                        
                      </th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {creatives
                      .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
                      .map((creative) => {
                        const cof = typeof creative.cof_rating === 'number' 
                          ? creative.cof_rating 
                          : calculateCOF(creative.work_types || []);
                        
                        const firstVideoMetrics = getVideoMetrics(creative.id, 0);
                        const isWorkTypesExpanded = expandedWorkTypes.has(creative.id);
                        const isDropdownOpen = openDropdowns.has(creative.id);
                        const formattedDateTime = formatKyivTime(creative.created_at);
                        
                        return (
                          <tr key={creative.id} className="hover:bg-gray-50">
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                              <div className="text-center">
                                <div className="font-medium">{formattedDateTime.date}</div>
                                <div className="text-xs text-gray-500">{formattedDateTime.time}</div>
                              </div>
                            </td>
                            
                            <td className="px-6 py-4 whitespace-nowrap">
                              <div className="flex items-center space-x-2">
                                {/* –§–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã */}
                                {creative.is_poland ? <PolandFlag /> : <UkraineFlag />}
                                
                                <div className="text-sm font-medium text-gray-900">
                                  {creative.article}
                                  {debugMode && (
                                    <button
                                      onClick={() => debugCreativeMetrics(creative)}
                                      className="ml-2 text-yellow-600 hover:text-yellow-800"
                                      title="–û—Ç–ª–∞–¥–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫—Ä–µ–∞—Ç–∏–≤–∞"
                                    >
                                      üêõ
                                    </button>
                                  )}
                                </div>
                              </div>
                            </td>
                            
                            <td className="px-6 py-4 text-sm text-gray-900">
                              <div className="space-y-1">
                                {creative.link_titles && creative.link_titles.length > 0 ? (
                                  creative.link_titles.map((title, index) => (
                                    <div key={index} className="flex items-center justify-between">
                                      <span className="block">{title}</span>
                                      <a
                                        href={creative.links[index]}
                                        target="_blank"
                                        rel="noopener noreferrer"
                                        className="ml-2 text-blue-600 hover:text-blue-800 flex-shrink-0"
                                        title="–û—Ç–∫—Ä—ã—Ç—å –≤ Google Drive"
                                      >
                                        <ExternalLink className="h-3 w-3" />
                                      </a>
                                    </div>
                                  ))
                                ) : (
                                  <span className="text-gray-400">–ù–µ—Ç –≤–∏–¥–µ–æ</span>
                                )}
                              </div>
                            </td>
                            
                            <td className="px-6 py-4 text-sm text-gray-900">
                              {creative.work_types && creative.work_types.length > 0 ? (
                                <div>
                                  <button
                                    onClick={() => toggleWorkTypes(creative.id)}
                                    className="flex items-center text-blue-600 hover:text-blue-800 focus:outline-none"
                                  >
                                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getWorkTypeColor(creative.work_types)}`}>
                                      {getWorkTypeIcon(creative.work_types)}
                                      <span className="ml-1">
                                        {isWorkTypesExpanded 
                                          ? `–°–∫—Ä—ã—Ç—å (${creative.work_types.length})` 
                                          : `${creative.work_types[0]} ${creative.work_types.length > 1 ? `+${creative.work_types.length - 1}` : ''}`
                                        }
                                      </span>
                                    </span>
                                  </button>
                                  {isWorkTypesExpanded && (
                                    <div className="mt-2 space-y-1">
                                      {creative.work_types.map((workType, index) => (
                                        <div key={index} className="text-xs text-gray-700 bg-gray-50 px-2 py-1 rounded">
                                          {workType}
                                        </div>
                                      ))}
                                    </div>
                                  )}
                                </div>
                              ) : (
                                <span className="text-gray-400">‚Äî</span>
                              )}
                            </td>
                            
                            <td className="px-6 py-4 whitespace-nowrap">
                              {creative.comment ? (
                                <button
                                  onClick={() => showComment(creative)}
                                  className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 hover:bg-blue-200 transition-colors duration-200"
                                  title="–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
                                >
                                  <MessageCircle className="h-3 w-3 mr-1" />
                                  –ï—Å—Ç—å
                                </button>
                              ) : (
                                <span className="text-gray-400 text-xs">‚Äî</span>
                              )}
                            </td>
                            
                            <td className="px-6 py-4 whitespace-nowrap">
                              <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border ${getCOFBadgeColor(cof)}`}>
                                <span className="text-xs font-bold mr-1">COF</span>
                                {formatCOF(cof)}
                              </span>
                            </td>
                            
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-400">
                              ‚Äî
                            </td>
                            
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-400">
                              ‚Äî
                            </td>
                            
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                              {firstVideoMetrics?.found ? (
                                <span className="text-green-700 font-medium">
                                  {firstVideoMetrics.data.formatted.leads}
                                </span>
                              ) : (
                                <span className="text-gray-400">
                                  ‚Äî
                                  {metricsPeriod === '4days' && debugMode && (
                                    <span className="text-xs text-red-500 block">
                                      (–Ω–µ—Ç –∑–∞ 4 –¥–Ω—è)
                                    </span>
                                  )}
                                </span>
                              )}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                              {firstVideoMetrics?.found ? (
                                <span className="text-green-700 font-medium">
                                  {firstVideoMetrics.data.formatted.cpl}
                                </span>
                              ) : (
                                <span className="text-gray-400">‚Äî</span>
                              )}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                              {firstVideoMetrics?.found ? (
                                <span className="text-blue-700 font-medium">
                                  {firstVideoMetrics.data.formatted.ctr}
                                </span>
                              ) : (
                                <span className="text-gray-400">‚Äî</span>
                              )}
                            </td>
                            
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-400">
                              ‚Äî
                            </td>
                            
                            <td className="px-6 py-4 whitespace-nowrap text-center">
                              <div className="relative">
                                <button
                                  onClick={() => toggleDropdown(creative.id)}
                                  className="dropdown-trigger text-gray-400 hover:text-gray-600 focus:outline-none p-1 rounded-full hover:bg-gray-100 transition-colors duration-200"
                                >
                                  <MoreHorizontal className="h-4 w-4" />
                                </button>
                                
                                {isDropdownOpen && (
                                  <div className="dropdown-menu absolute right-0 mt-2 w-36 bg-white border border-gray-200 rounded-md shadow-lg z-50">
                                    <div className="py-1">
                                      <button
                                        onClick={() => {
                                          console.log('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–µ–∞—Ç–∏–≤:', creative.id);
                                          toggleDropdown(creative.id);
                                        }}
                                        className="flex items-center w-full px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors duration-200"
                                      >
                                        <Edit className="h-4 w-4 mr-2" />
                                        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                                      </button>
                                      {debugMode && (
                                        <button
                                          onClick={() => {
                                            debugCreativeMetrics(creative);
                                            toggleDropdown(creative.id);
                                          }}
                                          className="flex items-center w-full px-3 py-2 text-sm text-yellow-700 hover:bg-yellow-50 transition-colors duration-200"
                                        >
                                          <Bug className="h-4 w-4 mr-2" />
                                          –û—Ç–ª–∞–¥–∏—Ç—å
                                        </button>
                                      )}
                                      <button
                                        onClick={() => {
                                          handleDeleteCreative(creative.id, creative.article);
                                          toggleDropdown(creative.id);
                                        }}
                                        className="flex items-center w-full px-3 py-2 text-sm text-red-700 hover:bg-red-50 transition-colors duration-200"
                                      >
                                        <Trash2 className="h-4 w-4 mr-2" />
                                        –£–¥–∞–ª–∏—Ç—å
                                      </button>
                                    </div>
                                  </div>
                                )}
                              </div>
                            </td>
                          </tr>
                        );
                      })}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Create Modal */}
      {showCreateModal && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
          <div className="relative top-10 mx-auto p-5 border w-full max-w-lg shadow-lg rounded-md bg-white max-h-screen overflow-y-auto">
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-lg font-medium text-gray-900">
                –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫—Ä–µ–∞—Ç–∏–≤
              </h3>
              <button
                onClick={() => {
                  setShowCreateModal(false);
                  setNewCreative({
                    article: '',
                    links: [''],
                    work_types: [],
                    link_titles: [],
                    comment: '',
                    is_poland: false
                  });
                  setExtractingTitles(false);
                  clearMessages();
                }}
                className="text-gray-400 hover:text-gray-600"
              >
                <X className="h-6 w-6" />
              </button>
            </div>

            <div className="space-y-4">
              {/* –ê—Ä—Ç–∏–∫—É–ª –∏ —Ñ–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –ê—Ä—Ç–∏–∫—É–ª *
                </label>
                <div className="flex items-center space-x-3">
                  {/* –ü–æ–ª–µ –∞—Ä—Ç–∏–∫—É–ª–∞ (—É–º–µ–Ω—å—à–µ–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞) */}
                  <div className="flex-1">
                    <input
                      type="text"
                      value={newCreative.article}
                      onChange={(e) => {
                        setNewCreative({ ...newCreative, article: e.target.value });
                        clearMessages();
                      }}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª"
                    />
                  </div>
                  
                  {/* –ö–Ω–æ–ø–∫–∞-—á–µ–∫–±–æ–∫—Å Poland */}
                  <button
                    type="button"
                    onClick={() => {
                      setNewCreative({ ...newCreative, is_poland: !newCreative.is_poland });
                      clearMessages();
                    }}
                    className={`flex items-center px-3 py-2 rounded-md text-sm font-medium transition-colors duration-200 border ${
                      newCreative.is_poland
                        ? 'bg-red-100 text-red-800 border-red-300 hover:bg-red-200'
                        : 'bg-gray-100 text-gray-700 border-gray-300 hover:bg-gray-200'
                    }`}
                    title={newCreative.is_poland ? '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ –£–∫—Ä–∞–∏–Ω—É' : '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ –ü–æ–ª—å—à—É'}
                  >
                    {newCreative.is_poland ? <PolandFlag /> : <UkraineFlag />}
                    <span className="ml-2">
                      {newCreative.is_poland ? 'Poland' : 'Ukraine'}
                    </span>
                  </button>
                </div>
              </div>

              <div>
                <div className="flex items-center justify-between mb-2">
                  <label className="block text-sm font-medium text-gray-700">
                    Google Drive —Å—Å—ã–ª–∫–∏ * (–º–µ—Ç—Ä–∏–∫–∏ –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–π)
                  </label>
                  <button
                    onClick={addLinkField}
                    className="inline-flex items-center px-2 py-1 border border-gray-300 text-xs font-medium rounded text-gray-700 bg-white hover:bg-gray-50"
                  >
                    <Plus className="h-3 w-3 mr-1" />
                    –î–æ–±–∞–≤–∏—Ç—å
                  </button>
                </div>
                <div className="space-y-2 max-h-32 overflow-y-auto">
                  {newCreative.links.map((link, index) => (
                    <div key={index} className="flex items-center space-x-2">
                      <input
                        type="url"
                        value={link}
                        onChange={(e) => updateLink(index, e.target.value)}
                        className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm"
                        placeholder="https://drive.google.com/file/d/..."
                      />
                      {newCreative.links.length > 1 && (
                        <button
                          onClick={() => removeLinkField(index)}
                          className="text-gray-400 hover:text-red-600"
                        >
                          <X className="h-4 w-4" />
                        </button>
                      )}
                    </div>
                  ))}
                </div>
                <p className="mt-1 text-xs text-yellow-600 flex items-center">
                  <AlertCircle className="h-3 w-3 mr-1" />
                  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ –Ω–∞ Google Drive —Ñ–∞–π–ª—ã
                </p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                </label>
                <textarea
                  value={newCreative.comment}
                  onChange={(e) => {
                    setNewCreative({ ...newCreative, comment: e.target.value });
                    clearMessages();
                  }}
                  rows={3}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∫—Ä–µ–∞—Ç–∏–≤—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                />
              </div>

              <div>
                <div className="flex items-center justify-between mb-2">
                  <label className="block text-sm font-medium text-gray-700">
                    –¢–∏–ø—ã —Ä–∞–±–æ—Ç * ({newCreative.work_types.length} –≤—ã–±—Ä–∞–Ω–æ)
                  </label>
                  {newCreative.work_types.length > 0 && (
                    <div className="flex items-center space-x-1">
                      <span className="text-xs text-gray-500">COF:</span>
                      <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium border ${getCOFBadgeColor(calculateCOF(newCreative.work_types))}`}>
                        {formatCOF(calculateCOF(newCreative.work_types))}
                      </span>
                    </div>
                  )}
                </div>
                <div className="max-h-48 overflow-y-auto border border-gray-300 rounded-md p-3 bg-gray-50">
                  <div className="grid grid-cols-1 gap-2">
                    {workTypes.map((type) => (
                      <label key={type} className="flex items-center justify-between p-2 hover:bg-white rounded cursor-pointer">
                        <div className="flex items-center space-x-2">
                          <input
                            type="checkbox"
                            checked={newCreative.work_types.includes(type)}
                            onChange={(e) => handleWorkTypeChange(type, e.target.checked)}
                            className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                          />
                          <span className="text-sm text-gray-700 select-none">{type}</span>
                        </div>
                        <span className="text-xs text-gray-500 font-medium">
                          {formatCOF(workTypeValues[type] || 0)}
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
                {newCreative.work_types.length > 0 && (
                  <div className="mt-2 flex flex-wrap gap-1">
                    {newCreative.work_types.map((type, index) => (
                      <span key={index} className="inline-flex items-center px-2 py-1 rounded text-xs bg-blue-100 text-blue-800">
                        {type} ({formatCOF(workTypeValues[type] || 0)})
                        <button
                          type="button"
                          onClick={() => handleWorkTypeChange(type, false)}
                          className="ml-1 text-blue-600 hover:text-blue-800"
                        >
                          <X className="h-3 w-3" />
                        </button>
                      </span>
                    ))}
                  </div>
                )}
              </div>

              {error && (
                <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-md text-sm flex items-center">
                  <AlertCircle className="h-4 w-4 mr-2 flex-shrink-0" />
                  {error}
                </div>
              )}
            </div>

            <div className="flex justify-end space-x-3 mt-6 pt-4 border-t border-gray-200">
              <button
                onClick={() => {
                  setShowCreateModal(false);
                  clearMessages();
                }}
                disabled={creating}
                className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50"
              >
                –û—Ç–º–µ–Ω–∏—Ç—å
              </button>
              <button
                onClick={handleCreateCreative}
                disabled={creating}
                className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50"
              >
                {creating ? (
                  <div className="flex items-center">
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    {authorizing ? '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google...' : 
                     extractingTitles ? '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π...' : 
                     '–°–æ–∑–¥–∞–Ω–∏–µ...'}
                  </div>
                ) : (
                  <div className="flex items-center">
                    <span>–°–æ–∑–¥–∞—Ç—å –∫—Ä–µ–∞—Ç–∏–≤</span>
                    {newCreative.work_types.length > 0 && (
                      <span className="ml-2 text-xs opacity-75">
                        (COF: {formatCOF(calculateCOF(newCreative.work_types))})
                      </span>
                    )}
                    {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä—è–¥–æ–º —Å –∫–Ω–æ–ø–∫–æ–π */}
                    <div className="ml-2">
                      {newCreative.is_poland ? <PolandFlag /> : <UkraineFlag />}
                    </div>
                  </div>
                )}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Comment Modal */}
      {showCommentModal && selectedComment && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
          <div className="relative top-20 mx-auto p-5 border w-full max-w-md shadow-lg rounded-md bg-white">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-medium text-gray-900 flex items-center">
                <MessageCircle className="h-5 w-5 mr-2 text-blue-600" />
                –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
              </h3>
              <button
                onClick={() => setShowCommentModal(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                <X className="h-6 w-6" />
              </button>
            </div>

            <div className="space-y-4">
              <div>
                <label className="text-sm font-medium text-gray-700">–ê—Ä—Ç–∏–∫—É–ª:</label>
                <p className="text-gray-900 font-medium">{selectedComment.article}</p>
              </div>

              <div>
                <label className="text-sm font-medium text-gray-700">–ê–≤—Ç–æ—Ä:</label>
                <p className="text-gray-900">{selectedComment.editorName}</p>
              </div>

              <div>
                <label className="text-sm font-medium text-gray-700">–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</label>
                <p className="text-gray-600 text-sm">{formatKyivTime(selectedComment.createdAt).date} {formatKyivTime(selectedComment.createdAt).time}</p>
              </div>

              <div>
                <label className="text-sm font-medium text-gray-700">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</label>
                <div className="mt-1 p-3 bg-gray-50 border border-gray-200 rounded-md">
                  <p className="text-gray-900 whitespace-pre-wrap">{selectedComment.comment}</p>
                </div>
              </div>
            </div>

            <div className="flex justify-end mt-6">
              <button
                onClick={() => setShowCommentModal(false)}
                className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default CreativePanel;
