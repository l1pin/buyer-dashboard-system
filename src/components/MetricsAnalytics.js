// src/components/MetricsAnalytics.js - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø –° –¶–í–ï–¢–ù–´–ú–ò –ó–û–ù–ê–ú–ò
import React, { useState, useEffect } from 'react';
import { metricsAnalyticsService } from '../supabaseClient';
import Papa from 'papaparse';
import { 
  Upload,
  Download,
  RefreshCw,
  AlertCircle,
  CheckCircle,
  FileText,
  Calendar,
  TrendingUp,
  TrendingDown,
  Target,
  DollarSign,
  Activity,
  BarChart3,
  Info,
  X,
  Eye,
  Database
} from 'lucide-react';

function MetricsAnalytics({ user }) {
  const [metrics, setMetrics] = useState([]);
  const [loading, setLoading] = useState(true);
  const [uploading, setUploading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [lastUpdated, setLastUpdated] = useState(null);
  const [showColumnInfo, setShowColumnInfo] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [sortField, setSortField] = useState('id');
  const [sortDirection, setSortDirection] = useState('asc');
  const [loadingStats, setLoadingStats] = useState({
    actualCount: 0,
    totalRecords: 0,
    databaseCount: 0
  });

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ü–≤–µ—Ç–Ω—ã–º–∏ –∑–æ–Ω–∞–º–∏
  const columns = [
    { key: 'id', label: '‚Ññ', type: 'number', width: '60px' },
    { key: 'article', label: '–ê—Ä—Ç–∏–∫—É–ª', type: 'text', width: '120px' },
    { key: 'offer', label: '–û—Ñ—Ñ–µ—Ä', type: 'text', width: '150px' },
    { key: 'total_batches', label: '–í—Å–µ–≥–æ –ø–∞—Ä—Ç–∏–π', type: 'number', width: '100px' },
    { key: 'first_arrival_date', label: '–ü–µ—Ä–≤—ã–π –ø—Ä–∏—Ö–æ–¥', type: 'date', width: '120px' },
    { key: 'next_calculated_arrival', label: '–†–∞—Å—á–µ—Ç–Ω—ã–π –ø—Ä–∏—Ö–æ–¥', type: 'date', width: '130px' },
    { key: 'special_season_start', label: '–°–ø–µ—Ü —Å–µ–∑–æ–Ω –Ω–∞—á–∞–ª–æ', type: 'text', width: '130px' },
    { key: 'special_season_end', label: '–°–ø–µ—Ü —Å–µ–∑–æ–Ω –∫–æ–Ω–µ—Ü', type: 'text', width: '130px' },
    { key: 'offer_price', label: '–¶–µ–Ω–∞ –æ—Ñ—Ñ–µ—Ä–∞', type: 'currency_uah_plain', width: '110px' },
    { key: 'red_zone_price', label: '–ö—Ä–∞—Å–Ω–∞—è –∑–æ–Ω–∞', type: 'red_zone_currency', width: '110px', zoneType: 'red' },
    { key: 'pink_zone_price', label: '–†–æ–∑–æ–≤–∞—è –∑–æ–Ω–∞', type: 'pink_zone_currency', width: '110px', zoneType: 'pink' },
    { key: 'gold_zone_price', label: '–ó–æ–ª–æ—Ç–∞—è –∑–æ–Ω–∞', type: 'gold_zone_currency', width: '110px', zoneType: 'gold' },
    { key: 'green_zone_price', label: '–ó–µ–ª–µ–Ω–∞—è –∑–æ–Ω–∞', type: 'green_zone_currency', width: '110px', zoneType: 'green' },
    { key: 'offer_zone', label: '–ó–æ–Ω–∞ –æ—Ñ—Ñ–µ—Ä–∞', type: 'zone', width: '120px' },
    { key: 'actual_lead', label: '–§–∞–∫—Ç –ª–∏–¥', type: 'zone_styled_currency', width: '100px' },
    { key: 'actual_roi_percent', label: '–§–∞–∫—Ç ROI %', type: 'zone_styled_percentage', width: '100px' },
    { key: 'depth_selection', label: '–ì–ª—É–±–∏–Ω–∞', type: 'depth_percentage', width: '90px' },
    { key: 'high_stock_high_mcpl', label: '–ë–æ–ª—å—à–æ–π –æ—Å—Ç–∞—Ç–æ–∫', type: 'text', width: '120px' },
    { key: 'trend_10_days', label: '–¢—Ä–µ–Ω–¥ 10 –¥–Ω–µ–π', type: 'text', width: '120px' },
    { key: 'trend_3_days', label: '–¢—Ä–µ–Ω–¥ 3 –¥–Ω—è', type: 'text', width: '120px' },
    { key: 'refusal_sales_percent', label: '% –æ—Ç–∫–∞–∑/–ø—Ä–æ–¥–∞–∂–∏', type: 'percentage', width: '120px' },
    { key: 'k_lead', label: '–ö –ª–∏–¥', type: 'number', width: '80px' },
    { key: 'no_pickup_percent', label: '% –Ω–µ–≤—ã–∫—É–ø–∞', type: 'percentage_black', width: '100px' },
    { key: 'for_withdrawal', label: '–ù–∞ –≤—ã–≤–æ–¥', type: 'text', width: '100px' },
    { key: 'currently_unprofitable', label: '–£–±—ã—Ç–æ—á–Ω—ã–µ', type: 'text', width: '100px' }
  ];

  useEffect(() => {
    loadMetrics();
  }, []);

  const loadMetrics = async () => {
    try {
      setLoading(true);
      setError('');
      
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–µ—Ç—Ä–∏–∫...');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü
      const data = await metricsAnalyticsService.getAllMetricsLarge();
      setMetrics(data.metrics || []);
      setLastUpdated(data.lastUpdated);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
      setLoadingStats({
        actualCount: data.actualCount,
        totalRecords: data.totalRecords,
        databaseCount: data.databaseCount || data.actualCount
      });
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å—è—Ö
      if (data.actualCount !== data.totalRecords && data.totalRecords > 0) {
        setSuccess(`‚ö†Ô∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.actualCount.toLocaleString('ru-RU')} –∑–∞–ø–∏—Å–µ–π –∏–∑ ${data.totalRecords.toLocaleString('ru-RU')} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
      } else if (data.actualCount > 0) {
        setSuccess(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${data.actualCount.toLocaleString('ru-RU')} –∑–∞–ø–∏—Å–µ–π –º–µ—Ç—Ä–∏–∫`);
      }
      
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫:', {
        –∑–∞–≥—Ä—É–∂–µ–Ω–æ: data.actualCount,
        –≤_–º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: data.totalRecords,
        –ø–æ—Å–ª–µ–¥–Ω–µ–µ_–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: data.lastUpdated
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫:', error);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫: ' + error.message);
    } finally {
      setLoading(false);
      // –û—á–∏—â–∞–µ–º success —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      setTimeout(() => setSuccess(''), 5000);
    }
  };

  const handleFileUpload = async (files) => {
    if (!files || files.length === 0) return;

    const csvFile = Array.from(files).find(file => 
      file.name.endsWith('.csv') || file.type === 'text/csv'
    );

    if (!csvFile) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª');
      return;
    }

    try {
      setUploading(true);
      setError('');
      setSuccess('');

      console.log(`üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${csvFile.name} (${(csvFile.size / 1024 / 1024).toFixed(2)} MB)`);

      // –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
      const csvContent = await readFileContent(csvFile);
      
      // –ü–∞—Ä—Å–∏–º CSV
      const parsedData = Papa.parse(csvContent, {
        header: false,
        skipEmptyLines: true,
        delimiter: ';'
      });

      if (!parsedData.data || parsedData.data.length < 2) {
        throw new Error('CSV —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ');
      }

      console.log(`üìã –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ CSV: ${parsedData.data.length}`);

      // –ò—â–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–≥–¥–µ –ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —á–∏—Å–ª–æ)
      let dataStartIndex = -1;
      for (let i = 0; i < parsedData.data.length; i++) {
        const firstCell = parsedData.data[i][0];
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞ —á–∏—Å–ª–æ (–∞ –Ω–µ "‚Äî", "–ê—Ä—Ç–∏–∫—É–ª" –∏ —Ç.–¥.)
        if (firstCell && !isNaN(parseInt(firstCell)) && parseInt(firstCell) > 0) {
          dataStartIndex = i;
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏: —Å—Ç—Ä–æ–∫–∞ ${i + 1}, –∑–Ω–∞—á–µ–Ω–∏–µ: "${firstCell}"`);
          break;
        } else {
          console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É ${i + 1}: "${firstCell}" (–Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–æ–º–µ—Ä–æ–º)`);
        }
      }

      if (dataStartIndex === -1) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ CSV —Ñ–∞–π–ª–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–º–µ—Ä–∞ –∑–∞–ø–∏—Å–µ–π.');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ —Å –¥–∞–Ω–Ω—ã–º–∏
      const dataRow = parsedData.data[dataStartIndex];
      if (dataRow.length < 25) {
        throw new Error(`CSV —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 25 –∫–æ–ª–æ–Ω–æ–∫, –Ω–∞–π–¥–µ–Ω–æ: ${dataRow.length} –≤ —Å—Ç—Ä–æ–∫–µ —Å –¥–∞–Ω–Ω—ã–º–∏`);
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—ä–µ–∫—Ç—ã, –Ω–∞—á–∏–Ω–∞—è —Å –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
      const dataRows = parsedData.data.slice(dataStartIndex);
      console.log(`üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${dataRows.length} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ–ø—É—â–µ–Ω–æ ${dataStartIndex} —Å—Ç—Ä–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)`);

      const processedMetrics = dataRows.map((row, index) => {
        try {
          return processCSVRow(row);
        } catch (error) {
          console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ ${dataStartIndex + index + 1}:`, error.message);
          return null;
        }
      }).filter(row => row !== null); // –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –æ—à–∏–±–∫–∞–º–∏

      console.log(`üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –∫ –∑–∞–≥—Ä—É–∑–∫–µ: ${processedMetrics.length.toLocaleString('ru-RU')} –∑–∞–ø–∏—Å–µ–π`);

      if (processedMetrics.length === 0) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const uploadResult = await metricsAnalyticsService.uploadMetrics(processedMetrics);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      await loadMetrics();
      
      if (uploadResult.count === uploadResult.total) {
        setSuccess(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${uploadResult.count.toLocaleString('ru-RU')} –∑–∞–ø–∏—Å–µ–π –º–µ—Ç—Ä–∏–∫`);
      } else {
        setSuccess(`‚ö†Ô∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${uploadResult.count.toLocaleString('ru-RU')} –∏–∑ ${uploadResult.total.toLocaleString('ru-RU')} –∑–∞–ø–∏—Å–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.`);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV:', error);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV: ' + error.message);
    } finally {
      setUploading(false);
    }
  };

  const processCSVRow = (row) => {
    const parseDate = (dateStr) => {
      if (!dateStr || dateStr.trim() === '' || dateStr === '‚Äî') return null;
      
      // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY
      const parts = dateStr.trim().split('.');
      if (parts.length === 3) {
        const day = parseInt(parts[0]);
        const month = parseInt(parts[1]) - 1; // –ú–µ—Å—è—Ü—ã –≤ JS –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
        const year = parseInt(parts[2]);
        if (!isNaN(day) && !isNaN(month) && !isNaN(year) && year > 1900) {
          const date = new Date(year, month, day);
          return date.toISOString().split('T')[0]; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        }
      }
      return null;
    };

    const parseNumber = (str) => {
      if (!str || str.trim() === '' || str === '‚Äî' || str.toLowerCase() === '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö') return null;
      const num = parseFloat(str.replace(',', '.').replace(/[^\d.-]/g, ''));
      return isNaN(num) ? null : num;
    };

    const cleanText = (str) => {
      if (!str || str === '‚Äî') return '';
      return String(str).trim();
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–ª–æ–Ω–æ–∫
    if (!row || row.length < 25) {
      throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ: ${row?.length || 0}, –æ–∂–∏–¥–∞–µ—Ç—Å—è 25`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å–ª–æ (ID)
    const id = parseInt(row[0]);
    if (isNaN(id) || id <= 0) {
      throw new Error(`–ü–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏, –ø–æ–ª—É—á–µ–Ω–æ: "${row[0]}"`);
    }

    return {
      id: id,
      article: cleanText(row[1]),
      offer: cleanText(row[2]),
      total_batches: parseInt(row[3]) || null,
      first_arrival_date: parseDate(row[4]),
      next_calculated_arrival: parseDate(row[5]),
      special_season_start: cleanText(row[6]),
      special_season_end: cleanText(row[7]),
      offer_price: parseNumber(row[8]),
      red_zone_price: parseNumber(row[9]),
      pink_zone_price: parseNumber(row[10]),
      gold_zone_price: parseNumber(row[11]),
      green_zone_price: parseNumber(row[12]),
      offer_zone: cleanText(row[13]),
      actual_lead: row[14] === '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö' || row[14] === '‚Äî' ? '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö' : parseNumber(row[14]),
      actual_roi_percent: parseNumber(row[15]),
      depth_selection: parseNumber(row[16]),
      high_stock_high_mcpl: cleanText(row[17]),
      trend_10_days: cleanText(row[18]),
      trend_3_days: cleanText(row[19]),
      refusal_sales_percent: parseNumber(row[20]),
      k_lead: parseNumber(row[21]),
      no_pickup_percent: parseNumber(row[22]),
      for_withdrawal: cleanText(row[23]),
      currently_unprofitable: cleanText(row[24])
    };
  };

  const readFileContent = (file) => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = (e) => resolve(e.target.result);
      reader.onerror = () => reject(new Error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞'));
      reader.readAsText(file, 'UTF-8');
    });
  };

  const handleExportCSV = () => {
    if (filteredMetrics.length === 0) {
      setError('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º CSV –¥–∞–Ω–Ω—ã–µ
    const headers = columns.map(col => col.label);
    const csvData = [
      headers,
      ...filteredMetrics.map(metric => columns.map(col => {
        const value = metric[col.key];
        if (value === null || value === undefined) return '';
        if (col.type === 'date' && value) {
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –æ–±—Ä–∞—Ç–Ω–æ –≤ DD.MM.YYYY —Ñ–æ—Ä–º–∞—Ç
          const date = new Date(value);
          return date.toLocaleDateString('ru-RU');
        }
        return String(value);
      }))
    ];

    const csv = Papa.unparse(csvData, { delimiter: ';' });
    
    // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `metrics_analytics_${new Date().toISOString().split('T')[0]}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ –∑–æ–Ω
  const getZoneColors = (zoneName) => {
    if (!zoneName) return null;
    const name = zoneName.toLowerCase();
    if (name.includes('sos')) return { bg: 'bg-black', text: 'text-yellow-400', border: 'border-black' };
    if (name.includes('–∫—Ä–∞—Å–Ω')) return { bg: 'bg-red-100', text: 'text-red-800', border: 'border-red-200' };
    if (name.includes('—Ä–æ–∑–æ–≤')) return { bg: 'bg-pink-100', text: 'text-pink-800', border: 'border-pink-200' };
    if (name.includes('–∑–æ–ª–æ—Ç')) return { bg: 'bg-yellow-100', text: 'text-yellow-800', border: 'border-yellow-200' };
    if (name.includes('–∑–µ–ª–µ–Ω')) return { bg: 'bg-green-100', text: 'text-green-800', border: 'border-green-200' };
    return null;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ –∑–æ–Ω –ø–æ —Ç–∏–ø—É
  const getZoneColorsByType = (zoneType) => {
    switch (zoneType) {
      case 'red': return { bg: 'bg-red-100', text: 'text-red-800', border: 'border-red-200' };
      case 'pink': return { bg: 'bg-pink-100', text: 'text-pink-800', border: 'border-pink-200' };
      case 'gold': return { bg: 'bg-yellow-100', text: 'text-yellow-800', border: 'border-yellow-200' };
      case 'green': return { bg: 'bg-green-100', text: 'text-green-800', border: 'border-green-200' };
      default: return null;
    }
  };

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è –∑–æ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è
  const getZoneStyleFromValue = (value) => {
    if (!value || value <= 0 || isNaN(value)) return null;
    
    // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–æ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è
    // –≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞, –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞
    if (value >= 100) return 'green';
    if (value >= 75) return 'gold';
    if (value >= 50) return 'pink';
    return 'red';
  };

  const formatCellValue = (value, type, metric = null) => {
    if (value === null || value === undefined || value === '') {
      return <span className="text-gray-400">‚Äî</span>;
    }

    switch (type) {
      case 'currency':
        return <span className="font-mono font-bold text-green-600">${Number(value).toFixed(2)}</span>;
      
      case 'currency_uah_plain':
        return <span className="font-mono font-bold text-gray-900">{Number(value).toFixed(2)} ‚Ç¥</span>;
      
      case 'red_zone_currency':
      case 'pink_zone_currency':
      case 'gold_zone_currency':
      case 'green_zone_currency':
        const zoneType = type.replace('_zone_currency', '');
        const zoneColors = getZoneColorsByType(zoneType);
        return (
          <span className={`font-mono font-bold inline-flex items-center px-2 py-1 rounded-full text-xs border ${zoneColors.bg} ${zoneColors.text} ${zoneColors.border}`}>
            ${Number(value).toFixed(2)}
          </span>
        );
      
      case 'zone_styled_currency':
        if (value === '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö') {
          return <span className="text-gray-500 italic font-bold">–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö</span>;
        }
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–æ–Ω—ã –æ—Ñ—Ñ–µ—Ä–∞ –∏–∑ –º–µ—Ç—Ä–∏–∫–∏
        const offerZone = metric?.offer_zone;
        const zoneColorsForCurrency = getZoneColors(offerZone);
        if (zoneColorsForCurrency) {
          return (
            <span className={`font-mono font-bold inline-flex items-center px-2 py-1 rounded-full text-xs border ${zoneColorsForCurrency.bg} ${zoneColorsForCurrency.text} ${zoneColorsForCurrency.border}`}>
              ${Number(value).toFixed(2)}
            </span>
          );
        }
        return <span className="font-mono font-bold text-gray-900">${Number(value).toFixed(2)}</span>;
      
      case 'zone_styled_percentage':
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–æ–Ω—ã –æ—Ñ—Ñ–µ—Ä–∞ –∏–∑ –º–µ—Ç—Ä–∏–∫–∏
        const offerZoneForPercent = metric?.offer_zone;
        const zoneColorsForPercent = getZoneColors(offerZoneForPercent);
        if (zoneColorsForPercent) {
          return (
            <span className={`font-mono font-bold inline-flex items-center px-2 py-1 rounded-full text-xs border ${zoneColorsForPercent.bg} ${zoneColorsForPercent.text} ${zoneColorsForPercent.border}`}>
              {Number(value).toFixed(1)}%
            </span>
          );
        }
        return <span className="font-mono font-bold text-gray-900">{Number(value).toFixed(1)}%</span>;
      
      case 'depth_percentage':
        const numValue = Number(value);
        if (numValue === 0) {
          const redColors = getZoneColorsByType('red');
          return (
            <span className={`font-mono inline-flex items-center px-2 py-1 rounded-full text-xs font-medium border ${redColors.bg} ${redColors.text} ${redColors.border}`}>
              {numValue.toFixed(1)}%
            </span>
          );
        }
        return <span className="font-mono text-gray-900">{numValue.toFixed(1)}%</span>;
      
      case 'percentage':
        return <span className="font-mono text-blue-600">{Number(value).toFixed(1)}%</span>;
      
      case 'percentage_black':
        return <span className="font-mono text-gray-900">{Number(value).toFixed(1)}%</span>;
      
      case 'date':
        const date = new Date(value);
        return <span className="text-gray-700">{date.toLocaleDateString('ru-RU')}</span>;
      
      case 'zone':
        return <ZoneBadge zone={value} />;
      
      case 'number':
        return <span className="font-mono">{Number(value).toLocaleString('ru-RU')}</span>;
      
      default:
        return <span>{value}</span>;
    }
  };

  const ZoneBadge = ({ zone }) => {
    const colors = getZoneColors(zone);
    if (!colors) {
      return <span className="text-gray-600 font-bold">{zone}</span>;
    }

    return (
      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-bold border ${colors.bg} ${colors.text} ${colors.border}`}>
        {zone}
      </span>
    );
  };

  const formatKyivTime = (dateString) => {
    try {
      const date = new Date(dateString);
      return date.toLocaleString('ru-RU', {
        timeZone: 'Europe/Kiev',
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        hour12: false
      });
    } catch (error) {
      return new Date(dateString).toLocaleDateString('ru-RU');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∏–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∑–æ–Ω—ã
  const getZoneHeaderStyle = (column) => {
    if (column.zoneType) {
      const colors = getZoneColorsByType(column.zoneType);
      return `${colors.bg} ${colors.text} ${colors.border} border`;
    }
    return '';
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
  const filteredMetrics = metrics.filter(metric => {
    const matchesSearch = searchTerm === '' || 
      metric.article?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      metric.offer?.toLowerCase().includes(searchTerm.toLowerCase());
    
    return matchesSearch;
  }).sort((a, b) => {
    const aValue = a[sortField];
    const bValue = b[sortField];
    
    if (aValue === null || aValue === undefined) return 1;
    if (bValue === null || bValue === undefined) return -1;
    
    const comparison = aValue < bValue ? -1 : aValue > bValue ? 1 : 0;
    return sortDirection === 'asc' ? comparison : -comparison;
  });

  const handleSort = (field) => {
    if (sortField === field) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortField(field);
      setSortDirection('asc');
    }
  };

  const getStats = () => {
    const totalItems = filteredMetrics.length;
    const withActualLead = filteredMetrics.filter(m => m.actual_lead !== null && m.actual_lead !== '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö').length;
    const avgROI = filteredMetrics.reduce((sum, m) => sum + (m.actual_roi_percent || 0), 0) / totalItems;
    const zones = [...new Set(filteredMetrics.map(m => m.offer_zone).filter(Boolean))];
    
    return { totalItems, withActualLead, avgROI, zones };
  };

  const stats = getStats();

  if (loading) {
    return (
      <div className="flex items-center justify-center h-full">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto"></div>
          <p className="mt-4 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç—Ä–∏–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...</p>
          <p className="mt-2 text-sm text-gray-500">–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü</p>
        </div>
      </div>
    );
  }

  return (
    <div className="h-full flex flex-col bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b border-gray-200 px-6 py-4">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-semibold text-gray-900">
              –ú–µ—Ç—Ä–∏–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
            </h1>
            <p className="text-sm text-gray-600 mt-1">
              –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –æ—Ñ—Ñ–µ—Ä–æ–≤
            </p>
          </div>
          <div className="flex items-center space-x-3">
            <button
              onClick={() => setShowColumnInfo(true)}
              className="inline-flex items-center px-3 py-2 border border-gray-300 text-sm font-medium rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50"
            >
              <Info className="h-4 w-4 mr-2" />
              –°–ø—Ä–∞–≤–∫–∞
            </button>
            
            <button
              onClick={handleExportCSV}
              disabled={filteredMetrics.length === 0}
              className="inline-flex items-center px-3 py-2 border border-gray-300 text-sm font-medium rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50"
            >
              <Download className="h-4 w-4 mr-2" />
              –≠–∫—Å–ø–æ—Ä—Ç
            </button>
            
            <button
              onClick={loadMetrics}
              disabled={loading}
              className="inline-flex items-center px-3 py-2 border border-gray-300 text-sm font-medium rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50"
            >
              <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />
              –û–±–Ω–æ–≤–∏—Ç—å
            </button>
            
            <label className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 cursor-pointer">
              {uploading ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                  –ó–∞–≥—Ä—É–∑–∫–∞...
                </>
              ) : (
                <>
                  <Upload className="h-4 w-4 mr-2" />
                  –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV
                </>
              )}
              <input
                type="file"
                accept=".csv,text/csv"
                onChange={(e) => handleFileUpload(e.target.files)}
                className="sr-only"
                disabled={uploading}
              />
            </label>
          </div>
        </div>
      </div>

      {/* Messages */}
      {error && (
        <div className="mx-6 mt-4 bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-md text-sm flex items-center">
          <AlertCircle className="h-4 w-4 mr-2 flex-shrink-0" />
          {error}
        </div>
      )}

      {success && (
        <div className="mx-6 mt-4 bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-md text-sm flex items-center">
          <CheckCircle className="h-4 w-4 mr-2 flex-shrink-0" />
          {success}
        </div>
      )}

      {/* Stats */}
      {metrics.length > 0 && (
        <div className="bg-gray-50 border-b border-gray-200 px-6 py-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
            <div className="bg-white overflow-hidden shadow-sm rounded-lg border border-gray-200">
              <div className="p-4">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <BarChart3 className="h-6 w-6 text-blue-500" />
                  </div>
                  <div className="ml-3 w-0 flex-1">
                    <dl>
                      <dt className="text-xs font-medium text-gray-500 truncate">
                        –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤
                      </dt>
                      <dd className="text-lg font-semibold text-gray-900">
                        {stats.totalItems.toLocaleString('ru-RU')}
                      </dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>
            
            <div className="bg-white overflow-hidden shadow-sm rounded-lg border border-gray-200">
              <div className="p-4">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <Activity className="h-6 w-6 text-green-500" />
                  </div>
                  <div className="ml-3 w-0 flex-1">
                    <dl>
                      <dt className="text-xs font-medium text-gray-500 truncate">
                        –° –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –ª–∏–¥–∞–º
                      </dt>
                      <dd className="text-lg font-semibold text-gray-900">
                        {stats.withActualLead.toLocaleString('ru-RU')}
                      </dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-white overflow-hidden shadow-sm rounded-lg border border-gray-200">
              <div className="p-4">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <Database className="h-6 w-6 text-purple-500" />
                  </div>
                  <div className="ml-3 w-0 flex-1">
                    <dl>
                      <dt className="text-xs font-medium text-gray-500 truncate">
                        –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤ –ø–∞–º—è—Ç—å
                      </dt>
                      <dd className="text-lg font-semibold text-gray-900">
                        {loadingStats.actualCount.toLocaleString('ru-RU')}
                        {loadingStats.totalRecords > loadingStats.actualCount && (
                          <span className="text-sm text-orange-600 ml-1">
                            –∏–∑ {loadingStats.totalRecords.toLocaleString('ru-RU')}
                          </span>
                        )}
                      </dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {lastUpdated && (
            <div className="flex items-center justify-between text-sm text-gray-600">
              <div className="flex items-center">
                <Calendar className="h-4 w-4 mr-2" />
                –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {formatKyivTime(lastUpdated)}
              </div>
              <div className="text-xs text-gray-500">
                –û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {filteredMetrics.length.toLocaleString('ru-RU')}
              </div>
            </div>
          )}
        </div>
      )}

      {/* Filters */}
      <div className="bg-white border-b border-gray-200 px-6 py-3 sticky top-0 z-20">
        <div className="flex items-center space-x-4">
          <div className="flex-1">
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏–ª–∏ –æ—Ñ—Ñ–µ—Ä—É..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
        </div>
      </div>

      {/* Table */}
      <div className="flex-1 overflow-auto">
        {metrics.length === 0 ? (
          <div className="flex items-center justify-center h-full">
            <div className="text-center">
              <FileText className="h-16 w-16 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
              </h3>
              <p className="text-gray-600 mb-4">
                –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
              </p>
            </div>
          </div>
        ) : (
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50 sticky top-[73px] z-10">
              <tr>
                {columns.map(column => (
                  <th
                    key={column.key}
                    onClick={() => handleSort(column.key)}
                    className={`px-3 py-3 text-left text-xs font-medium uppercase tracking-wider cursor-pointer hover:bg-gray-100 ${getZoneHeaderStyle(column)}`}
                    style={{ minWidth: column.width }}
                  >
                    <div className="flex items-center space-x-1">
                      <span className={column.zoneType ? getZoneColorsByType(column.zoneType)?.text : 'text-gray-500'}>
                        {column.label}
                      </span>
                      {sortField === column.key && (
                        <span className="text-blue-500">
                          {sortDirection === 'asc' ? '‚Üë' : '‚Üì'}
                        </span>
                      )}
                    </div>
                  </th>
                ))}
              </tr>
            </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredMetrics.map((metric, index) => (
                  <tr key={index} className="hover:bg-gray-50">
                    {columns.map(column => (
                      <td
                        key={column.key}
                        className="px-3 py-4 whitespace-nowrap text-sm"
                        style={{ minWidth: column.width }}
                      >
                        {formatCellValue(metric[column.key], column.type, metric)}
                      </td>
                    ))}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>

      {/* Info Modal */}
      {showColumnInfo && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
          <div className="relative top-10 mx-auto p-5 border w-full max-w-4xl shadow-lg rounded-md bg-white m-5">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-medium text-gray-900">
                –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º CSV —Ñ–∞–π–ª–∞
              </h3>
              <button
                onClick={() => setShowColumnInfo(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                <X className="h-6 w-6" />
              </button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 max-h-96 overflow-y-auto">
              {[
                { num: 1, name: '‚Ññ', desc: '–ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä (—á–∏—Å–ª–æ, —Ü–µ–ª–æ–µ)' },
                { num: 2, name: '–ê—Ä—Ç–∏–∫—É–ª', desc: '–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ (—Ç–µ–∫—Å—Ç)' },
                { num: 3, name: '–û—Ñ—Ñ–µ—Ä', desc: '–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ (—Ç–µ–∫—Å—Ç)' },
                { num: 4, name: '–í—Å–µ–≥–æ –±—ã–ª–æ –ø–∞—Ä—Ç–∏–π', desc: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä—Ç–∏–π (—á–∏—Å–ª–æ —Ü–µ–ª–æ–µ)' },
                { num: 5, name: '–î–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–∏—Ö–æ–¥–∞', desc: '–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì' },
                { num: 6, name: '–ë–ª–∏–∂–∞–π—à–∏–π —Ä–∞—Å—á–µ—Ç–Ω—ã–π –ø—Ä–∏—Ö–æ–¥', desc: '–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì' },
                { num: 7, name: '–°–ü–ï–¶ —Å–µ–∑–æ–Ω –Ω–∞—á–∞–ª–æ', desc: '–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ (–º–∞–π, –∞–≤–≥, –∏ —Ç.–¥.)' },
                { num: 8, name: '–°–ü–ï–¶ —Å–µ–∑–æ–Ω –∫–æ–Ω–µ—Ü', desc: '–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ (–º–∞–π, –∞–≤–≥, –∏ —Ç.–¥.)' },
                { num: 9, name: '–¶–µ–Ω–∞ –æ—Ñ—Ñ–µ—Ä–∞', desc: '–¶–µ–Ω–∞ (—á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π)' },
                { num: 10, name: '–ö—Ä–∞—Å–Ω–∞—è –∑–æ–Ω–∞ —Ü–µ–Ω–∞ –ª–∏–¥–∞', desc: '–¶–µ–Ω–∞ –ª–∏–¥–∞ (—á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π)' },
                { num: 11, name: '–†–æ–∑–æ–≤–∞—è –∑–æ–Ω–∞ —Ü–µ–Ω–∞ –ª–∏–¥–∞', desc: '–¶–µ–Ω–∞ –ª–∏–¥–∞ (—á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π)' },
                { num: 12, name: '–ó–æ–ª–æ—Ç–∞—è –∑–æ–Ω–∞ —Ü–µ–Ω–∞ –ª–∏–¥–∞', desc: '–¶–µ–Ω–∞ –ª–∏–¥–∞ (—á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π)' },
                { num: 13, name: '–ó–µ–ª–µ–Ω–∞—è –∑–æ–Ω–∞ —Ü–µ–Ω–∞ –ª–∏–¥–∞', desc: '–¶–µ–Ω–∞ –ª–∏–¥–∞ (—á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π)' },
                { num: 14, name: '–ó–æ–Ω–∞ –æ—Ñ—Ñ–µ—Ä–∞', desc: '–¢–µ–∫—É—â–∞—è –∑–æ–Ω–∞ (—Ç–µ–∫—Å—Ç)' },
                { num: 15, name: '–§–∞–∫—Ç –ª–∏–¥', desc: '–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞ –ª–∏–¥–∞ –∏–ª–∏ "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"' },
                { num: 16, name: '–§–∞–∫—Ç ROI %', desc: 'ROI –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (—á–∏—Å–ª–æ)' },
                { num: 17, name: '–ì–ª—É–±–∏–Ω–∞ (–≤—ã–±–æ—Ä–∫–∞)', desc: '–ì–ª—É–±–∏–Ω–∞ –≤—ã–±–æ—Ä–∫–∏ (—á–∏—Å–ª–æ)' },
                { num: 18, name: '–¢–æ–≤–∞—Ä—ã —Å –±–æ–ª—å—à–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º –∏ –±–æ–ª—å—à–∏–º mCPL', desc: '–û—Ç–º–µ—Ç–∫–∞ "+" (—Ç–µ–∫—Å—Ç)' },
                { num: 19, name: '–¢–æ–≤–∞—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∞–ª–∏ —Ä–µ–∑–∫–æ –ø—Ä–æ—Å–µ–¥–∞—Ç—å/—É–ª—É—á—à–∞—Ç—å—Å—è (10 –¥–Ω–µ–π)', desc: '–¢—Ä–µ–Ω–¥ –∑–∞ 10 –¥–Ω–µ–π (—Ç–µ–∫—Å—Ç)' },
                { num: 20, name: '–¢–æ–≤–∞—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∞–ª–∏ —Ä–µ–∑–∫–æ –ø—Ä–æ—Å–µ–¥–∞—Ç—å/—É–ª—É—á—à–∞—Ç—å—Å—è (3 –¥–Ω—è)', desc: '–¢—Ä–µ–Ω–¥ –∑–∞ 3 –¥–Ω—è (—Ç–µ–∫—Å—Ç)' },
                { num: 21, name: '% –æ—Ç–∫–∞–∑–∞–ª—Å—è/–ø—Ä–æ–¥–∞–∂–∏', desc: '–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–∞–∑–æ–≤ (—á–∏—Å–ª–æ –≤ %)' },
                { num: 22, name: '–ö –ª–∏–¥', desc: '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ª–∏–¥–∞ (—á–∏—Å–ª–æ)' },
                { num: 23, name: '% –Ω–µ–≤—ã–∫—É–ø–∞', desc: '–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ–≤—ã–∫—É–ø–∞ (—á–∏—Å–ª–æ –≤ %)' },
                { num: 24, name: '–ù–∞ –≤—ã–≤–æ–¥', desc: '–°—Ç–∞—Ç—É—Å –≤—ã–≤–æ–¥–∞ (—Ç–µ–∫—Å—Ç)' },
                { num: 25, name: '–£–±—ã—Ç–æ—á–Ω—ã–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç', desc: '–°—Ç–∞—Ç—É—Å —É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏ (—Ç–µ–∫—Å—Ç)' }
              ].map(col => (
                <div key={col.num} className="border border-gray-200 rounded p-3">
                  <div className="font-medium text-gray-900">
                    {col.num}. {col.name}
                  </div>
                  <div className="text-sm text-gray-600 mt-1">
                    {col.desc}
                  </div>
                </div>
              ))}
            </div>

            <div className="mt-6 pt-4 border-t border-gray-200">
              <div className="text-sm text-gray-600">
                <p className="mb-2">
                  <strong>–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:</strong> CSV —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º ";" (—Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π)
                </p>
                <p className="mb-2">
                  <strong>–ö–æ–¥–∏—Ä–æ–≤–∫–∞:</strong> UTF-8
                </p>
                <p className="mb-2">
                  <strong>–î–∞—Ç—ã:</strong> –§–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 27.06.2023)
                </p>
                <p className="mb-2">
                  <strong>–ú–µ—Å—è—Ü—ã:</strong> –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–º–∞–π, –∞–≤–≥, —Å–µ–Ω –∏ —Ç.–¥.)
                </p>
                <p className="text-yellow-700 bg-yellow-50 p-2 rounded">
                  <strong>‚ö†Ô∏è –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ (3000+ –∑–∞–ø–∏—Å–µ–π):</strong> –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. 
                  –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ (F12).
                </p>
              </div>
            </div>

            <div className="flex justify-end mt-6">
              <button
                onClick={() => setShowColumnInfo(false)}
                className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50"
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default MetricsAnalytics;
