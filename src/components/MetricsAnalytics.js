// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π MetricsAnalytics.js —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
// –ó–∞–º–µ–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ src/components/MetricsAnalytics.js

import React, { useState, useEffect } from 'react';
import { metricsAnalyticsService } from '../supabaseClient';
import { metricsDebugger } from '../utils/debugMetricsUpload';
import Papa from 'papaparse';
import { 
  Upload,
  Download,
  RefreshCw,
  AlertCircle,
  CheckCircle,
  FileText,
  Calendar,
  TrendingUp,
  TrendingDown,
  Target,
  DollarSign,
  Activity,
  BarChart3,
  Info,
  X,
  Eye,
  Loader,
  Bug,
  Play
} from 'lucide-react';

function MetricsAnalytics({ user }) {
  const [metrics, setMetrics] = useState([]);
  const [loading, setLoading] = useState(true);
  const [uploading, setUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState({ current: 0, total: 0, percentage: 0 });
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [lastUpdated, setLastUpdated] = useState(null);
  const [showColumnInfo, setShowColumnInfo] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [sortField, setSortField] = useState('id');
  const [sortDirection, setSortDirection] = useState('asc');
  const [diagnosing, setDiagnosing] = useState(false);
  const [diagnosticReport, setDiagnosticReport] = useState(null);
  const [showDiagnosticModal, setShowDiagnosticModal] = useState(false);

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const columns = [
    { key: 'id', label: '‚Ññ', type: 'number', width: '60px' },
    { key: 'article', label: '–ê—Ä—Ç–∏–∫—É–ª', type: 'text', width: '120px' },
    { key: 'offer', label: '–û—Ñ—Ñ–µ—Ä', type: 'text', width: '150px' },
    { key: 'total_batches', label: '–í—Å–µ–≥–æ –ø–∞—Ä—Ç–∏–π', type: 'number', width: '100px' },
    { key: 'first_arrival_date', label: '–ü–µ—Ä–≤—ã–π –ø—Ä–∏—Ö–æ–¥', type: 'date', width: '120px' },
    { key: 'next_calculated_arrival', label: '–†–∞—Å—á–µ—Ç–Ω—ã–π –ø—Ä–∏—Ö–æ–¥', type: 'date', width: '130px' },
    { key: 'special_season_start', label: '–°–ø–µ—Ü —Å–µ–∑–æ–Ω –Ω–∞—á–∞–ª–æ', type: 'date', width: '130px' },
    { key: 'special_season_end', label: '–°–ø–µ—Ü —Å–µ–∑–æ–Ω –∫–æ–Ω–µ—Ü', type: 'date', width: '130px' },
    { key: 'offer_price', label: '–¶–µ–Ω–∞ –æ—Ñ—Ñ–µ—Ä–∞', type: 'currency_uah', width: '110px' },
    { key: 'red_zone_price', label: '–ö—Ä–∞—Å–Ω–∞—è –∑–æ–Ω–∞', type: 'currency', width: '110px' },
    { key: 'pink_zone_price', label: '–†–æ–∑–æ–≤–∞—è –∑–æ–Ω–∞', type: 'currency', width: '110px' },
    { key: 'gold_zone_price', label: '–ó–æ–ª–æ—Ç–∞—è –∑–æ–Ω–∞', type: 'currency', width: '110px' },
    { key: 'green_zone_price', label: '–ó–µ–ª–µ–Ω–∞—è –∑–æ–Ω–∞', type: 'currency', width: '110px' },
    { key: 'offer_zone', label: '–ó–æ–Ω–∞ –æ—Ñ—Ñ–µ—Ä–∞', type: 'zone', width: '120px' },
    { key: 'actual_lead', label: '–§–∞–∫—Ç –ª–∏–¥', type: 'currency_or_text', width: '100px' },
    { key: 'actual_roi_percent', label: '–§–∞–∫—Ç ROI %', type: 'percentage', width: '100px' },
    { key: 'depth_selection', label: '–ì–ª—É–±–∏–Ω–∞', type: 'percentage', width: '90px' },
    { key: 'high_stock_high_mcpl', label: '–ë–æ–ª—å—à–æ–π –æ—Å—Ç–∞—Ç–æ–∫', type: 'text', width: '120px' },
    { key: 'trend_10_days', label: '–¢—Ä–µ–Ω–¥ 10 –¥–Ω–µ–π', type: 'text', width: '120px' },
    { key: 'trend_3_days', label: '–¢—Ä–µ–Ω–¥ 3 –¥–Ω—è', type: 'text', width: '120px' },
    { key: 'refusal_sales_percent', label: '% –æ—Ç–∫–∞–∑/–ø—Ä–æ–¥–∞–∂–∏', type: 'percentage', width: '120px' },
    { key: 'k_lead', label: '–ö –ª–∏–¥', type: 'number', width: '80px' },
    { key: 'no_pickup_percent', label: '% –Ω–µ–≤—ã–∫—É–ø–∞', type: 'percentage', width: '100px' },
    { key: 'for_withdrawal', label: '–ù–∞ –≤—ã–≤–æ–¥', type: 'text', width: '100px' },
    { key: 'currently_unprofitable', label: '–£–±—ã—Ç–æ—á–Ω—ã–µ', type: 'text', width: '100px' }
  ];

  useEffect(() => {
    loadMetrics();
  }, []);

  const loadMetrics = async () => {
    try {
      setLoading(true);
      setError('');
      console.log('üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...');
      
      const data = await metricsAnalyticsService.getAllMetrics();
      setMetrics(data.metrics || []);
      setLastUpdated(data.lastUpdated);
      
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.metrics?.length || 0} –∑–∞–ø–∏—Å–µ–π –º–µ—Ç—Ä–∏–∫`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫:', error);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  const handleFileDiagnosis = async (files) => {
    if (!files || files.length === 0) return;

    const csvFile = Array.from(files).find(file => 
      file.name.endsWith('.csv') || file.type === 'text/csv'
    );

    if (!csvFile) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
      return;
    }

    try {
      setDiagnosing(true);
      setError('');
      setSuccess('');

      console.log('üîç –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Ñ–∞–π–ª–∞:', csvFile.name);
      
      const report = await metricsDebugger.runFullDiagnosis(csvFile);
      setDiagnosticReport(report);
      setShowDiagnosticModal(true);

      if (report.summary.success) {
        setSuccess('‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ - —Ñ–∞–π–ª –≥–æ—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ');
      } else {
        setError(`‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã: ${report.summary.errorsCount} –æ—à–∏–±–æ–∫`);
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
      setError('–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ' + error.message);
    } finally {
      setDiagnosing(false);
    }
  };

  const handleFileUpload = async (files) => {
    if (!files || files.length === 0) return;

    const csvFile = Array.from(files).find(file => 
      file.name.endsWith('.csv') || file.type === 'text/csv'
    );

    if (!csvFile) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª');
      return;
    }

    try {
      setUploading(true);
      setError('');
      setSuccess('');
      setUploadProgress({ current: 0, total: 0, percentage: 0 });

      console.log('üìÅ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞:', csvFile.name, '—Ä–∞–∑–º–µ—Ä:', csvFile.size);

      // –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
      const csvContent = await readFileContent(csvFile);
      console.log('üìñ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:', csvContent.length);
      
      // –ü–∞—Ä—Å–∏–º CSV
      const parsedData = Papa.parse(csvContent, {
        header: false,
        skipEmptyLines: true,
        delimiter: ';'
      });

      console.log('üìä CSV —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω:', {
        totalRows: parsedData.data.length,
        hasErrors: parsedData.errors.length > 0,
        firstRowLength: parsedData.data[0]?.length || 0
      });

      if (!parsedData.data || parsedData.data.length < 2) {
        throw new Error('CSV —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ');
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (parsedData.errors.length > 0) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV:', parsedData.errors);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ (–±–µ—Ä–µ–º 4-—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ —ç—Ç–∞–ª–æ–Ω)
      if (parsedData.data.length < 4) {
        throw new Error('CSV —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å—Ç—Ä–æ–∫–∏');
      }
      
      const headerRow = parsedData.data[3]; // 4-—è —Å—Ç—Ä–æ–∫–∞ –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∏
      if (headerRow.length < 25) {
        throw new Error(`CSV —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 25 –∫–æ–ª–æ–Ω–æ–∫, –Ω–∞–π–¥–µ–Ω–æ: ${headerRow.length}`);
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—ä–µ–∫—Ç—ã, –Ω–∞—á–∏–Ω–∞—è —Å 5-–π —Å—Ç—Ä–æ–∫–∏ (–∏–Ω–¥–µ–∫—Å 4)
      const dataRows = parsedData.data.slice(4); // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ 4 —Å—Ç—Ä–æ–∫–∏
      console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${dataRows.length} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö...`);

      setUploadProgress({ 
        current: 0, 
        total: dataRows.length, 
        percentage: 0 
      });

      const processedMetrics = [];
      const batchSize = 50; // –£–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –ª—É—á—à–µ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–∞—Ç—á–∞–º–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
      for (let i = 0; i < dataRows.length; i += batchSize) {
        const batch = dataRows.slice(i, i + batchSize);
        
        batch.forEach(row => {
          try {
            const processedRow = processCSVRow(row);
            if (processedRow) {
              processedMetrics.push(processedRow);
            }
          } catch (error) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ ${i + processedMetrics.length}:`, error);
          }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        const processed = Math.min(i + batchSize, dataRows.length);
        const percentage = Math.round((processed / dataRows.length) * 100);
        setUploadProgress({ 
          current: processed, 
          total: dataRows.length, 
          percentage 
        });

        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è UI
        await new Promise(resolve => setTimeout(resolve, 10));
      }

      console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedMetrics.length} –∑–∞–ø–∏—Å–µ–π –∏–∑ ${dataRows.length}`);

      if (processedMetrics.length === 0) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –∏–∑ CSV');
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É...');
      const uploadResult = await metricsAnalyticsService.uploadMetricsWithProgress(
        processedMetrics,
        (progress) => {
          setUploadProgress({
            current: progress.processed,
            total: progress.total,
            percentage: Math.round((progress.processed / progress.total) * 100),
            stage: '–ó–∞–≥—Ä—É–∑–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö'
          });
        }
      );

      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É:', uploadResult);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      await loadMetrics();
      
      setSuccess(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${processedMetrics.length} –∑–∞–ø–∏—Å–µ–π –º–µ—Ç—Ä–∏–∫ –∏–∑ ${dataRows.length} —Å—Ç—Ä–æ–∫ CSV`);
      setUploadProgress({ current: 0, total: 0, percentage: 0 });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV:', error);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV: ' + error.message);
      setUploadProgress({ current: 0, total: 0, percentage: 0 });
    } finally {
      setUploading(false);
    }
  };

  const processCSVRow = (row) => {
    if (!row || row.length < 25) {
      console.warn('‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö:', row?.length || 0, '–∫–æ–ª–æ–Ω–æ–∫');
      return null;
    }

    const parseDate = (dateStr) => {
      if (!dateStr || dateStr.trim() === '') return null;
      
      // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY
      const parts = dateStr.trim().split('.');
      if (parts.length === 3) {
        const day = parseInt(parts[0]);
        const month = parseInt(parts[1]) - 1; // –ú–µ—Å—è—Ü—ã –≤ JS –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
        const year = parseInt(parts[2]);
        
        if (!isNaN(day) && !isNaN(month) && !isNaN(year)) {
          const date = new Date(year, month, day);
          if (!isNaN(date.getTime())) {
            return date.toISOString().split('T')[0]; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
          }
        }
      }
      return null;
    };

    const parseNumber = (str) => {
      if (!str || str.trim() === '' || str.toLowerCase() === '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö') return null;
      const num = parseFloat(str.replace(',', '.').replace(/[^\d.-]/g, ''));
      return isNaN(num) ? null : num;
    };

    const parseInt = (str) => {
      if (!str || str.trim() === '') return null;
      const num = Number.parseInt(str.replace(/[^\d-]/g, ''));
      return isNaN(num) ? null : num;
    };

    try {
      return {
        id: parseInt(row[0]) || null,
        article: (row[1] || '').toString().trim(),
        offer: (row[2] || '').toString().trim(),
        total_batches: parseInt(row[3]) || null,
        first_arrival_date: parseDate(row[4]),
        next_calculated_arrival: parseDate(row[5]),
        special_season_start: parseDate(row[6]),
        special_season_end: parseDate(row[7]),
        offer_price: parseNumber(row[8]),
        red_zone_price: parseNumber(row[9]),
        pink_zone_price: parseNumber(row[10]),
        gold_zone_price: parseNumber(row[11]),
        green_zone_price: parseNumber(row[12]),
        offer_zone: (row[13] || '').toString().trim(),
        actual_lead: row[14] === '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö' ? '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö' : parseNumber(row[14]),
        actual_roi_percent: parseNumber(row[15]),
        depth_selection: parseNumber(row[16]),
        high_stock_high_mcpl: (row[17] || '').toString().trim(),
        trend_10_days: (row[18] || '').toString().trim(),
        trend_3_days: (row[19] || '').toString().trim(),
        refusal_sales_percent: parseNumber(row[20]),
        k_lead: parseNumber(row[21]),
        no_pickup_percent: parseNumber(row[22]),
        for_withdrawal: (row[23] || '').toString().trim(),
        currently_unprofitable: (row[24] || '').toString().trim()
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏:', error, row);
      return null;
    }
  };

  const readFileContent = (file) => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = (e) => resolve(e.target.result);
      reader.onerror = () => reject(new Error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞'));
      reader.readAsText(file, 'UTF-8');
    });
  };

  const handleExportCSV = () => {
    if (filteredMetrics.length === 0) {
      setError('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
      return;
    }

    try {
      console.log('üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º', filteredMetrics.length, '–∑–∞–ø–∏—Å–µ–π...');
      
      // –°–æ–∑–¥–∞–µ–º CSV –¥–∞–Ω–Ω—ã–µ
      const headers = columns.map(col => col.label);
      const csvData = [
        headers,
        ...filteredMetrics.map(metric => columns.map(col => {
          const value = metric[col.key];
          if (value === null || value === undefined) return '';
          if (col.type === 'date' && value) {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –æ–±—Ä–∞—Ç–Ω–æ –≤ DD.MM.YYYY —Ñ–æ—Ä–º–∞—Ç
            const date = new Date(value);
            return date.toLocaleDateString('ru-RU');
          }
          return String(value);
        }))
      ];

      const csv = Papa.unparse(csvData, { delimiter: ';' });
      
      // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
      const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', `metrics_analytics_${new Date().toISOString().split('T')[0]}.csv`);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      console.log('‚úÖ –§–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω');
      setSuccess('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
      setError('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ' + error.message);
    }
  };

  const formatCellValue = (value, type) => {
    if (value === null || value === undefined || value === '') {
      return <span className="text-gray-400">‚Äî</span>;
    }

    switch (type) {
      case 'currency':
        return <span className="font-mono text-green-600">${Number(value).toFixed(2)}</span>;
      
      case 'currency_uah':
        return <span className="font-mono text-green-600">{Number(value).toFixed(2)} ‚Ç¥</span>;
      
      case 'currency_or_text':
        if (value === '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö') {
          return <span className="text-gray-500 italic">–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö</span>;
        }
        return <span className="font-mono text-green-600">${Number(value).toFixed(2)}</span>;
      
      case 'percentage':
        return <span className="font-mono text-blue-600">{Number(value).toFixed(1)}%</span>;
      
      case 'date':
        const date = new Date(value);
        return <span className="text-gray-700">{date.toLocaleDateString('ru-RU')}</span>;
      
      case 'zone':
        return <ZoneBadge zone={value} />;
      
      case 'number':
        return <span className="font-mono">{Number(value).toLocaleString('ru-RU')}</span>;
      
      default:
        return <span>{value}</span>;
    }
  };

  const ZoneBadge = ({ zone }) => {
    const getZoneColor = (zoneName) => {
      const name = zoneName.toLowerCase();
      if (name.includes('–∫—Ä–∞—Å–Ω')) return 'bg-red-100 text-red-800 border-red-200';
      if (name.includes('—Ä–æ–∑–æ–≤')) return 'bg-pink-100 text-pink-800 border-pink-200';
      if (name.includes('–∑–æ–ª–æ—Ç')) return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      if (name.includes('–∑–µ–ª–µ–Ω')) return 'bg-green-100 text-green-800 border-green-200';
      return 'bg-gray-100 text-gray-800 border-gray-200';
    };

    return (
      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium border ${getZoneColor(zone)}`}>
        {zone}
      </span>
    );
  };

  const formatKyivTime = (dateString) => {
    try {
      const date = new Date(dateString);
      return date.toLocaleString('ru-RU', {
        timeZone: 'Europe/Kiev',
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        hour12: false
      });
    } catch (error) {
      return new Date(dateString).toLocaleDateString('ru-RU');
    }
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
  const filteredMetrics = metrics.filter(metric => {
    const matchesSearch = searchTerm === '' || 
      metric.article?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      metric.offer?.toLowerCase().includes(searchTerm.toLowerCase());
    
    return matchesSearch;
  }).sort((a, b) => {
    const aValue = a[sortField];
    const bValue = b[sortField];
    
    if (aValue === null || aValue === undefined) return 1;
    if (bValue === null || bValue === undefined) return -1;
    
    const comparison = aValue < bValue ? -1 : aValue > bValue ? 1 : 0;
    return sortDirection === 'asc' ? comparison : -comparison;
  });

  const handleSort = (field) => {
    if (sortField === field) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortField(field);
      setSortDirection('asc');
    }
  };

  const getStats = () => {
    const totalItems = filteredMetrics.length;
    const withActualLead = filteredMetrics.filter(m => m.actual_lead !== null && m.actual_lead !== '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö').length;
    const avgROI = filteredMetrics.reduce((sum, m) => sum + (m.actual_roi_percent || 0), 0) / totalItems;
    const zones = [...new Set(filteredMetrics.map(m => m.offer_zone).filter(Boolean))];
    
    return { totalItems, withActualLead, avgROI, zones };
  };

  const stats = getStats();

  if (loading) {
    return (
      <div className="flex items-center justify-center h-full">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto"></div>
          <p className="mt-4 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç—Ä–∏–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="h-full flex flex-col bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b border-gray-200 px-6 py-4">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-semibold text-gray-900">
              –ú–µ—Ç—Ä–∏–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
            </h1>
            <p className="text-sm text-gray-600 mt-1">
              –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –æ—Ñ—Ñ–µ—Ä–æ–≤
            </p>
          </div>
          <div className="flex items-center space-x-3">
            <label className="inline-flex items-center px-3 py-2 border border-yellow-300 text-sm font-medium rounded-md shadow-sm text-yellow-700 bg-yellow-50 hover:bg-yellow-100 cursor-pointer">
              {diagnosing ? (
                <>
                  <Bug className="animate-bounce h-4 w-4 mr-2" />
                  –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞...
                </>
              ) : (
                <>
                  <Bug className="h-4 w-4 mr-2" />
                  –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ CSV
                </>
              )}
              <input
                type="file"
                accept=".csv,text/csv"
                onChange={(e) => handleFileDiagnosis(e.target.files)}
                className="sr-only"
                disabled={diagnosing || uploading}
              />
            </label>

            <button
              onClick={() => setShowColumnInfo(true)}
              className="inline-flex items-center px-3 py-2 border border-gray-300 text-sm font-medium rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50"
            >
              <Info className="h-4 w-4 mr-2" />
              –°–ø—Ä–∞–≤–∫–∞
            </button>
            
            <button
              onClick={handleExportCSV}
              disabled={filteredMetrics.length === 0}
              className="inline-flex items-center px-3 py-2 border border-gray-300 text-sm font-medium rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50"
            >
              <Download className="h-4 w-4 mr-2" />
              –≠–∫—Å–ø–æ—Ä—Ç ({filteredMetrics.length})
            </button>
            
            <button
              onClick={loadMetrics}
              className="inline-flex items-center px-3 py-2 border border-gray-300 text-sm font-medium rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50"
            >
              <RefreshCw className="h-4 w-4 mr-2" />
              –û–±–Ω–æ–≤–∏—Ç—å
            </button>
            
            <label className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 cursor-pointer">
              {uploading ? (
                <>
                  <Loader className="animate-spin h-4 w-4 mr-2" />
                  –ó–∞–≥—Ä—É–∑–∫–∞...
                </>
              ) : (
                <>
                  <Upload className="h-4 w-4 mr-2" />
                  –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV
                </>
              )}
              <input
                type="file"
                accept=".csv,text/csv"
                onChange={(e) => handleFileUpload(e.target.files)}
                className="sr-only"
                disabled={uploading}
              />
            </label>
          </div>
        </div>
      </div>

      {/* Upload Progress */}
      {uploading && uploadProgress.total > 0 && (
        <div className="bg-blue-50 border-b border-blue-200 px-6 py-3">
          <div className="flex items-center justify-between mb-2">
            <span className="text-sm font-medium text-blue-900">
              {uploadProgress.stage || '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö'}: {uploadProgress.current} / {uploadProgress.total}
            </span>
            <span className="text-sm font-medium text-blue-900">
              {uploadProgress.percentage}%
            </span>
          </div>
          <div className="w-full bg-blue-200 rounded-full h-2">
            <div 
              className="bg-blue-600 h-2 rounded-full transition-all duration-300"
              style={{ width: `${uploadProgress.percentage}%` }}
            ></div>
          </div>
        </div>
      )}

      {/* Messages */}
      {error && (
        <div className="mx-6 mt-4 bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-md text-sm flex items-center">
          <AlertCircle className="h-4 w-4 mr-2 flex-shrink-0" />
          {error}
        </div>
      )}

      {success && (
        <div className="mx-6 mt-4 bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-md text-sm flex items-center">
          <CheckCircle className="h-4 w-4 mr-2 flex-shrink-0" />
          {success}
        </div>
      )}

      {/* Stats */}
      {metrics.length > 0 && (
        <div className="bg-gray-50 border-b border-gray-200 px-6 py-4">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-4">
            <div className="bg-white overflow-hidden shadow-sm rounded-lg border border-gray-200">
              <div className="p-4">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <BarChart3 className="h-6 w-6 text-blue-500" />
                  </div>
                  <div className="ml-3 w-0 flex-1">
                    <dl>
                      <dt className="text-xs font-medium text-gray-500 truncate">
                        –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π
                      </dt>
                      <dd className="text-lg font-semibold text-gray-900">
                        {metrics.length}
                      </dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-white overflow-hidden shadow-sm rounded-lg border border-gray-200">
              <div className="p-4">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <Eye className="h-6 w-6 text-green-500" />
                  </div>
                  <div className="ml-3 w-0 flex-1">
                    <dl>
                      <dt className="text-xs font-medium text-gray-500 truncate">
                        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
                      </dt>
                      <dd className="text-lg font-semibold text-gray-900">
                        {filteredMetrics.length}
                      </dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-white overflow-hidden shadow-sm rounded-lg border border-gray-200">
              <div className="p-4">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <Target className="h-6 w-6 text-purple-500" />
                  </div>
                  <div className="ml-3 w-0 flex-1">
                    <dl>
                      <dt className="text-xs font-medium text-gray-500 truncate">
                        –° –¥–∞–Ω–Ω—ã–º–∏ –ª–∏–¥–æ–≤
                      </dt>
                      <dd className="text-lg font-semibold text-gray-900">
                        {stats.withActualLead}
                      </dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-white overflow-hidden shadow-sm rounded-lg border border-gray-200">
              <div className="p-4">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <TrendingUp className="h-6 w-6 text-orange-500" />
                  </div>
                  <div className="ml-3 w-0 flex-1">
                    <dl>
                      <dt className="text-xs font-medium text-gray-500 truncate">
                        –°—Ä–µ–¥–Ω–∏–π ROI
                      </dt>
                      <dd className="text-lg font-semibold text-gray-900">
                        {stats.avgROI.toFixed(1)}%
                      </dd>
                    </dl>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {lastUpdated && (
            <div className="flex items-center text-sm text-gray-600">
              <Calendar className="h-4 w-4 mr-2" />
              –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {formatKyivTime(lastUpdated)}
            </div>
          )}
        </div>
      )}

      {/* Filters */}
      <div className="bg-white border-b border-gray-200 px-6 py-3">
        <div className="flex items-center space-x-4">
          <div className="flex-1">
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏–ª–∏ –æ—Ñ—Ñ–µ—Ä—É..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
        </div>
      </div>

      {/* Table */}
      <div className="flex-1 overflow-auto">
        {metrics.length === 0 ? (
          <div className="flex items-center justify-center h-full">
            <div className="text-center">
              <FileText className="h-16 w-16 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
              </h3>
              <p className="text-gray-600 mb-4">
                –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
              </p>
            </div>
          </div>
        ) : (
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50 sticky top-0">
                <tr>
                  {columns.map(column => (
                    <th
                      key={column.key}
                      onClick={() => handleSort(column.key)}
                      className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
                      style={{ minWidth: column.width }}
                    >
                      <div className="flex items-center space-x-1">
                        <span>{column.label}</span>
                        {sortField === column.key && (
                          <span className="text-blue-500">
                            {sortDirection === 'asc' ? '‚Üë' : '‚Üì'}
                          </span>
                        )}
                      </div>
                    </th>
                  ))}
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredMetrics.map((metric, index) => (
                  <tr key={index} className="hover:bg-gray-50">
                    {columns.map(column => (
                      <td
                        key={column.key}
                        className="px-3 py-4 whitespace-nowrap text-sm"
                        style={{ minWidth: column.width }}
                      >
                        {formatCellValue(metric[column.key], column.type)}
                      </td>
                    ))}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>

      {/* Diagnostic Modal */}
      {showDiagnosticModal && diagnosticReport && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
          <div className="relative top-10 mx-auto p-5 border w-full max-w-4xl shadow-lg rounded-md bg-white m-5">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-medium text-gray-900 flex items-center">
                <Bug className="h-5 w-5 mr-2 text-yellow-600" />
                –û—Ç—á–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ CSV —Ñ–∞–π–ª–∞
              </h3>
              <div className="flex items-center space-x-2">
                <button
                  onClick={() => metricsDebugger.exportReport(diagnosticReport)}
                  className="inline-flex items-center px-3 py-2 border border-gray-300 text-sm font-medium rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50"
                >
                  <Download className="h-4 w-4 mr-2" />
                  –≠–∫—Å–ø–æ—Ä—Ç
                </button>
                <button
                  onClick={() => setShowDiagnosticModal(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <X className="h-6 w-6" />
                </button>
              </div>
            </div>

            <div className="space-y-4 max-h-96 overflow-y-auto">
              {/* –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å */}
              <div className={`p-4 rounded-lg border ${
                diagnosticReport.summary.success 
                  ? 'bg-green-50 border-green-200' 
                  : 'bg-red-50 border-red-200'
              }`}>
                <div className="flex items-center">
                  {diagnosticReport.summary.success ? (
                    <CheckCircle className="h-5 w-5 text-green-600 mr-2" />
                  ) : (
                    <AlertCircle className="h-5 w-5 text-red-600 mr-2" />
                  )}
                  <span className={`font-medium ${
                    diagnosticReport.summary.success ? 'text-green-800' : 'text-red-800'
                  }`}>
                    {diagnosticReport.summary.success ? '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–∞' : '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã'}
                  </span>
                </div>
                <div className="mt-2 text-sm">
                  <p>–û—à–∏–±–æ–∫: {diagnosticReport.summary.errorsCount}</p>
                  <p>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {diagnosticReport.duration}ms</p>
                </div>
              </div>

              {/* –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ */}
              {diagnosticReport.results.fileAnalysis && (
                <div className="border border-gray-200 rounded-lg p-4">
                  <h4 className="font-medium text-gray-900 mb-2">üìÅ –ê–Ω–∞–ª–∏–∑ CSV —Ñ–∞–π–ª–∞</h4>
                  {diagnosticReport.results.fileAnalysis.isValid ? (
                    <div className="text-sm text-gray-700">
                      <p>‚úÖ –§–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π</p>
                      <p>–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {diagnosticReport.results.fileAnalysis.totalRows}</p>
                      <p>–°—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: {diagnosticReport.results.fileAnalysis.dataRows}</p>
                      <p>–ö–æ–ª–æ–Ω–æ–∫ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ: {diagnosticReport.results.fileAnalysis.headerRow?.length || 0}</p>
                    </div>
                  ) : (
                    <div className="text-sm text-red-700">
                      <p>‚ùå –§–∞–π–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π</p>
                      <p>–û—à–∏–±–∫–∞: {diagnosticReport.results.fileAnalysis.error}</p>
                    </div>
                  )}
                </div>
              )}

              {/* –°—Ç–∞—Ç—É—Å –ë–î */}
              <div className="border border-gray-200 rounded-lg p-4">
                <h4 className="font-medium text-gray-900 mb-2">üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</h4>
                <div className="text-sm">
                  {diagnosticReport.results.databaseConnection ? (
                    <p className="text-green-700">‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç</p>
                  ) : (
                    <p className="text-red-700">‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º</p>
                  )}
                </div>
              </div>

              {/* –¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏ */}
              <div className="border border-gray-200 rounded-lg p-4">
                <h4 className="font-medium text-gray-900 mb-2">üß™ –¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö</h4>
                <div className="text-sm">
                  {diagnosticReport.results.testInsert ? (
                    <p className="text-green-700">‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ</p>
                  ) : (
                    <p className="text-red-700">‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—Å—Ç–∞–≤–∫–µ</p>
                  )}
                </div>
              </div>

              {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
              {diagnosticReport.recommendations && diagnosticReport.recommendations.length > 0 && (
                <div className="border border-blue-200 rounded-lg p-4 bg-blue-50">
                  <h4 className="font-medium text-blue-900 mb-2">üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h4>
                  <ul className="text-sm text-blue-800 space-y-1">
                    {diagnosticReport.recommendations.map((rec, index) => (
                      <li key={index} className="flex items-start">
                        <span className="mr-2">‚Ä¢</span>
                        <span>{rec}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              )}

              {/* –û—à–∏–±–∫–∏ */}
              {diagnosticReport.errors && diagnosticReport.errors.length > 0 && (
                <div className="border border-red-200 rounded-lg p-4 bg-red-50">
                  <h4 className="font-medium text-red-900 mb-2">‚ùå –û—à–∏–±–∫–∏</h4>
                  <div className="text-sm text-red-800 space-y-2 max-h-32 overflow-y-auto">
                    {diagnosticReport.errors.map((error, index) => (
                      <div key={index} className="border-l-2 border-red-300 pl-2">
                        <p className="font-medium">{error.message}</p>
                        {error.error && (
                          <p className="text-xs opacity-75">{error.error}</p>
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ */}
              <div className="border border-gray-200 rounded-lg p-4">
                <h4 className="font-medium text-gray-900 mb-2">üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏</h4>
                <div className="text-xs text-gray-600 bg-gray-50 rounded p-2 max-h-32 overflow-y-auto font-mono">
                  {diagnosticReport.logs.map((log, index) => (
                    <div key={index} className="mb-1">
                      <span className="text-gray-400">[{new Date(log.timestamp).toLocaleTimeString()}]</span> {log.message}
                    </div>
                  ))}
                </div>
              </div>
            </div>

            <div className="flex justify-between items-center mt-6 pt-4 border-t border-gray-200">
              <div className="text-sm text-gray-600">
                –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {new Date(diagnosticReport.timestamp).toLocaleString()}
              </div>
              <div className="flex space-x-3">
                <button
                  onClick={() => metricsDebugger.exportReport(diagnosticReport)}
                  className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50"
                >
                  –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞
                </button>
                <button
                  onClick={() => setShowDiagnosticModal(false)}
                  className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50"
                >
                  –ó–∞–∫—Ä—ã—Ç—å
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Info Modal - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º */}
      {showColumnInfo && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
          <div className="relative top-10 mx-auto p-5 border w-full max-w-4xl shadow-lg rounded-md bg-white m-5">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-medium text-gray-900">
                –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º CSV —Ñ–∞–π–ª–∞
              </h3>
              <button
                onClick={() => setShowColumnInfo(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                <X className="h-6 w-6" />
              </button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 max-h-96 overflow-y-auto">
              {[
                { num: 1, name: '‚Ññ', desc: '–ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä (—á–∏—Å–ª–æ, —Ü–µ–ª–æ–µ)' },
                { num: 2, name: '–ê—Ä—Ç–∏–∫—É–ª', desc: '–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ (—Ç–µ–∫—Å—Ç)' },
                { num: 3, name: '–û—Ñ—Ñ–µ—Ä', desc: '–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞ (—Ç–µ–∫—Å—Ç)' },
                { num: 4, name: '–í—Å–µ–≥–æ –±—ã–ª–æ –ø–∞—Ä—Ç–∏–π', desc: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä—Ç–∏–π (—á–∏—Å–ª–æ —Ü–µ–ª–æ–µ)' },
                { num: 5, name: '–î–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–∏—Ö–æ–¥–∞', desc: '–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì' },
                { num: 6, name: '–ë–ª–∏–∂–∞–π—à–∏–π —Ä–∞—Å—á–µ—Ç–Ω—ã–π –ø—Ä–∏—Ö–æ–¥', desc: '–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì' },
                { num: 7, name: '–°–ü–ï–¶ —Å–µ–∑–æ–Ω –Ω–∞—á–∞–ª–æ', desc: '–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì' },
                { num: 8, name: '–°–ü–ï–¶ —Å–µ–∑–æ–Ω –∫–æ–Ω–µ—Ü', desc: '–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì' },
                { num: 9, name: '–¶–µ–Ω–∞ –æ—Ñ—Ñ–µ—Ä–∞', desc: '–¶–µ–Ω–∞ (—á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π)' },
                { num: 10, name: '–ö—Ä–∞—Å–Ω–∞—è –∑–æ–Ω–∞ —Ü–µ–Ω–∞ –ª–∏–¥–∞', desc: '–¶–µ–Ω–∞ –ª–∏–¥–∞ (—á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π)' },
                { num: 11, name: '–†–æ–∑–æ–≤–∞—è –∑–æ–Ω–∞ —Ü–µ–Ω–∞ –ª–∏–¥–∞', desc: '–¶–µ–Ω–∞ –ª–∏–¥–∞ (—á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π)' },
                { num: 12, name: '–ó–æ–ª–æ—Ç–∞—è –∑–æ–Ω–∞ —Ü–µ–Ω–∞ –ª–∏–¥–∞', desc: '–¶–µ–Ω–∞ –ª–∏–¥–∞ (—á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π)' },
                { num: 13, name: '–ó–µ–ª–µ–Ω–∞—è –∑–æ–Ω–∞ —Ü–µ–Ω–∞ –ª–∏–¥–∞', desc: '–¶–µ–Ω–∞ –ª–∏–¥–∞ (—á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π)' },
                { num: 14, name: '–ó–æ–Ω–∞ –æ—Ñ—Ñ–µ—Ä–∞', desc: '–¢–µ–∫—É—â–∞—è –∑–æ–Ω–∞ (—Ç–µ–∫—Å—Ç)' },
                { num: 15, name: '–§–∞–∫—Ç –ª–∏–¥', desc: '–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞ –ª–∏–¥–∞ –∏–ª–∏ "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"' },
                { num: 16, name: '–§–∞–∫—Ç ROI %', desc: 'ROI –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (—á–∏—Å–ª–æ)' },
                { num: 17, name: '–ì–ª—É–±–∏–Ω–∞ (–≤—ã–±–æ—Ä–∫–∞)', desc: '–ì–ª—É–±–∏–Ω–∞ –≤—ã–±–æ—Ä–∫–∏ (—á–∏—Å–ª–æ)' },
                { num: 18, name: '–¢–æ–≤–∞—Ä—ã —Å –±–æ–ª—å—à–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º –∏ –±–æ–ª—å—à–∏–º mCPL', desc: '–û—Ç–º–µ—Ç–∫–∞ "+" (—Ç–µ–∫—Å—Ç)' },
                { num: 19, name: '–¢–æ–≤–∞—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∞–ª–∏ —Ä–µ–∑–∫–æ –ø—Ä–æ—Å–µ–¥–∞—Ç—å/—É–ª—É—á—à–∞—Ç—å—Å—è (10 –¥–Ω–µ–π)', desc: '–¢—Ä–µ–Ω–¥ –∑–∞ 10 –¥–Ω–µ–π (—Ç–µ–∫—Å—Ç)' },
                { num: 20, name: '–¢–æ–≤–∞—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∞–ª–∏ —Ä–µ–∑–∫–æ –ø—Ä–æ—Å–µ–¥–∞—Ç—å/—É–ª—É—á—à–∞—Ç—å—Å—è (3 –¥–Ω—è)', desc: '–¢—Ä–µ–Ω–¥ –∑–∞ 3 –¥–Ω—è (—Ç–µ–∫—Å—Ç)' },
                { num: 21, name: '% –æ—Ç–∫–∞–∑–∞–ª—Å—è/–ø—Ä–æ–¥–∞–∂–∏', desc: '–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–∞–∑–æ–≤ (—á–∏—Å–ª–æ –≤ %)' },
                { num: 22, name: '–ö –ª–∏–¥', desc: '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ª–∏–¥–∞ (—á–∏—Å–ª–æ)' },
                { num: 23, name: '% –Ω–µ–≤—ã–∫—É–ø–∞', desc: '–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ–≤—ã–∫—É–ø–∞ (—á–∏—Å–ª–æ –≤ %)' },
                { num: 24, name: '–ù–∞ –≤—ã–≤–æ–¥', desc: '–°—Ç–∞—Ç—É—Å –≤—ã–≤–æ–¥–∞ (—Ç–µ–∫—Å—Ç)' },
                { num: 25, name: '–£–±—ã—Ç–æ—á–Ω—ã–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç', desc: '–°—Ç–∞—Ç—É—Å —É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏ (—Ç–µ–∫—Å—Ç)' }
              ].map(col => (
                <div key={col.num} className="border border-gray-200 rounded p-3">
                  <div className="font-medium text-gray-900">
                    {col.num}. {col.name}
                  </div>
                  <div className="text-sm text-gray-600 mt-1">
                    {col.desc}
                  </div>
                </div>
              ))}
            </div>

            <div className="mt-6 pt-4 border-t border-gray-200">
              <div className="text-sm text-gray-600">
                <p className="mb-2">
                  <strong>–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:</strong> CSV —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º ";" (—Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π)
                </p>
                <p className="mb-2">
                  <strong>–ö–æ–¥–∏—Ä–æ–≤–∫–∞:</strong> UTF-8
                </p>
                <p className="mb-2">
                  <strong>–î–∞—Ç—ã:</strong> –§–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 27.06.2023)
                </p>
                <p>
                  <strong>–í–∞–∂–Ω–æ:</strong> –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 4 —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∞—á–∞–ª–µ, –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 5-–π —Å—Ç—Ä–æ–∫–∏
                </p>
              </div>
            </div>

            <div className="flex justify-end mt-6">
              <button
                onClick={() => setShowColumnInfo(false)}
                className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50"
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default MetricsAnalytics;
