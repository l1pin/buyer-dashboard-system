// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π CreativeMetrics.js –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –º–µ—Ç—Ä–∏–∫
// –ó–∞–º–µ–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ src/components/CreativeMetrics.js

import React, { useState, useEffect } from 'react';
import { MetricsService } from '../services/metricsService';
import { 
  RefreshCw,
  AlertCircle,
  CheckCircle,
  Clock,
  BarChart3,
  TrendingUp,
  Eye,
  MousePointer,
  DollarSign,
  Target
} from 'lucide-react';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ –≤ –∫—Ä–∞—Å–∏–≤–æ–º –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ
 * –û–ë–ù–û–í–õ–ï–ù –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
 */
function CreativeMetrics({ videoTitle, showRefresh = true, compact = false, period = 'all' }) {
  const [rawMetrics, setRawMetrics] = useState(null); // –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
  const [filteredMetrics, setFilteredMetrics] = useState(null); // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [lastUpdated, setLastUpdated] = useState(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
  const loadRawMetrics = async () => {
    if (!videoTitle || videoTitle.startsWith('–í–∏–¥–µ–æ ')) {
      return;
    }

    setLoading(true);
    setError('');

    try {
      console.log(`üîç CreativeMetrics: –ó–∞–≥—Ä—É–∑–∫–∞ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è: ${videoTitle}`);
      
      const result = await MetricsService.getVideoMetricsRaw(videoTitle);
      
      if (result.found) {
        setRawMetrics(result);
        setLastUpdated(new Date());
        setError('');
      } else {
        setError(result.error || '–ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        setRawMetrics(null);
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫:', err);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + err.message);
      setRawMetrics(null);
    } finally {
      setLoading(false);
    }
  };

  // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–µ—Ä–∏–æ–¥–∞
  const applyPeriodFilter = (rawData, targetPeriod) => {
    if (!rawData || !rawData.found) {
      setFilteredMetrics(null);
      return;
    }

    console.log(`‚ö° CreativeMetrics: –ú–ì–ù–û–í–ï–ù–ù–ê–Ø —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è ${videoTitle}: ${targetPeriod}`);
    
    try {
      const filtered = MetricsService.filterRawMetricsByPeriod(rawData, targetPeriod);
      setFilteredMetrics(filtered);
      setError(filtered.found ? '' : (filtered.error || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥'));
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ' + err.message);
      setFilteredMetrics(null);
    }
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–º–µ–Ω–µ videoTitle
  useEffect(() => {
    if (videoTitle && !videoTitle.startsWith('–í–∏–¥–µ–æ ')) {
      loadRawMetrics();
    }
  }, [videoTitle]); // period –ù–ï–¢ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö!

  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–µ—Ä–∏–æ–¥–∞ –∏–ª–∏ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (rawMetrics) {
      applyPeriodFilter(rawMetrics, period);
    } else {
      setFilteredMetrics(null);
    }
  }, [rawMetrics, period]);

  const handleRefresh = () => {
    loadRawMetrics(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
  };

  // –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ
  if (!videoTitle || videoTitle.startsWith('–í–∏–¥–µ–æ ')) {
    return (
      <div className="bg-gray-50 rounded-lg p-3 border border-gray-200">
        <div className="flex items-center text-gray-500 text-sm">
          <BarChart3 className="h-4 w-4 mr-2" />
          <span>–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ</span>
        </div>
      </div>
    );
  }

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  if (loading) {
    return (
      <div className="metrics-loading-card">
        <div className="flex items-center justify-center">
          <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600 mr-3"></div>
          <span className="text-blue-700 text-sm font-medium">–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç—Ä–∏–∫...</span>
        </div>
      </div>
    );
  }

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
  if (error) {
    return (
      <div className="metrics-error-card">
        <div className="flex items-center justify-between">
          <div className="flex items-center text-red-700 text-sm">
            <AlertCircle className="h-4 w-4 mr-2 flex-shrink-0" />
            <span>–ù–µ—Ç –º–µ—Ç—Ä–∏–∫</span>
          </div>
          {showRefresh && (
            <button
              onClick={handleRefresh}
              className="metric-refresh-btn text-red-600 hover:text-red-800 p-1 rounded hover:bg-red-100"
              title="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É"
            >
              <RefreshCw className="h-3 w-3" />
            </button>
          )}
        </div>
        {!compact && (
          <div className="text-xs text-red-600 mt-1 opacity-75">{error}</div>
        )}
      </div>
    );
  }

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑ –º–µ—Ç—Ä–∏–∫
  if (!filteredMetrics || !filteredMetrics.found) {
    return (
      <div className="bg-gray-50 rounded-lg p-3 border border-gray-200">
        <div className="flex items-center justify-between">
          <div className="flex items-center text-gray-600 text-sm">
            <BarChart3 className="h-4 w-4 mr-2" />
            <span>–ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</span>
          </div>
          {showRefresh && (
            <button
              onClick={handleRefresh}
              className="metric-refresh-btn text-gray-500 hover:text-gray-700 p-1 rounded hover:bg-gray-100"
              title="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∏—Ç—å"
            >
              <RefreshCw className="h-3 w-3" />
            </button>
          )}
        </div>
        {period === '4days' && (
          <div className="text-xs text-gray-500 mt-1">
            –ó–∞ –ø–µ—Ä–≤—ã–µ 4 –¥–Ω—è –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
          </div>
        )}
      </div>
    );
  }

  const metrics = filteredMetrics.data;

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ –∫—Ä–∞—Å–∏–≤–æ–º –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ
  return (
    <div className="creative-metrics-compact metrics-success-card">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
      <div className="flex items-center justify-between mb-3">
        <div className="flex items-center text-green-700">
          <CheckCircle className="h-4 w-4 mr-2 text-green-600" />
          <span className="font-semibold text-sm">
            –ú–µ—Ç—Ä–∏–∫–∏ —Ä–µ–∫–ª–∞–º—ã
            {period === '4days' && (
              <span className="ml-1 text-xs text-blue-600">(4 –¥–Ω—è)</span>
            )}
          </span>
        </div>
        <div className="flex items-center space-x-2">
          {lastUpdated && (
            <div className="flex items-center text-gray-500 text-xs">
              <Clock className="h-3 w-3 mr-1" />
              <span>
                {lastUpdated.toLocaleTimeString('ru-RU', {
                  hour: '2-digit',
                  minute: '2-digit'
                })}
              </span>
            </div>
          )}
          {showRefresh && (
            <button
              onClick={handleRefresh}
              className="metric-refresh-btn text-gray-500 hover:text-gray-700 p-1 rounded-full hover:bg-white/50"
              title="–û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏"
            >
              <RefreshCw className="h-3 w-3" />
            </button>
          )}
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ —Å–µ—Ç–∫–µ 3x2 */}
      <div className="metrics-grid mb-3">
        {/* –ü–µ—Ä–≤—ã–π —Ä—è–¥ - –≥–ª–∞–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ */}
        <div className="metric-card-mini metric-leads">
          <div className="flex items-center justify-center mb-1">
            <Target className="h-3 w-3 text-blue-600 metric-icon" />
          </div>
          <div className="metric-value-large text-blue-700">
            {metrics.formatted.leads}
          </div>
          <div className="metric-label-mini text-blue-600">–õ–∏–¥—ã</div>
        </div>

        <div className="metric-card-mini metric-cpl">
          <div className="flex items-center justify-center mb-1">
            <DollarSign className="h-3 w-3 text-green-600 metric-icon" />
          </div>
          <div className="metric-value-large text-green-700">
            {metrics.formatted.cpl}
          </div>
          <div className="metric-label-mini text-green-600">CPL</div>
        </div>

        <div className="metric-card-mini metric-cost">
          <div className="flex items-center justify-center mb-1">
            <DollarSign className="h-3 w-3 text-purple-600 metric-icon" />
          </div>
          <div className="metric-value-large text-purple-700">
            {metrics.formatted.cost}
          </div>
          <div className="metric-label-mini text-purple-600">–†–∞—Å—Ö–æ–¥—ã</div>
        </div>

        {/* –í—Ç–æ—Ä–æ–π —Ä—è–¥ - –ø–æ–∫–∞–∑—ã, –∫–ª–∏–∫–∏, CTR */}
        <div className="metric-card-mini metric-shows">
          <div className="flex items-center justify-center mb-1">
            <Eye className="h-3 w-3 text-indigo-600 metric-icon" />
          </div>
          <div className="metric-value-medium text-indigo-700">
            {metrics.formatted.impressions}
          </div>
          <div className="metric-label-mini text-indigo-600">–ü–æ–∫–∞–∑—ã</div>
        </div>

        <div className="metric-card-mini metric-duration">
          <div className="flex items-center justify-center mb-1">
            <Clock className="h-3 w-3 text-teal-600 metric-icon" />
          </div>
          <div className="metric-value-medium text-teal-700">
            {metrics.formatted.avg_duration}
          </div>
          <div className="metric-label-mini text-teal-600">–î–ª–∏—Ç.</div>
        </div>

        <div className="metric-card-mini metric-ctr">
          <div className="flex items-center justify-center mb-1">
            <TrendingUp className="h-3 w-3 text-pink-600 metric-icon" />
          </div>
          <div className="metric-value-medium text-pink-700">
            {metrics.formatted.ctr}
          </div>
          <div className="metric-label-mini text-pink-600">CTR</div>
        </div>
      </div>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É */}
      <div className="metrics-grid-additional">
        <div className="text-center">
          <div className="text-xs font-medium text-gray-700">{metrics.formatted.clicks}</div>
          <div className="text-xs text-gray-500 font-medium">–ö–ª–∏–∫–∏</div>
        </div>
        
        <div className="text-center">
          <div className="text-xs font-medium text-gray-700">{metrics.formatted.cpc}</div>
          <div className="text-xs text-gray-500 font-medium">CPC</div>
        </div>
        
        <div className="text-center">
          <div className="text-xs font-medium text-gray-700">{metrics.formatted.cpm}</div>
          <div className="text-xs text-gray-500 font-medium">CPM</div>
        </div>
        
        <div className="text-center">
          <div className="text-xs font-medium text-gray-700">{metrics.formatted.days}</div>
          <div className="text-xs text-gray-500 font-medium">–î–Ω–µ–π</div>
        </div>
      </div>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      {!compact && metrics.videoName && (
        <div className="mt-3 pt-2 border-t border-white/30">
          <div className="text-xs text-gray-600 truncate" title={metrics.videoName}>
            <span className="font-medium">–í–∏–¥–µ–æ:</span> {metrics.videoName}
          </div>
          {metrics.updatedAt && (
            <div className="text-xs text-gray-500 mt-1">
              –û–±–Ω–æ–≤–ª–µ–Ω–æ: {metrics.updatedAt}
            </div>
          )}
          {period === '4days' && metrics.period === '4days' && (
            <div className="text-xs text-blue-600 mt-1 font-medium">
              üìä –ü–µ—Ä–∏–æ–¥: –ü–µ—Ä–≤—ã–µ 4 –¥–Ω—è
            </div>
          )}
        </div>
      )}
    </div>
  );
}

export default CreativeMetrics;
