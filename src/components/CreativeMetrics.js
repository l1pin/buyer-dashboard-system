// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ
// –ó–∞–º–µ–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ src/components/CreativeMetrics.js

import React, { useState, useEffect } from 'react';
import { MetricsService } from '../services/metricsService';
import { 
  RefreshCw,
  AlertCircle,
  CheckCircle,
  Clock,
  BarChart3
} from 'lucide-react';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º
 */
function CreativeMetrics({ videoTitle, showRefresh = true, compact = false }) {
  const [metrics, setMetrics] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [lastUpdated, setLastUpdated] = useState(null);

  useEffect(() => {
    if (videoTitle && !videoTitle.startsWith('–í–∏–¥–µ–æ ')) {
      loadMetrics();
    }
  }, [videoTitle]);

  const loadMetrics = async () => {
    if (!videoTitle || videoTitle.startsWith('–í–∏–¥–µ–æ ')) {
      return;
    }

    setLoading(true);
    setError('');

    try {
      console.log(`üîç –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –≤–∏–¥–µ–æ: ${videoTitle}`);
      
      const result = await MetricsService.getVideoMetrics(videoTitle);
      
      if (result.found) {
        setMetrics(result.data);
        setLastUpdated(new Date());
        setError('');
      } else {
        setError(result.error || '–ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        setMetrics(null);
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫:', err);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + err.message);
      setMetrics(null);
    } finally {
      setLoading(false);
    }
  };

  const handleRefresh = () => {
    loadMetrics();
  };

  // –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ
  if (!videoTitle || videoTitle.startsWith('–í–∏–¥–µ–æ ')) {
    return (
      <div className={`text-xs text-gray-500 ${compact ? 'space-y-1' : 'space-y-1'}`}>
        <div>–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ</div>
      </div>
    );
  }

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  if (loading) {
    return (
      <div className={`text-xs ${compact ? 'space-y-1' : 'space-y-1'}`}>
        <div className="flex items-center text-blue-600">
          <div className="animate-spin rounded-full h-3 w-3 border-b border-blue-600 mr-1"></div>
          <span>–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç—Ä–∏–∫...</span>
        </div>
      </div>
    );
  }

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
  if (error) {
    return (
      <div className={`text-xs ${compact ? 'space-y-1' : 'space-y-1'}`}>
        <div className="flex items-center justify-between">
          <div className="flex items-center text-red-600">
            <AlertCircle className="h-3 w-3 mr-1" />
            <span>–ù–µ—Ç –º–µ—Ç—Ä–∏–∫</span>
          </div>
          {showRefresh && (
            <button
              onClick={handleRefresh}
              className="text-red-600 hover:text-red-800 transition-colors duration-200"
              title="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É"
            >
              <RefreshCw className="h-3 w-3" />
            </button>
          )}
        </div>
        {!compact && (
          <div className="text-xs text-red-500">{error}</div>
        )}
      </div>
    );
  }

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑ –º–µ—Ç—Ä–∏–∫
  if (!metrics) {
    return (
      <div className={`text-xs ${compact ? 'space-y-1' : 'space-y-1'}`}>
        <div className="flex items-center justify-between">
          <div className="flex items-center text-gray-500">
            <BarChart3 className="h-3 w-3 mr-1" />
            <span>–ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</span>
          </div>
          {showRefresh && (
            <button
              onClick={handleRefresh}
              className="text-gray-500 hover:text-gray-700 transition-colors duration-200"
              title="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∏—Ç—å"
            >
              <RefreshCw className="h-3 w-3" />
            </button>
          )}
        </div>
      </div>
    );
  }

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º
  return (
    <div className={`text-xs ${compact ? 'space-y-0.5' : 'space-y-1'}`}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º */}
      <div className="flex items-center justify-between mb-1">
        <div className="flex items-center text-green-600">
          <CheckCircle className="h-3 w-3 mr-1" />
          <span className="font-medium">–ú–µ—Ç—Ä–∏–∫–∏:</span>
        </div>
        <div className="flex items-center space-x-1">
          {lastUpdated && (
            <div className="flex items-center text-gray-400">
              <Clock className="h-2 w-2 mr-1" />
              <span className="text-xs">
                {lastUpdated.toLocaleTimeString('ru-RU', {
                  hour: '2-digit',
                  minute: '2-digit'
                })}
              </span>
            </div>
          )}
          {showRefresh && (
            <button
              onClick={handleRefresh}
              className="text-gray-400 hover:text-gray-600 transition-colors duration-200"
              title="–û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏"
            >
              <RefreshCw className="h-3 w-3" />
            </button>
          )}
        </div>
      </div>

      {/* –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º –≤ —Å—Ç–æ–ª–±–∏–∫ */}
      <div className="space-y-0.5">
        <div>
          <span className="font-medium text-gray-700">–õ–∏–¥—ã:</span>
          <span className="ml-1 text-blue-700 font-medium">{metrics.formatted.leads}</span>
        </div>
        
        <div>
          <span className="font-medium text-gray-700">CPL:</span>
          <span className="ml-1 text-green-700 font-medium">{metrics.formatted.cpl}</span>
        </div>
        
        <div>
          <span className="font-medium text-gray-700">–†–∞—Å—Ö.:</span>
          <span className="ml-1 text-purple-700 font-medium">{metrics.formatted.cost}</span>
        </div>
        
        <div>
          <span className="font-medium text-gray-700">CTR:</span>
          <span className="ml-1 text-orange-700 font-medium">{metrics.formatted.ctr}</span>
        </div>
        
        <div>
          <span className="font-medium text-gray-700">CPC:</span>
          <span className="ml-1 text-indigo-700 font-medium">{metrics.formatted.cpc}</span>
        </div>
        
        <div>
          <span className="font-medium text-gray-700">CPM:</span>
          <span className="ml-1 text-pink-700 font-medium">{metrics.formatted.cpm}</span>
        </div>

        {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π */}
        <div>
          <span className="font-medium text-gray-700">–î–Ω–µ–π:</span>
          <span className="ml-1 text-gray-800 font-medium">{metrics.formatted.days}</span>
        </div>
      </div>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      {!compact && metrics.videoName && (
        <div className="mt-2 pt-1 border-t border-gray-100">
          <div className="text-xs text-gray-500 truncate" title={metrics.videoName}>
            <span className="font-medium">–í–∏–¥–µ–æ:</span> {metrics.videoName}
          </div>
          {metrics.updatedAt && (
            <div className="text-xs text-gray-400 mt-0.5">
              –û–±–Ω–æ–≤–ª–µ–Ω–æ: {metrics.updatedAt}
            </div>
          )}
        </div>
      )}
    </div>
  );
}

export default CreativeMetrics;
