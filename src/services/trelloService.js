// src/services/trelloService.js
// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Trello API

const TRELLO_CONFIG = {
  key: "e83894111117e54746d899c1fc2f7043",
  token: "ATTAb29683ffc0c87de7b5d1ce766ca8c2d28a61b3c722660564d74dae0a955456aeED83F79A",
  boardId: "JWuFAH6M"
};

class TrelloService {
  constructor() {
    this.baseUrl = 'https://api.trello.com/1';
    this.listCache = new Map(); // –ö—ç—à –∫–æ–ª–æ–Ω–æ–∫
    this.cardCache = new Map(); // –ö—ç—à —Å—Ç–∞—Ç—É—Å–æ–≤ –∫–∞—Ä—Ç–æ—á–µ–∫
    this.cacheExpiry = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
  }

  // –ò–∑–≤–ª–µ—á—å ID –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ —Å—Å—ã–ª–∫–∏ Trello
  extractCardId(trelloLink) {
    if (!trelloLink) return null;
    
    const link = trelloLink.trim();
    
    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
    // https://trello.com/c/ABC123/–Ω–∞–∑–≤–∞–Ω–∏–µ
    // https://trello.com/c/ABC123
    // trello.com/c/ABC123/–Ω–∞–∑–≤–∞–Ω–∏–µ
    // trello.com/c/ABC123
    const patterns = [
      /trello\.com\/c\/([a-zA-Z0-9]+)/i,
      /\/c\/([a-zA-Z0-9]+)/,
      /^([a-zA-Z0-9]{8,})$/  // –ü—Ä–æ—Å—Ç–æ ID
    ];
    
    for (const pattern of patterns) {
      const match = link.match(pattern);
      if (match) {
        console.log(`‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω ID –∫–∞—Ä—Ç–æ—á–∫–∏: ${match[1]} –∏–∑ ${link}`);
        return match[1];
      }
    }
    
    console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–∑ —Å—Å—ã–ª–∫–∏: ${link}`);
    return null;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–æ—Å–∫–∏
  async getBoardLists() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      const cached = this.listCache.get('lists');
      if (cached && Date.now() - cached.timestamp < this.cacheExpiry) {
        return cached.data;
      }

      const url = `${this.baseUrl}/boards/${TRELLO_CONFIG.boardId}/lists?key=${TRELLO_CONFIG.key}&token=${TRELLO_CONFIG.token}`;
      const response = await fetch(url);
      
      if (!response.ok) {
        throw new Error(`Trello API error: ${response.status}`);
      }

      const lists = await response.json();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      this.listCache.set('lists', {
        data: lists,
        timestamp: Date.now()
      });

      return lists;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ Trello:', error);
      return [];
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
  async getCardStatus(cardId) {
    try {
      if (!cardId) {
        console.warn('‚ö†Ô∏è getCardStatus: cardId –ø—É—Å—Ç–æ–π');
        return null;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      const cached = this.cardCache.get(cardId);
      if (cached && Date.now() - cached.timestamp < this.cacheExpiry) {
        console.log(`üì¶ –°—Ç–∞—Ç—É—Å –∫–∞—Ä—Ç–æ—á–∫–∏ ${cardId} –∏–∑ –∫—ç—à–∞`);
        return cached.data;
      }

      console.log(`üîÑ –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ ${cardId}...`);
      const url = `${this.baseUrl}/cards/${cardId}?key=${TRELLO_CONFIG.key}&token=${TRELLO_CONFIG.token}&fields=idList,name`;
      const response = await fetch(url);
      
      if (!response.ok) {
        if (response.status === 404) {
          console.warn(`‚ö†Ô∏è –ö–∞—Ä—Ç–æ—á–∫–∞ ${cardId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (404)`);
          return null;
        }
        if (response.status === 401) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Trello API (401) - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –∏ —Ç–æ–∫–µ–Ω');
          return null;
        }
        console.error(`‚ùå Trello API error ${response.status} –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ ${cardId}`);
        throw new Error(`Trello API error: ${response.status}`);
      }

      const card = await response.json();
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ ${cardId}:`, {
        name: card.name,
        listId: card.idList
      });
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
      const lists = await this.getBoardLists();
      const list = lists.find(l => l.id === card.idList);
      
      if (!list) {
        console.warn(`‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ ${card.idList} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ ${cardId}`);
      }
      
      const status = {
        listId: card.idList,
        listName: list ? list.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞',
        cardName: card.name
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      this.cardCache.set(cardId, {
        data: status,
        timestamp: Date.now()
      });

      console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –∫–∞—Ä—Ç–æ—á–∫–∏ ${cardId}: ${status.listName}`);
      return status;
    } catch (error) {
      console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ ${cardId}:`, error);
      return null;
    }
  }

  // –ë–∞—Ç—á–µ–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∫–∞—Ä—Ç–æ—á–µ–∫ (–ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û)
  async getBatchCardStatuses(trelloLinks) {
    try {
      console.log(`üéØ –ë–∞—Ç—á–µ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è ${trelloLinks.length} —Å—Å—ã–ª–æ–∫...`);

      const cardIds = trelloLinks
        .map(link => {
          const id = this.extractCardId(link);
          if (!id) {
            console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–∑: ${link}`);
          }
          return id;
        })
        .filter(id => id !== null);

      console.log(`‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ ${cardIds.length} –≤–∞–ª–∏–¥–Ω—ã—Ö ID –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ ${trelloLinks.length} —Å—Å—ã–ª–æ–∫`);

      if (cardIds.length === 0) {
        console.warn('‚ö†Ô∏è –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö ID –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞');
        return new Map();
      }

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑
      console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–æ–Ω–æ–∫...');
      const lists = await this.getBoardLists();
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${lists.length} –∫–æ–ª–æ–Ω–æ–∫:`, lists.map(l => l.name));

      // üöÄ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ï –∑–∞–ø—Ä–æ—Å—ã —Å—Ç–∞—Ç—É—Å–æ–≤ (–ë–´–°–¢–†–û!)
      console.log('‚ö° –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...');
      const startTime = Date.now();
      
      const promises = cardIds.map(cardId => 
        this.getCardStatus(cardId).catch(error => {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ ${cardId}:`, error);
          return null;
        })
      );

      const results = await Promise.allSettled(promises);
      
      const statusMap = new Map();
      let successCount = 0;
      let failCount = 0;

      results.forEach((result, index) => {
        const cardId = cardIds[index];
        
        if (result.status === 'fulfilled' && result.value) {
          statusMap.set(cardId, result.value);
          successCount++;
        } else {
          failCount++;
        }
      });

      const duration = Date.now() - startTime;
      console.log(`üéâ –ë–∞—Ç—á–µ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${duration}ms: —É—Å–ø–µ—à–Ω–æ ${successCount}, –æ—à–∏–±–æ–∫ ${failCount}`);
      
      return statusMap;

    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–∞—Ç—á–µ–≤–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤:', error);
      return new Map();
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –¥–æ—Å–∫–µ (–¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  async getBoardActions(since = null) {
    try {
      const sinceParam = since ? `&since=${since}` : '&limit=100';
      const url = `${this.baseUrl}/boards/${TRELLO_CONFIG.boardId}/actions?key=${TRELLO_CONFIG.key}&token=${TRELLO_CONFIG.token}&filter=updateCard${sinceParam}`;
      
      const response = await fetch(url);
      
      if (!response.ok) {
        throw new Error(`Trello API error: ${response.status}`);
      }

      const actions = await response.json();
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ (listAfter/listBefore)
      const cardMoves = actions.filter(action => 
        action.type === 'updateCard' && 
        action.data.listAfter && 
        action.data.listBefore &&
        action.data.listAfter.id !== action.data.listBefore.id
      );

      return cardMoves;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –¥–æ—Å–∫–∏:', error);
      return [];
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
  async checkCardsForChanges(cardIds) {
    try {
      if (!cardIds || cardIds.length === 0) {
        return new Map();
      }

      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è ${cardIds.length} –∫–∞—Ä—Ç–æ—á–µ–∫...`);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –¥–æ—Å–∫–µ
      const actions = await this.getBoardActions();
      
      // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
      const changedCards = new Set();
      const changedStatuses = new Map();
      
      actions.forEach(action => {
        const cardId = action.data.card.id;
        
        if (cardIds.includes(cardId)) {
          changedCards.add(cardId);
          changedStatuses.set(cardId, {
            listId: action.data.listAfter.id,
            listName: action.data.listAfter.name,
            cardName: action.data.card.name,
            movedAt: new Date(action.date)
          });
        }
      });

      if (changedCards.size > 0) {
        console.log(`üîî –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ ${changedCards.size} –∫–∞—Ä—Ç–æ—á–∫–∞—Ö:`, Array.from(changedCards));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        changedStatuses.forEach((status, cardId) => {
          this.cardCache.set(cardId, {
            data: status,
            timestamp: Date.now()
          });
        });
      }

      return changedStatuses;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–∞—Ä—Ç–æ—á–µ–∫:', error);
      return new Map();
    }
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
  clearCache() {
    this.listCache.clear();
    this.cardCache.clear();
  }
}

export const trelloService = new TrelloService();
