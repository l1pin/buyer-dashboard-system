// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π MetricsService.js - –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
// –ó–∞–º–µ–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ src/services/metricsService.js

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
const getApiUrl = () => {
  // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º Netlify —Ñ—É–Ω–∫—Ü–∏—é
  if (process.env.NODE_ENV === 'production' || window.location.hostname !== 'localhost') {
    return '/.netlify/functions/metrics-proxy';
  }
  
  // –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º Netlify —Ñ—É–Ω–∫—Ü–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
  return '/.netlify/functions/metrics-proxy';
};

const METRICS_API_URL = getApiUrl();
const TIMEZONE = "Europe/Kiev";

export class MetricsService {
  /**
   * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –í–°–ï–• –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤–∏–¥–µ–æ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º)
   * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—é –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
   */
  static buildDetailedSqlForVideo(videoName) {
    const escapedVideoName = this.sqlEscapeLiteral(videoName);
    
    return `
      SELECT
        adv_date,
        COALESCE(SUM(valid), 0)                       AS leads,
        COALESCE(SUM(cost), 0)                        AS cost,
        COALESCE(SUM(clicks_on_link_tracker), 0)      AS clicks,
        COALESCE(SUM(showed), 0)                      AS impressions
      FROM ads_collection
      WHERE video_name='${escapedVideoName}'
        AND (cost > 0 OR valid > 0 OR showed > 0 OR clicks_on_link_tracker > 0)
      GROUP BY adv_date
      ORDER BY adv_date ASC
    `;
  }

  /**
   * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è SQL
   */
  static sqlEscapeLiteral(str) {
    return String(str).replace(/'/g, "''");
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Netlify –ø—Ä–æ–∫—Å–∏
   */
  static async fetchFromDatabase(sql) {
    if (!/^(\s*select\b)/i.test(sql)) {
      throw new Error("–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ SELECT-–∑–∞–ø—Ä–æ—Å—ã.");
    }

    const options = {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      },
      body: JSON.stringify({ sql }),
    };

    try {
      console.log('üì° –ó–∞–ø—Ä–æ—Å –∫ –ø—Ä–æ–∫—Å–∏ —Ñ—É–Ω–∫—Ü–∏–∏:', METRICS_API_URL);
      console.log('üîç SQL –∑–∞–ø—Ä–æ—Å:', sql.substring(0, 200) + (sql.length > 200 ? '...' : ''));
      
      const response = await fetch(METRICS_API_URL, options);
      
      if (!response.ok) {
        const errorText = await response.text();
        let errorMessage;
        
        try {
          const errorJson = JSON.parse(errorText);
          errorMessage = errorJson.error || errorJson.details || `HTTP ${response.status}`;
        } catch {
          errorMessage = `HTTP ${response.status}: ${response.statusText}`;
        }
        
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø—Ä–æ–∫—Å–∏:', errorMessage);
        throw new Error(errorMessage);
      }

      const text = await response.text();
      if (!text || !text.trim()) {
        console.log('‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä–æ–∫—Å–∏ —Ñ—É–Ω–∫—Ü–∏–∏');
        return [];
      }

      let json;
      try {
        json = JSON.parse(text);
      } catch (e) {
        console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π JSON –æ—Ç –ø—Ä–æ–∫—Å–∏ —Ñ—É–Ω–∫—Ü–∏–∏:', text.substring(0, 200));
        throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π JSON –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: " + e.message);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ
      if (json && typeof json === "object" && json.error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ API:', json.error, json.details);
        throw new Error("–û—à–∏–±–∫–∞ API: " + (json.details || json.error));
      }

      const result = Array.isArray(json) ? json : [];
      console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä–æ–∫—Å–∏ —Ñ—É–Ω–∫—Ü–∏–∏, –∑–∞–ø–∏—Å–µ–π:', result.length);
      
      return result;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏:', error);
      
      // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      if (error.name === 'TypeError' && error.message.includes('Failed to fetch')) {
        throw new Error('–°–µ—Ä–≤–∏—Å –º–µ—Ç—Ä–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
      }
      
      throw error;
    }
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫ –º–∞—Å—Å–∏–≤—É –¥–Ω–µ–π
   */
  static normalizeDetailedRows(dbResponse) {
    if (!dbResponse || dbResponse.length === 0) {
      console.log('‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
      return [];
    }

    console.log('üîÑ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', JSON.stringify(dbResponse.slice(0, 2), null, 2));

    let normalizedRows = [];

    // –°–ª—É—á–∞–π A: –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
    if (typeof dbResponse[0] === "object" && !Array.isArray(dbResponse[0])) {
      normalizedRows = dbResponse.map(row => ({
        date: row.adv_date,
        leads: Number(row.leads) || 0,
        cost: Number(row.cost) || 0,
        clicks: Number(row.clicks) || 0,
        impressions: Number(row.impressions) || 0
      }));
    } else {
      // –°–ª—É—á–∞–π B: [headers, ...rows]
      const headers = dbResponse[0];
      const dataRows = dbResponse.slice(1);
      
      normalizedRows = dataRows.map(row => {
        const map = {};
        headers.forEach((h, i) => (map[h] = row[i]));
        
        return {
          date: map.adv_date,
          leads: Number(map.leads) || 0,
          cost: Number(map.cost) || 0,
          clicks: Number(map.clicks) || 0,
          impressions: Number(map.impressions) || 0
        };
      });
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–ø–µ—Ä–≤—ã–µ –¥–Ω–∏ —Å–Ω–∞—á–∞–ª–∞)
    normalizedRows.sort((a, b) => new Date(a.date) - new Date(b.date));

    console.log('‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ –¥–Ω–µ–π:', normalizedRows.length);
    if (normalizedRows.length > 0) {
      console.log('üìÖ –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å:', normalizedRows[0].date, normalizedRows[0]);
      console.log('üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å:', normalizedRows[normalizedRows.length - 1].date, normalizedRows[normalizedRows.length - 1]);
    }
    
    return normalizedRows;
  }

  /**
   * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–µ—Ä–∏–æ–¥—É –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞
   */
  static filterDataByPeriod(dailyData, period) {
    if (period === 'all' || !dailyData || dailyData.length === 0) {
      console.log(`üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ ${dailyData?.length || 0} –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö`);
      return dailyData;
    }

    if (period === '4days') {
      // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 4 –¥–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      const filtered = dailyData.slice(0, 4);
      console.log(`üîÑ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –≤–∑—è–ª–∏ –ø–µ—Ä–≤—ã–µ 4 –¥–Ω—è –∏–∑ ${dailyData.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö`);
      console.log('üìÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏:', filtered.map(d => d.date));
      return filtered;
    }

    return dailyData;
  }

  /**
   * –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
   */
  static aggregateDailyData(dailyData) {
    if (!dailyData || dailyData.length === 0) {
      return {
        leads: 0,
        cost: 0,
        clicks: 0,
        impressions: 0,
        days_count: 0
      };
    }

    const aggregated = dailyData.reduce((acc, day) => ({
      leads: acc.leads + day.leads,
      cost: acc.cost + day.cost,
      clicks: acc.clicks + day.clicks,
      impressions: acc.impressions + day.impressions,
      days_count: acc.days_count + 1
    }), {
      leads: 0,
      cost: 0,
      clicks: 0,
      impressions: 0,
      days_count: 0
    });

    console.log('üìä –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', aggregated);
    return aggregated;
  }

  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
   */
  static computeDerivedMetrics({ leads, cost, clicks, impressions, days_count }) {
    const fix2 = (x) => Number.isFinite(x) ? Number(x.toFixed(2)) : 0;
    
    const CPL = leads > 0 ? cost / leads : 0;
    const CTR = impressions > 0 ? (clicks / impressions) * 100 : 0;
    const CPC = clicks > 0 ? cost / clicks : 0;
    const CPM = impressions > 0 ? (cost / impressions) * 1000 : 0;

    const computed = {
      leads,
      cost: fix2(cost),
      clicks,
      impressions,
      days_count,
      cpl: fix2(CPL),
      ctr_percent: fix2(CTR),
      cpc: fix2(CPC),
      cpm: fix2(CPM)
    };
    
    console.log('üìä –í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:', computed);
    return computed;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  static formatMetrics(metrics) {
    const formatInt = (n) => String(Math.round(Number(n) || 0));
    const formatMoney = (n) => (Number(n) || 0).toFixed(2) + "$";
    const formatPercent = (n) => (Number(n) || 0).toFixed(2) + "%";

    const formatted = {
      leads: formatInt(metrics.leads),
      cpl: formatMoney(metrics.cpl),
      cost: formatMoney(metrics.cost),
      ctr: formatPercent(metrics.ctr_percent),
      cpc: formatMoney(metrics.cpc),
      cpm: formatMoney(metrics.cpm),
      clicks: formatInt(metrics.clicks),
      impressions: formatInt(metrics.impressions),
      days: formatInt(metrics.days_count) + " –¥–Ω."
    };
    
    console.log('üé® –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:', formatted);
    return formatted;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä–∏–æ–¥–∞
   * –ù–û–í–´–ô –ü–û–î–•–û–î: –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
   */
  static async getVideoMetrics(videoName, period = 'all') {
    if (!videoName || typeof videoName !== 'string') {
      throw new Error('–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
    }

    console.log(`üîç –ü–æ–∏—Å–∫ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –≤–∏–¥–µ–æ: "${videoName}" –∑–∞ –ø–µ—Ä–∏–æ–¥: ${period}`);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
      const sql = this.buildDetailedSqlForVideo(videoName);
      console.log('üîç –ü–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π SQL:', sql);
      
      const dbResponse = await this.fetchFromDatabase(sql);
      
      if (!dbResponse || dbResponse.length === 0) {
        console.log(`‚ùå –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –≤–∏–¥–µ–æ: "${videoName}"`);
        return {
          found: false,
          error: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
        };
      }

      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
      const allDailyData = this.normalizeDetailedRows(dbResponse);
      
      if (allDailyData.length === 0) {
        console.log(`‚ùå –ù–µ—Ç –¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–¥–µ–æ: "${videoName}"`);
        return {
          found: false,
          error: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'
        };
      }

      // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É
      const filteredData = this.filterDataByPeriod(allDailyData, period);
      
      if (filteredData.length === 0) {
        console.log(`‚ùå –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞: ${period}`);
        return {
          found: false,
          error: `–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥: ${period === '4days' ? '–ø–µ—Ä–≤—ã–µ 4 –¥–Ω—è' : period}`
        };
      }

      // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const aggregates = this.aggregateDailyData(filteredData);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—å –∫–∞–∫–∞—è-—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      if (aggregates.leads === 0 && aggregates.cost === 0 && 
          aggregates.clicks === 0 && aggregates.impressions === 0) {
        console.log(`‚ùå –í—Å–µ –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞–≤–Ω—ã 0 –¥–ª—è –≤–∏–¥–µ–æ: "${videoName}" –∑–∞ –ø–µ—Ä–∏–æ–¥: ${period}`);
        return {
          found: false,
          error: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥'
        };
      }
      
      const metrics = this.computeDerivedMetrics(aggregates);
      const formatted = this.formatMetrics(metrics);
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ: "${videoName}" –∑–∞ –ø–µ—Ä–∏–æ–¥: ${period}`);
      console.log(`üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–Ω–µ–π: ${filteredData.length} –∏–∑ ${allDailyData.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö`);
      
      return {
        found: true,
        data: {
          raw: metrics,
          formatted: formatted,
          videoName: videoName,
          period: period,
          dailyData: filteredData, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
          totalDaysAvailable: allDailyData.length,
          updatedAt: new Date().toLocaleString('ru-RU', {
            timeZone: TIMEZONE,
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
          })
        }
      };
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –¥–ª—è –≤–∏–¥–µ–æ: "${videoName}" –∑–∞ –ø–µ—Ä–∏–æ–¥: ${period}`, error);
      return {
        found: false,
        error: error.message
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ (–±–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞) —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä–∏–æ–¥–∞
   */
  static async getBatchVideoMetrics(videoNames, period = 'all') {
    if (!Array.isArray(videoNames)) {
      throw new Error('videoNames –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
    }

    console.log(`üîç –ë–∞—Ç—á–µ–≤—ã–π –ø–æ–∏—Å–∫ –º–µ—Ç—Ä–∏–∫ –¥–ª—è ${videoNames.length} –≤–∏–¥–µ–æ –∑–∞ –ø–µ—Ä–∏–æ–¥: ${period}`);
    console.log('üìã –°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–∏—Å–∫–∞:', videoNames.slice(0, 5).map(v => `"${v}"`).join(', ') + (videoNames.length > 5 ? '...' : ''));

    const results = await Promise.allSettled(
      videoNames.map(async (videoName, index) => {
        try {
          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –ø—Ä–æ–∫—Å–∏
          if (index > 0 && index % 5 === 0) {
            console.log(`‚è≥ –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ ${index} –∑–∞–ø—Ä–æ—Å–æ–≤...`);
            await new Promise(resolve => setTimeout(resolve, 500));
          } else if (index > 0) {
            await new Promise(resolve => setTimeout(resolve, 100));
          }
          
          console.log(`üìπ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ ${index + 1}/${videoNames.length}: "${videoName}"`);
          
          const result = await this.getVideoMetrics(videoName, period);
          
          console.log(`${result.found ? '‚úÖ' : '‚ùå'} –í–∏–¥–µ–æ ${index + 1}: ${result.found ? `–Ω–∞–π–¥–µ–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ (${result.data?.dailyData?.length || 0} –¥–Ω–µ–π)` : result.error}`);
          
          return {
            videoName,
            period,
            ...result
          };
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –≤–∏–¥–µ–æ ${index + 1}: "${videoName}"`, error);
          return {
            videoName,
            period,
            found: false,
            error: error.message
          };
        }
      })
    );

    const finalResults = results.map((result, index) => ({
      videoName: videoNames[index],
      period,
      ...(result.status === 'fulfilled' ? result.value : {
        found: false,
        error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ'
      })
    }));

    const successCount = finalResults.filter(r => r.found).length;
    const failureCount = finalResults.length - successCount;
    
    console.log(`‚úÖ –ë–∞—Ç—á–µ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${successCount}/${videoNames.length} –≤–∏–¥–µ–æ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥: ${period}`);
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —É—Å–ø–µ—à–Ω–æ - ${successCount}, –Ω–µ—É–¥–∞—á–Ω–æ - ${failureCount}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const successfulResults = finalResults.filter(r => r.found);
    if (successfulResults.length > 0) {
      const totalDays = successfulResults.reduce((sum, r) => sum + (r.data?.dailyData?.length || 0), 0);
      const avgDays = totalDays / successfulResults.length;
      console.log(`üìÖ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞ –≤–∏–¥–µ–æ: ${avgDays.toFixed(1)}`);
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (failureCount > 0) {
      const failures = finalResults.filter(r => !r.found).slice(0, 3);
      console.log('‚ùå –ü—Ä–∏–º–µ—Ä—ã –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:');
      failures.forEach(f => {
        console.log(`  - "${f.videoName}": ${f.error}`);
      });
    }

    return finalResults;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
   */
  static extractVideoName(fileName) {
    if (!fileName) return '';
    
    // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤
    const cleanName = fileName.replace(/\.(mp4|avi|mov|mkv|webm|m4v)$/i, '');
    return cleanName.trim();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API
   */
  static async checkApiStatus() {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API –º–µ—Ç—Ä–∏–∫...');
      
      // –î–µ–ª–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
      const testSql = "SELECT 1 as test LIMIT 1";
      const result = await this.fetchFromDatabase(testSql);
      
      if (result && Array.isArray(result)) {
        console.log('‚úÖ API –º–µ—Ç—Ä–∏–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        return { available: true, message: 'API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ' };
      } else {
        console.log('‚ö†Ô∏è API –º–µ—Ç—Ä–∏–∫ –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
        return { available: true, message: 'API –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π' };
      }
    } catch (error) {
      console.error('‚ùå API –º–µ—Ç—Ä–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
      return { 
        available: false, 
        error: error.message,
        message: 'API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å URL API –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
   */
  static getApiUrl() {
    return METRICS_API_URL;
  }

  /**
   * –£–õ–£–ß–®–ï–ù–ù–´–ô –ú–ï–¢–û–î: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
   */
  static async testVideoQuery(videoName, period = 'all') {
    console.log(`üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≤–∏–¥–µ–æ: "${videoName}" –∑–∞ –ø–µ—Ä–∏–æ–¥: ${period}`);
    
    try {
      // –°—Ç—Ä–æ–∏–º –ø—Ä–æ—Å—Ç–æ–π SQL –∑–∞–ø—Ä–æ—Å (–±–µ–∑ –ø–æ–¥–∑–∞–ø—Ä–æ—Å–æ–≤!)
      const sql = this.buildDetailedSqlForVideo(videoName);
      console.log('üîç SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø—Ä–æ—Å—Ç–æ–π, –±–µ–∑ –ø–æ–¥–∑–∞–ø—Ä–æ—Å–æ–≤):', sql);
      
      const result = await this.fetchFromDatabase(sql);
      console.log('üìä –°—ã—Ä–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', result);
      
      if (result && result.length > 0) {
        const dailyData = this.normalizeDetailedRows(result);
        console.log('üìÖ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', dailyData);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        const allPeriodData = this.filterDataByPeriod(dailyData, 'all');
        const fourDaysData = this.filterDataByPeriod(dailyData, '4days');
        
        console.log('üîÑ –î–∞–Ω–Ω—ã–µ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:', allPeriodData.length, '–¥–Ω–µ–π');
        console.log('üîÑ –î–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–≤—ã–µ 4 –¥–Ω—è:', fourDaysData.length, '–¥–Ω–µ–π');
        
        // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        const selectedData = period === '4days' ? fourDaysData : allPeriodData;
        const aggregated = this.aggregateDailyData(selectedData);
        console.log('üìà –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞:', aggregated);
        
        const computed = this.computeDerivedMetrics(aggregated);
        console.log('üéØ –í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:', computed);
        
        const formatted = this.formatMetrics(computed);
        console.log('üé® –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:', formatted);
        
        return { 
          success: true, 
          data: formatted, 
          sql, 
          rawResult: result,
          dailyData: selectedData,
          totalDaysAvailable: dailyData.length,
          daysUsed: selectedData.length
        };
      } else {
        console.log('‚ùå –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞');
        return { success: false, message: '–ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç', sql };
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ:', error);
      return { success: false, error: error.message, sql: this.buildDetailedSqlForVideo(videoName) };
    }
  }
}

export default MetricsService;
