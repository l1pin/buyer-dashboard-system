// src/services/metricsService.js - –ë–ê–¢–ß–ï–í–ê–Ø –í–ï–†–°–ò–Ø
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API —Å —á–∞–Ω–∫–∏–Ω–≥–æ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ

import { metricsAnalyticsService } from "../supabaseClient";

const getApiUrl = () => {
  if (
    process.env.NODE_ENV === "production" ||
    window.location.hostname !== "localhost"
  ) {
    return "/.netlify/functions/metrics-proxy";
  }
  return "/.netlify/functions/metrics-proxy";
};

const METRICS_API_URL = getApiUrl();
const TIMEZONE = "Europe/Kiev";

export class MetricsService {
  /**
   * –ù–û–í–´–ô –ë–ê–¢–ß–ï–í–´–ô –ú–ï–¢–û–î: –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
   */
  static async getBatchVideoMetrics(videoNames, options = {}) {
    const {
      dateFrom = null,
      dateTo = null,
      kind = "daily_first4_total", // daily | first4 | total | daily_first4_total
      useCache = true,
      useLike = false, // üÜï –†–µ–∂–∏–º LIKE –ø–æ–∏—Å–∫–∞
    } = options;

    if (!videoNames || videoNames.length === 0) {
      console.warn("‚ö†Ô∏è getBatchVideoMetrics: –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ videoNames");
      return { success: false, results: [] };
    }

    console.log(
      `üöÄ –ë–ê–¢–ß–ï–í–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞: ${videoNames.length} –≤–∏–¥–µ–æ, kind=${kind}, LIKE=${useLike}`
    );

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å —Å –º–∞—Å—Å–∏–≤–æ–º –∏–º—ë–Ω
      const requestBody = {
        video_names: videoNames,
        kind: kind,
        use_like: useLike, // üÜï –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–ª–∞–≥ LIKE
      };

      if (dateFrom) requestBody.date_from = dateFrom;
      if (dateTo) requestBody.date_to = dateTo;

      const startTime = Date.now();

      const response = await fetch(METRICS_API_URL, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
        },
        body: JSON.stringify(requestBody),
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`API error ${response.status}: ${errorText}`);
      }

      const data = await response.json();

      console.log(`üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API:`, {
        isArray: Array.isArray(data),
        length: Array.isArray(data) ? data.length : "not array",
        firstItem: Array.isArray(data) && data.length > 0 ? data[0] : null,
      });
      const elapsed = Date.now() - startTime;

      // –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      const cacheStatus = response.headers.get("X-Cache");
      const chunksProcessed = response.headers.get("X-Chunks-Processed");
      const totalRecords = response.headers.get("X-Total-Records");

      console.log(`‚úÖ –ë–ê–¢–ß–ï–í–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${elapsed}ms:`, {
        cache: cacheStatus,
        chunks: chunksProcessed,
        records: totalRecords || data.length,
        videosRequested: videoNames.length,
      });

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ video_name –∏ kind
      const resultsByVideo = this._groupBatchResults(data, videoNames);

      return {
        success: true,
        results: resultsByVideo,
        metadata: {
          elapsed,
          cache: cacheStatus,
          chunks: chunksProcessed,
          records: data.length,
        },
      };
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –±–∞—Ç—á–µ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏:", error);
      return {
        success: false,
        error: error.message,
        results: [],
      };
    }
  }

  /**
   * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –≤–∏–¥–µ–æ –∏ —Ç–∏–ø—É (daily/first4/total)
   */
  static _groupBatchResults(data, videoNames) {
    const grouped = new Map();

    console.log(`üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê _groupBatchResults:`, {
      dataCount: data?.length,
      videoNamesCount: videoNames?.length,
      dataType: typeof data,
      isArray: Array.isArray(data),
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
    videoNames.forEach((name) => {
      grouped.set(name, {
        videoName: name,
        daily: [],
        first4: null,
        total: null,
        found: false,
        noData: true,
      });
    });

    console.log(`üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${grouped.size} –≤–∏–¥–µ–æ –≤ Map`);

    if (!data || data.length === 0) {
      console.warn("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏!");
      return Array.from(grouped.values());
    }

    // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
    console.log("üìã –ü–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏ –∏–∑ data:");
    for (let i = 0; i < Math.min(3, data.length); i++) {
      console.log(`  [${i}]:`, {
        video_name: data[i].video_name,
        kind: data[i].kind,
        leads: data[i].leads,
        cost: data[i].cost,
        allKeys: Object.keys(data[i]),
      });
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –≤–∏–¥–µ–æ –∏–∑ videoNames
    console.log("üìã –ü–µ—Ä–≤—ã–µ 3 –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ videoNames:", videoNames.slice(0, 3));

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    let processedCount = 0;
    let skippedNoVideoName = 0;
    let newVideosAdded = 0;

    data.forEach((row, index) => {
      const {
        video_name,
        kind,
        adv_date,
        leads,
        cost,
        clicks,
        impressions,
        avg_duration,
      } = row;

      if (!video_name) {
        console.warn(`‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ ${index} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç video_name:`, row);
        skippedNoVideoName++;
        return;
      }

      // –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
      const hasExactMatch = grouped.has(video_name);

      if (!hasExactMatch) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ö–æ–∂–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        const similarNames = videoNames.filter(
          (name) =>
            name.toLowerCase().includes(video_name.toLowerCase()) ||
            video_name.toLowerCase().includes(name.toLowerCase())
        );

        if (similarNames.length > 0) {
          console.warn(
            `‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è "${video_name}", –ø–æ—Ö–æ–∂–∏–µ:`,
            similarNames
          );
        } else {
          console.warn(
            `‚ö†Ô∏è –í–∏–¥–µ–æ "${video_name}" –Ω–µ –±—ã–ª–æ –≤ videoNames, –¥–æ–±–∞–≤–ª—è–µ–º`
          );
        }

        grouped.set(video_name, {
          videoName: video_name,
          daily: [],
          first4: null,
          total: null,
          found: false,
          noData: true,
        });
        newVideosAdded++;
      }

      const entry = grouped.get(video_name);
      entry.found = true;
      entry.noData = false;
      processedCount++;

      const metrics = {
        date: adv_date,
        leads: Number(row.valid) || 0,
        cost: Number(cost) || 0,
        clicks: Number(row.clicks_on_link_tracker) || 0,
        impressions: Number(row.showed) || 0,
        avg_duration: Number(row.average_time_on_video) || 0,
        cost_from_sources: Number(row.cost_from_sources) || 0,
        clicks_on_link: Number(row.clicks_on_link) || 0,
      };

      if (kind === "daily") {
        entry.daily.push(metrics);
      } else if (kind === "first4") {
        entry.first4 = metrics;
      } else if (kind === "total") {
        entry.total = metrics;
      }
    });

    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedCount} –∑–∞–ø–∏—Å–µ–π`);
    console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ ${skippedNoVideoName} –∑–∞–ø–∏—Å–µ–π –±–µ–∑ video_name`);
    console.log(
      `‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ ${newVideosAdded} –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ (–Ω–µ –±—ã–ª–æ –≤ videoNames)`
    );

    // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const foundCount = Array.from(grouped.values()).filter(
      (v) => v.found
    ).length;
    const notFoundCount = grouped.size - foundCount;
    console.log(`üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
    console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω–æ: ${foundCount}`);
    console.log(`  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: ${notFoundCount}`);
    console.log(`  üì¶ –í—Å–µ–≥–æ –≤ Map: ${grouped.size}`);

    // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
    if (notFoundCount > 0) {
      const notFound = Array.from(grouped.values()).filter((v) => !v.found);
      console.log(
        "‚ùå –ü—Ä–∏–º–µ—Ä—ã –ù–ï –ù–ê–ô–î–ï–ù–ù–´–• –≤–∏–¥–µ–æ:",
        notFound.slice(0, 3).map((v) => v.videoName)
      );
    }

    return Array.from(grouped.values());
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ (–æ–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ –±–∞—Ç—á–µ–≤—ã–º –º–µ—Ç–æ–¥–æ–º)
   */
  static async getVideoMetricsRaw(
    videoName,
    useCache = true,
    creativeId = null,
    videoIndex = null,
    article = null
  ) {
    if (!videoName || typeof videoName !== "string") {
      throw new Error("–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à Supabase
    if (useCache && creativeId && videoIndex !== null) {
      try {
        const cached = await metricsAnalyticsService.getMetricsCache(
          creativeId,
          videoIndex,
          "all"
        );
        if (cached && cached.metrics_data) {
          console.log(
            `‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –∫—ç—à–∞ Supabase –¥–ª—è: ${videoName}`
          );
          return {
            found: true,
            data: cached.metrics_data,
            fromCache: true,
            cachedAt: cached.cached_at,
          };
        }
      } catch (cacheError) {
        console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫—ç—à–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ API:", cacheError);
      }
    }

    try {
      console.log(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —á–µ—Ä–µ–∑ –±–∞—Ç—á–µ–≤—ã–π API –¥–ª—è: ${videoName}`);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞—Ç—á–µ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
      const batchResult = await this.getBatchVideoMetrics([videoName], {
        kind: "daily_first4_total",
        useCache: true,
      });

      if (!batchResult.success || batchResult.results.length === 0) {
        return {
          found: false,
          error: batchResult.error || "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
        };
      }

      const videoData = batchResult.results[0];

      if (
        !videoData.found ||
        !videoData.daily ||
        videoData.daily.length === 0
      ) {
        return {
          found: false,
          error: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
        };
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ —Å—Ç–∞—Ä–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      const allDailyData = videoData.daily.map((d) => ({
        date: d.date,
        leads: d.valid || d.leads,
        cost: d.cost,
        clicks: d.clicks_on_link_tracker || d.clicks,
        impressions: d.showed || d.impressions,
        avg_duration: d.average_time_on_video || d.avg_duration,
        cost_from_sources: d.cost_from_sources,
        clicks_on_link: d.clicks_on_link,
      }));

      // –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è "all"
      const aggregatesAll = this.aggregateDailyData(allDailyData);
      const metricsAll = this.computeDerivedMetrics(aggregatesAll);
      const formattedAll = this.formatMetrics(metricsAll);

      const result = {
        found: true,
        data: {
          raw: metricsAll,
          formatted: formattedAll,
          allDailyData: allDailyData,
          dailyData: allDailyData,
          videoName: videoName,
          period: "all",
          updatedAt: new Date().toLocaleString("ru-RU", {
            timeZone: TIMEZONE,
            year: "numeric",
            month: "2-digit",
            day: "2-digit",
            hour: "2-digit",
            minute: "2-digit",
          }),
        },
        fromCache: false,
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à Supabase
      if (creativeId && videoIndex !== null) {
        try {
          console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ –∫—ç—à (–≤—Å–µ –≤—Ä–µ–º—è)`);

          // –ü–µ—Ä–∏–æ–¥ "all"
          await metricsAnalyticsService.saveMetricsCache(
            creativeId,
            article || videoName,
            videoIndex,
            videoName,
            result.data,
            "all"
          );

          // –ü–µ—Ä–∏–æ–¥ "4days" (–µ—Å–ª–∏ –µ—Å—Ç—å first4 –≤ –±–∞—Ç—á–µ–≤–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ)
          if (videoData.first4) {
            const first4Metrics = {
              leads: videoData.first4.leads,
              cost: videoData.first4.cost,
              clicks: videoData.first4.clicks,
              impressions: videoData.first4.impressions,
              avg_duration: videoData.first4.avg_duration,
              days_count: Math.min(4, allDailyData.length),
            };

            const derivedFirst4 = this.computeDerivedMetrics(first4Metrics);
            const formattedFirst4 = this.formatMetrics(derivedFirst4);

            const data4Days = {
              raw: derivedFirst4,
              formatted: formattedFirst4,
              allDailyData: allDailyData.slice(0, 4),
              dailyData: allDailyData.slice(0, 4),
              videoName: videoName,
              period: "4days",
              updatedAt: result.data.updatedAt,
            };

            await metricsAnalyticsService.saveMetricsCache(
              creativeId,
              article || videoName,
              videoIndex,
              videoName,
              data4Days,
              "4days"
            );

            console.log(`‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ "4 –¥–Ω—è" —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à`);
          }
        } catch (saveError) {
          console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à:", saveError);
        }
      }

      return result;
    } catch (error) {
      return {
        found: false,
        error: error.message,
      };
    }
  }

  /**
   * –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–µ—Ä–∏–æ–¥—É (–±–µ–∑ –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API)
   */
  static filterRawMetricsByPeriod(rawMetrics, targetPeriod) {
    if (!rawMetrics || !rawMetrics.found || !rawMetrics.data) {
      return {
        found: false,
        error: "–ù–µ—Ç —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏",
      };
    }

    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    const isFromCache = rawMetrics.data?.fromCache || rawMetrics.fromCache;
    const cachedPeriod = rawMetrics.data?.period || rawMetrics.period;

    if (isFromCache && cachedPeriod === targetPeriod) {
      console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ "${targetPeriod}"`);
      return {
        found: true,
        data: {
          ...rawMetrics.data,
          period: targetPeriod,
        },
      };
    }

    const allDailyData =
      rawMetrics.data.allDailyData || rawMetrics.data.dailyData || [];

    if (allDailyData.length === 0) {
      return {
        found: false,
        error: "–ù–µ—Ç –¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏",
      };
    }

    // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    const filteredData = this.filterDataByPeriod(allDailyData, targetPeriod);

    if (filteredData.length === 0) {
      return {
        found: false,
        error: `–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥: ${
          targetPeriod === "4days" ? "–ø–µ—Ä–≤—ã–µ 4 –¥–Ω—è" : targetPeriod
        }`,
      };
    }

    const aggregates = this.aggregateDailyData(filteredData);

    if (
      aggregates.leads === 0 &&
      aggregates.cost === 0 &&
      aggregates.clicks === 0 &&
      aggregates.impressions === 0
    ) {
      return {
        found: false,
        error: "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥",
      };
    }

    const metrics = this.computeDerivedMetrics(aggregates);
    const formatted = this.formatMetrics(metrics);

    return {
      found: true,
      data: {
        raw: metrics,
        formatted: formatted,
        dailyData: filteredData,
        allDailyData: allDailyData,
        period: targetPeriod,
        updatedAt: new Date().toLocaleString("ru-RU", {
          timeZone: TIMEZONE,
          year: "numeric",
          month: "2-digit",
          day: "2-digit",
          hour: "2-digit",
          minute: "2-digit",
        }),
      },
    };
  }

  /**
   * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–µ—Ä–∏–æ–¥—É
   */
  static filterDataByPeriod(dailyData, period) {
    if (!dailyData || dailyData.length === 0) {
      return [];
    }

    if (period === "all") {
      return dailyData;
    }

    if (period === "4days") {
      const daysToTake = Math.min(4, dailyData.length);
      return dailyData.slice(0, daysToTake);
    }

    return dailyData;
  }

  /**
   * –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  static aggregateDailyData(dailyData) {
    if (!dailyData || dailyData.length === 0) {
      return {
        leads: 0,
        cost: 0,
        clicks: 0,
        impressions: 0,
        avg_duration: 0,
        days_count: 0,
        cost_from_sources: 0,
        clicks_on_link: 0,
      };
    }

    const result = dailyData.reduce(
      (acc, day) => ({
        valid: acc.valid + day.valid,
        cost: acc.cost + day.cost,
        clicks_on_link_tracker:
          acc.clicks_on_link_tracker + day.clicks_on_link_tracker,
        showed: acc.showed + day.showed,
        duration_sum: acc.duration_sum + (day.average_time_on_video || 0),
        days_count: acc.days_count + 1,
        cost_from_sources: acc.cost_from_sources + (day.cost_from_sources || 0),
        clicks_on_link: acc.clicks_on_link + (day.clicks_on_link || 0),
      }),
      {
        valid: 0,
        cost: 0,
        clicks_on_link_tracker: 0,
        showed: 0,
        duration_sum: 0,
        days_count: 0,
        cost_from_sources: 0,
        clicks_on_link: 0,
      }
    );

    return {
      valid: result.valid,
      cost: result.cost,
      clicks_on_link_tracker: result.clicks_on_link_tracker,
      showed: result.showed,
      average_time_on_video:
        result.days_count > 0 ? result.duration_sum / result.days_count : 0,
      days_count: result.days_count,
      cost_from_sources: result.cost_from_sources,
      clicks_on_link: result.clicks_on_link,
    };
  }

  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
   */
  static computeDerivedMetrics({
    valid,
    cost,
    clicks_on_link_tracker,
    showed,
    average_time_on_video,
    days_count,
    cost_from_sources,
    clicks_on_link,
  }) {
    const fix2 = (x) => (Number.isFinite(x) ? Number(x.toFixed(2)) : 0);

    const CPL = valid > 0 ? cost / valid : 0;
    const CTR = showed > 0 ? (clicks_on_link / showed) * 100 : 0;
    const CPC = clicks_on_link > 0 ? cost_from_sources / clicks_on_link : 0;
    const CPM = showed > 0 ? (cost_from_sources / showed) * 1000 : 0;

    return {
      valid,
      cost: fix2(cost),
      clicks_on_link_tracker,
      showed,
      average_time_on_video: fix2(average_time_on_video),
      days_count,
      cost_from_sources: fix2(cost_from_sources),
      clicks_on_link,
      cpl: fix2(CPL),
      ctr_percent: fix2(CTR),
      cpc: fix2(CPC),
      cpm: fix2(CPM),
    };
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
   */
  static formatMetrics(metrics) {
    const formatInt = (n) => String(Math.round(Number(n) || 0));
    const formatMoney = (n) => (Number(n) || 0).toFixed(2) + "$";
    const formatPercent = (n) => (Number(n) || 0).toFixed(2) + "%";
    const formatDuration = (n) => (Number(n) || 0).toFixed(1) + "—Å";

    return {
      leads: formatInt(metrics.valid),
      cpl: formatMoney(metrics.cpl),
      cost: formatMoney(metrics.cost),
      ctr: formatPercent(metrics.ctr_percent),
      cpc: formatMoney(metrics.cpc),
      cpm: formatMoney(metrics.cpm),
      clicks: formatInt(metrics.clicks_on_link_tracker),
      impressions: formatInt(metrics.showed),
      avg_duration: formatDuration(metrics.average_time_on_video),
      days: formatInt(metrics.days_count) + " –¥–Ω.",
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API
   */
  static async checkApiStatus() {
    try {
      const response = await fetch(METRICS_API_URL, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
        },
        body: JSON.stringify({
          video_names: ["test_api_status_check"],
        }),
      });

      if (response.ok) {
        return { available: true, message: "API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ" };
      } else {
        return {
          available: false,
          message: `API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${response.status}`,
        };
      }
    } catch (error) {
      return {
        available: false,
        error: error.message,
        message: "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å URL API
   */
  static getApiUrl() {
    return METRICS_API_URL;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
   */
  static extractVideoName(fileName) {
    if (!fileName) return "";
    const cleanName = fileName.replace(/\.(mp4|avi|mov|mkv|webm|m4v)$/i, "");
    return cleanName.trim();
  }
}

export default MetricsService;
