// –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–ü–ò–°–ê–ù–ù–´–ô MetricsService.js - –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
// –ó–∞–º–µ–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ src/services/metricsService.js

import { metricsAnalyticsService } from '../supabaseClient';

const getApiUrl = () => {
  if (process.env.NODE_ENV === 'production' || window.location.hostname !== 'localhost') {
    return '/.netlify/functions/metrics-proxy';
  }
  return '/.netlify/functions/metrics-proxy';
};

const METRICS_API_URL = getApiUrl();
const TIMEZONE = "Europe/Kiev";

export class MetricsService {
  /**
   * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤–∏–¥–µ–æ - –¢–û–õ–¨–ö–û –ó–ê –í–°–ï –í–†–ï–ú–Ø
   */
  static buildDetailedSqlForVideo(videoName) {
    const escapedVideoName = this.sqlEscapeLiteral(videoName);
    
    return `
      SELECT
        adv_date,
        COALESCE(SUM(valid), 0) AS leads,
        COALESCE(SUM(cost), 0) AS cost,
        COALESCE(SUM(clicks_on_link_tracker), 0) AS clicks,
        COALESCE(SUM(showed), 0) AS impressions,
        COALESCE(AVG(average_time_on_video), 0) AS avg_duration
      FROM ads_collection
      WHERE video_name='${escapedVideoName}'
        AND (cost > 0 OR valid > 0 OR showed > 0 OR clicks_on_link_tracker > 0)
      GROUP BY adv_date
      ORDER BY adv_date ASC
    `;
  }

  /**
   * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è SQL
   */
  static sqlEscapeLiteral(str) {
    return String(str).replace(/'/g, "''");
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Netlify –ø—Ä–æ–∫—Å–∏
   */
  static async fetchFromDatabase(sql) {
    if (!/^(\s*select\b)/i.test(sql)) {
      throw new Error("–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ SELECT-–∑–∞–ø—Ä–æ—Å—ã.");
    }

    const options = {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      },
      body: JSON.stringify({ sql }),
    };

    try {
      console.log('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ø—Ä–æ–∫—Å–∏:', METRICS_API_URL);
      
      const response = await fetch(METRICS_API_URL, options);
      
      if (!response.ok) {
        const errorText = await response.text();
        let errorMessage;
        
        try {
          const errorJson = JSON.parse(errorText);
          errorMessage = errorJson.error || errorJson.details || `HTTP ${response.status}`;
          
          // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç –ø—Ä–æ–∫—Å–∏:', {
            status: response.status,
            error: errorJson.error,
            details: errorJson.details,
            type: errorJson.type
          });
        } catch {
          errorMessage = `HTTP ${response.status}: ${response.statusText}`;
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç –ø—Ä–æ–∫—Å–∏ (–Ω–µ JSON):', response.status, errorText.substring(0, 200));
        }
        
        // –ë–æ–ª–µ–µ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (response.status === 502) {
          throw new Error('API –º–µ—Ç—Ä–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        } else if (response.status === 504) {
          throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.');
        } else if (response.status === 500) {
          throw new Error('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –º–µ—Ç—Ä–∏–∫.');
        } else {
          throw new Error(errorMessage);
        }
      }

      const text = await response.text();
      if (!text || !text.trim()) {
        console.log('‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API');
        return [];
      }

      let json;
      try {
        json = JSON.parse(text);
      } catch (e) {
        console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π JSON:', e.message, text.substring(0, 200));
        throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API –º–µ—Ç—Ä–∏–∫");
      }

      if (json && typeof json === "object" && json.error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API:', json.error);
        throw new Error("–û—à–∏–±–∫–∞ API: " + (json.details || json.error));
      }

      return Array.isArray(json) ? json : [];
      
    } catch (error) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ç–∏
      if (error.name === 'TypeError' && error.message.includes('Failed to fetch')) {
        console.error('üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error);
        throw new Error('–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É –º–µ—Ç—Ä–∏–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
      }
      
      console.error('‚ùå –û—à–∏–±–∫–∞ fetchFromDatabase:', error);
      throw error;
    }
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫ –º–∞—Å—Å–∏–≤—É –¥–Ω–µ–π
   */
  static normalizeDetailedRows(dbResponse) {
    if (!dbResponse || dbResponse.length === 0) {
      return [];
    }

    let normalizedRows = [];

    // –°–ª—É—á–∞–π A: –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
    if (typeof dbResponse[0] === "object" && !Array.isArray(dbResponse[0])) {
      normalizedRows = dbResponse.map(row => ({
        date: row.adv_date,
        leads: Number(row.leads) || 0,
        cost: Number(row.cost) || 0,
        clicks: Number(row.clicks) || 0,
        impressions: Number(row.impressions) || 0,
        avg_duration: Number(row.avg_duration) || 0
      }));
    } else {
      // –°–ª—É—á–∞–π B: [headers, ...rows]
      const headers = dbResponse[0];
      const dataRows = dbResponse.slice(1);
      
      normalizedRows = dataRows.map(row => {
        const map = {};
        headers.forEach((h, i) => (map[h] = row[i]));
        
        return {
          date: map.adv_date,
          leads: Number(map.leads) || 0,
          cost: Number(map.cost) || 0,
          clicks: Number(map.clicks) || 0,
          impressions: Number(map.impressions) || 0,
          avg_duration: Number(map.avg_duration) || 0
        };
      });
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–ø–µ—Ä–≤—ã–µ –¥–Ω–∏ —Å–Ω–∞—á–∞–ª–∞)
    normalizedRows.sort((a, b) => new Date(a.date) - new Date(b.date));
    
    return normalizedRows;
  }

  /**
   * –ö–õ–Æ–ß–ï–í–û–ô –ú–ï–¢–û–î: –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–µ—Ä–∏–æ–¥—É - –ú–ì–ù–û–í–ï–ù–ù–û
   */
  static filterDataByPeriod(dailyData, period) {
    if (!dailyData || dailyData.length === 0) {
      return [];
    }

    if (period === 'all') {
      return dailyData;
    }

    if (period === '4days') {
      // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 4 –¥–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ - –ú–ì–ù–û–í–ï–ù–ù–û –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
      return dailyData.slice(0, 4);
    }

    // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –ø–µ—Ä–∏–æ–¥—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    return dailyData;
  }

  /**
   * –ù–û–í–´–ô –ú–ï–¢–û–î: –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –ø–æ –ø–µ—Ä–∏–æ–¥—É
   */
  static filterRawMetricsByPeriod(rawMetrics, targetPeriod) {
    if (!rawMetrics || !rawMetrics.found || !rawMetrics.data) {
      return {
        found: false,
        error: '–ù–µ—Ç —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏'
      };
    }

    // –ö–†–ò–¢–ò–ß–ù–û: –ï—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ 'all' –ò –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ (–Ω–µ—Ç allDailyData), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    const allDailyData = rawMetrics.data.allDailyData || rawMetrics.data.dailyData || [];
    const isFromCache = rawMetrics.data.fromCache || rawMetrics.fromCache;
    
    if (targetPeriod === 'all' && allDailyData.length === 0 && isFromCache) {
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ "all" - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏');
      return {
        found: true,
        data: rawMetrics.data
      };
    }
    
    if (allDailyData.length === 0) {
      return {
        found: false,
        error: '–ù–µ—Ç –¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏'
      };
    }

    // –ú–ì–ù–û–í–ï–ù–ù–ê–Ø —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    const filteredData = this.filterDataByPeriod(allDailyData, targetPeriod);
    
    if (filteredData.length === 0) {
      return {
        found: false,
        error: `–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥: ${targetPeriod === '4days' ? '–ø–µ—Ä–≤—ã–µ 4 –¥–Ω—è' : targetPeriod}`
      };
    }

    // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const aggregates = this.aggregateDailyData(filteredData);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—å –∫–∞–∫–∞—è-—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    if (aggregates.leads === 0 && aggregates.cost === 0 && 
        aggregates.clicks === 0 && aggregates.impressions === 0) {
      return {
        found: false,
        error: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥'
      };
    }
    
    const metrics = this.computeDerivedMetrics(aggregates);
    const formatted = this.formatMetrics(metrics);
    
    return {
      found: true,
      data: {
        raw: metrics,
        formatted: formatted,
        dailyData: filteredData, // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        allDailyData: allDailyData, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        period: targetPeriod,
        updatedAt: new Date().toLocaleString('ru-RU', {
          timeZone: TIMEZONE,
          year: 'numeric',
          month: '2-digit',
          day: '2-digit',
          hour: '2-digit',
          minute: '2-digit'
        })
      }
    };
  }

  /**
   * –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
   */
  static aggregateDailyData(dailyData) {
    if (!dailyData || dailyData.length === 0) {
      return {
        leads: 0,
        cost: 0,
        clicks: 0,
        impressions: 0,
        avg_duration: 0,
        days_count: 0
      };
    }

    const result = dailyData.reduce((acc, day) => ({
      leads: acc.leads + day.leads,
      cost: acc.cost + day.cost,
      clicks: acc.clicks + day.clicks,
      impressions: acc.impressions + day.impressions,
      duration_sum: acc.duration_sum + (day.avg_duration || 0),
      days_count: acc.days_count + 1
    }), {
      leads: 0,
      cost: 0,
      clicks: 0,
      impressions: 0,
      duration_sum: 0,
      days_count: 0
    });

    return {
      leads: result.leads,
      cost: result.cost,
      clicks: result.clicks,
      impressions: result.impressions,
      avg_duration: result.days_count > 0 ? result.duration_sum / result.days_count : 0,
      days_count: result.days_count
    };
  }

  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
   */
  static computeDerivedMetrics({ leads, cost, clicks, impressions, avg_duration, days_count }) {
    const fix2 = (x) => Number.isFinite(x) ? Number(x.toFixed(2)) : 0;
    
    const CPL = leads > 0 ? cost / leads : 0;
    const CTR = impressions > 0 ? (clicks / impressions) * 100 : 0;
    const CPC = clicks > 0 ? cost / clicks : 0;
    const CPM = impressions > 0 ? (cost / impressions) * 1000 : 0;

    return {
      leads,
      cost: fix2(cost),
      clicks,
      impressions,
      avg_duration: fix2(avg_duration),
      days_count,
      cpl: fix2(CPL),
      ctr_percent: fix2(CTR),
      cpc: fix2(CPC),
      cpm: fix2(CPM)
    };
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  static formatMetrics(metrics) {
    const formatInt = (n) => String(Math.round(Number(n) || 0));
    const formatMoney = (n) => (Number(n) || 0).toFixed(2) + "$";
    const formatPercent = (n) => (Number(n) || 0).toFixed(2) + "%";
    const formatDuration = (n) => (Number(n) || 0).toFixed(1) + "—Å";

    return {
      leads: formatInt(metrics.leads),
      cpl: formatMoney(metrics.cpl),
      cost: formatMoney(metrics.cost),
      ctr: formatPercent(metrics.ctr_percent),
      cpc: formatMoney(metrics.cpc),
      cpm: formatMoney(metrics.cpm),
      clicks: formatInt(metrics.clicks),
      impressions: formatInt(metrics.impressions),
      avg_duration: formatDuration(metrics.avg_duration),
      days: formatInt(metrics.days_count) + " –¥–Ω."
    };
  }

  /**
   * –ü–ï–†–ï–ü–ò–°–ê–ù–ù–´–ô –º–µ—Ç–æ–¥: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ - –¢–û–õ–¨–ö–û –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
   */
  static async getVideoMetricsRaw(videoName, useCache = true, creativeId = null, videoIndex = null, article = null) {
    if (!videoName || typeof videoName !== 'string') {
      throw new Error('–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à, –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
    if (useCache && creativeId && videoIndex !== null) {
      try {
        const cached = await metricsAnalyticsService.getMetricsCache(creativeId, videoIndex, 'all');
        if (cached && cached.metrics_data) {
          console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –∫—ç—à–∞ –¥–ª—è: ${videoName}`);
          return {
            found: true,
            data: cached.metrics_data,
            fromCache: true,
            cachedAt: cached.cached_at
          };
        }
      } catch (cacheError) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫—ç—à–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ API:', cacheError);
      }
    }

    try {
      console.log(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ó–ê –í–°–ï –í–†–ï–ú–Ø –∏–∑ API –¥–ª—è: ${videoName}`);
      
      // –í–°–ï–ì–î–ê –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –í–°–ï –≤—Ä–µ–º—è
      const sql = this.buildDetailedSqlForVideo(videoName);
      const dbResponse = await this.fetchFromDatabase(sql);
      
      if (!dbResponse || dbResponse.length === 0) {
        return {
          found: false,
          error: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
        };
      }

      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
      const allDailyData = this.normalizeDetailedRows(dbResponse);
      
      if (allDailyData.length === 0) {
        return {
          found: false,
          error: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'
        };
      }

      // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –í–°–ï –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      const aggregates = this.aggregateDailyData(allDailyData);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—å –∫–∞–∫–∞—è-—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      if (aggregates.leads === 0 && aggregates.cost === 0 && 
          aggregates.clicks === 0 && aggregates.impressions === 0) {
        return {
          found: false,
          error: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è'
        };
      }
      
      const metrics = this.computeDerivedMetrics(aggregates);
      const formatted = this.formatMetrics(metrics);
      
      console.log(`‚úÖ –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${allDailyData.length} –¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`);
      
      const result = {
        found: true,
        data: {
          raw: metrics,
          formatted: formatted,
          allDailyData: allDailyData, // –ö–õ–Æ–ß–ï–í–û–ï: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï –¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
          dailyData: allDailyData, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–Ω–∏
          videoName: videoName,
          period: 'all', // –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–≥–¥–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
          updatedAt: new Date().toLocaleString('ru-RU', {
            timeZone: TIMEZONE,
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
          })
        },
        fromCache: false
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      if (creativeId && videoIndex !== null) {
        try {
          console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ –∫—ç—à:`, {
            creativeId,
            article: article || videoName,
            videoIndex,
            videoName,
            period: 'all',
            hasData: !!result.data,
            dataKeys: result.data ? Object.keys(result.data) : [],
            rawLeads: result.data?.raw?.leads,
            rawCost: result.data?.raw?.cost
          });

          await metricsAnalyticsService.saveMetricsCache(
            creativeId,
            article || videoName,
            videoIndex,
            videoName,
            result.data,
            'all'
          );
          
          console.log(`‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à –¥–ª—è: ${videoName}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
          const checkCache = await metricsAnalyticsService.getMetricsCache(creativeId, videoIndex, 'all');
          console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∫—ç—à–∞:`, {
            found: !!checkCache,
            hasMetricsData: !!checkCache?.metrics_data,
            hasLeads: 'leads' in checkCache,
            leadsValue: checkCache?.leads,
            costValue: checkCache?.cost
          });
          
        } catch (saveError) {
          console.error('‚ùå –û–®–ò–ë–ö–ê —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –≤ –∫—ç—à:', saveError);
        }
      }

      return result;
    } catch (error) {
      return {
        found: false,
        error: error.message
      };
    }
  }

  /**
   * –£–°–¢–ê–†–ï–í–®–ò–ô –º–µ—Ç–æ–¥ - –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  static async getVideoMetrics(videoName, period = 'all') {
    console.warn('‚ö†Ô∏è getVideoMetrics –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ getVideoMetricsRaw + filterRawMetricsByPeriod');
    
    // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const rawResult = await this.getVideoMetricsRaw(videoName);
    
    if (!rawResult.found) {
      return rawResult;
    }

    return this.filterRawMetricsByPeriod(rawResult, period);
  }

  /**
   * –ü–ï–†–ï–ü–ò–°–ê–ù–ù–´–ô –º–µ—Ç–æ–¥: –ë–∞—Ç—á–µ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ - –¢–û–õ–¨–ö–û –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
   */
  static async getBatchVideoMetricsRaw(videoNames) {
    if (!Array.isArray(videoNames)) {
      throw new Error('videoNames –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
    }

    console.log(`üöÄ –ë–∞—Ç—á–µ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${videoNames.length} –≤–∏–¥–µ–æ`);

    const results = await Promise.allSettled(
      videoNames.map(async (videoName, index) => {
        try {
          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –ø—Ä–æ–∫—Å–∏
          if (index > 0 && index % 5 === 0) {
            await new Promise(resolve => setTimeout(resolve, 500));
          } else if (index > 0) {
            await new Promise(resolve => setTimeout(resolve, 100));
          }
          
          // –í–ê–ñ–ù–û: –ø–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –í–°–ï –≤—Ä–µ–º—è
          const result = await this.getVideoMetricsRaw(videoName);
          
          return {
            videoName,
            ...result
          };
        } catch (error) {
          return {
            videoName,
            found: false,
            error: error.message
          };
        }
      })
    );

    const finalResults = results.map((result, index) => ({
      videoName: videoNames[index],
      ...(result.status === 'fulfilled' ? result.value : {
        found: false,
        error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ'
      })
    }));

    console.log(`‚úÖ –ë–∞—Ç—á–µ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${finalResults.filter(r => r.found).length}/${finalResults.length} —É—Å–ø–µ—à–Ω–æ`);

    return finalResults;
  }

  /**
   * –£–°–¢–ê–†–ï–í–®–ò–ô –º–µ—Ç–æ–¥ - –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
   */
  static async getBatchVideoMetrics(videoNames, period = 'all') {
    console.warn('‚ö†Ô∏è getBatchVideoMetrics –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å –ø–µ—Ä–∏–æ–¥–æ–º - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ getBatchVideoMetricsRaw + –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é');
    
    // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const rawResults = await this.getBatchVideoMetricsRaw(videoNames);
    
    if (period === 'all') {
      return rawResults;
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∫–æ –≤—Å–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
    return rawResults.map(rawResult => {
      if (!rawResult.found) {
        return {
          ...rawResult,
          period
        };
      }

      const filtered = this.filterRawMetricsByPeriod(rawResult, period);
      return {
        videoName: rawResult.videoName,
        period,
        ...filtered
      };
    });
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
   */
  static extractVideoName(fileName) {
    if (!fileName) return '';
    
    // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤
    const cleanName = fileName.replace(/\.(mp4|avi|mov|mkv|webm|m4v)$/i, '');
    return cleanName.trim();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API
   */
  static async checkApiStatus() {
    try {
      const testSql = "SELECT 1 as test LIMIT 1";
      const result = await this.fetchFromDatabase(testSql);
      
      if (result && Array.isArray(result)) {
        return { available: true, message: 'API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ' };
      } else {
        return { available: true, message: 'API –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π' };
      }
    } catch (error) {
      return { 
        available: false, 
        error: error.message,
        message: 'API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å URL API –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
   */
  static getApiUrl() {
    return METRICS_API_URL;
  }
}

export default MetricsService;
