// Netlify —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π Google Drive —Ñ–∞–π–ª–æ–≤

exports.handler = async (event, context) => {
  // –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Access-Control-Allow-Methods': 'GET, OPTIONS',
    'Content-Type': 'application/json'
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–∞
  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 200,
      headers,
      body: ''
    };
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º fileId –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
    const fileId = event.queryStringParameters?.fileId;
    
    if (!fileId) {
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ 
          error: 'fileId parameter is required',
          title: null 
        })
      };
    }

    console.log('üîç –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è File ID:', fileId);

    // –ú–µ—Ç–æ–¥ 1: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ Google Drive API
    let title = await getFileNameViaAPI(fileId);
    
    if (title) {
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ API:', title);
      return {
        statusCode: 200,
        headers,
        body: JSON.stringify({ 
          title: title,
          method: 'api',
          fileId: fileId 
        })
      };
    }

    // –ú–µ—Ç–æ–¥ 2: –ß–µ—Ä–µ–∑ HTML –ø–∞—Ä—Å–∏–Ω–≥
    title = await getFileNameViaHTML(fileId);
    
    if (title) {
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ HTML –ø–∞—Ä—Å–∏–Ω–≥:', title);
      return {
        statusCode: 200,
        headers,
        body: JSON.stringify({ 
          title: title,
          method: 'html',
          fileId: fileId 
        })
      };
    }

    // –ú–µ—Ç–æ–¥ 3: –ß–µ—Ä–µ–∑ oEmbed
    title = await getFileNameViaOEmbed(fileId);
    
    if (title) {
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ oEmbed:', title);
      return {
        statusCode: 200,
        headers,
        body: JSON.stringify({ 
          title: title,
          method: 'oembed',
          fileId: fileId 
        })
      };
    }

    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null');
    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({ 
        title: null,
        method: 'none',
        fileId: fileId,
        message: 'Could not extract title'
      })
    };

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏:', error);
    
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({ 
        error: error.message,
        title: null 
      })
    };
  }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Google Drive API
 */
async function getFileNameViaAPI(fileId) {
  try {
    // –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã—Ö API –∫–ª—é—á–µ–π
    const apiKeys = [
      'AIzaSyDi9tJUzxU1Db6rIV3NkWs1LnlHoY1nXKQ', // –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á 1
      'AIzaSyDdI0hCZtE6vySjMm-WEfRq3CPzqKqqsHI', // –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á 2
      'AIzaSyDLLdXzzRk7FgqG6lM6Y8bPhQztP3iLgzs'  // –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á 3
    ];

    for (const apiKey of apiKeys) {
      try {
        const url = `https://www.googleapis.com/drive/v3/files/${fileId}?fields=name&key=${apiKey}`;
        
        const response = await fetch(url, {
          method: 'GET',
          headers: {
            'User-Agent': 'Mozilla/5.0 (compatible; NetlifyBot/1.0)'
          }
        });

        if (response.ok) {
          const data = await response.json();
          if (data.name) {
            return data.name;
          }
        } else if (response.status === 403) {
          console.log(`API –∫–ª—é—á ${apiKey} –∏—Å—á–µ—Ä–ø–∞–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω`);
          continue;
        }
      } catch (error) {
        console.log(`–û—à–∏–±–∫–∞ —Å API –∫–ª—é—á–æ–º ${apiKey}:`, error.message);
        continue;
      }
    }

    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ getFileNameViaAPI:', error);
    return null;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ HTML –ø–∞—Ä—Å–∏–Ω–≥
 */
async function getFileNameViaHTML(fileId) {
  try {
    const url = `https://drive.google.com/file/d/${fileId}/view`;
    
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
      }
    });

    if (!response.ok) {
      return null;
    }

    const html = await response.text();
    return extractTitleFromHTML(html);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ getFileNameViaHTML:', error);
    return null;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ oEmbed API
 */
async function getFileNameViaOEmbed(fileId) {
  try {
    const driveUrl = `https://drive.google.com/file/d/${fileId}/view`;
    const oembedUrl = `https://docs.google.com/oembed?url=${encodeURIComponent(driveUrl)}&format=json`;
    
    const response = await fetch(oembedUrl, {
      method: 'GET',
      headers: {
        'User-Agent': 'Mozilla/5.0 (compatible; NetlifyBot/1.0)'
      }
    });

    if (response.ok) {
      const data = await response.json();
      return data.title || null;
    }

    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ getFileNameViaOEmbed:', error);
    return null;
  }
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ HTML
 */
function extractTitleFromHTML(html) {
  try {
    // –ò—â–µ–º title tag
    const titleMatch = html.match(/<title[^>]*>([^<]+)<\/title>/i);
    if (titleMatch && titleMatch[1]) {
      let title = titleMatch[1].trim();
      
      // –£–±–∏—Ä–∞–µ–º " - Google Drive" –∏ –ø–æ–¥–æ–±–Ω—ã–µ —Å—É—Ñ—Ñ–∏–∫—Å—ã
      title = title.replace(/ - Google Drive$/i, '');
      title = title.replace(/ - Google Docs$/i, '');
      title = title.replace(/ - Google Sheets$/i, '');
      title = title.replace(/ - Google Slides$/i, '');
      
      if (title && 
          title.length > 0 && 
          title !== 'Untitled' && 
          !title.includes('Sign in') &&
          !title.includes('Access denied') &&
          !title.includes('Error')) {
        return title;
      }
    }

    // –ò—â–µ–º og:title meta tag
    const ogTitleMatch = html.match(/<meta[^>]+property=["']og:title["'][^>]+content=["']([^"']+)["']/i);
    if (ogTitleMatch && ogTitleMatch[1]) {
      const title = ogTitleMatch[1].trim();
      if (title && title !== 'Untitled') {
        return title;
      }
    }

    // –ò—â–µ–º –≤ data-title –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
    const dataTitleMatch = html.match(/data-title=["']([^"']+)["']/i);
    if (dataTitleMatch && dataTitleMatch[1]) {
      return dataTitleMatch[1].trim();
    }

    // –ò—â–µ–º –≤ JSON-LD —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const jsonLdMatch = html.match(/<script[^>]+type=["']application\/ld\+json["'][^>]*>([^<]+)<\/script>/i);
    if (jsonLdMatch) {
      try {
        const jsonData = JSON.parse(jsonLdMatch[1]);
        if (jsonData.name) {
          return jsonData.name;
        }
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
      }
    }

    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ extractTitleFromHTML:', error);
    return null;
  }
}
