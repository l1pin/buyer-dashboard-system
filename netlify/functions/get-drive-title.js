// –§–ò–ù–ê–õ–¨–ù–ê–Ø Netlify —Ñ—É–Ω–∫—Ü–∏—è —Å –†–ï–ê–õ–¨–ù–´–ú–ò API –∫–ª—é—á–∞–º–∏
// –ì–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é - –∑–∞–º–µ–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ netlify/functions/get-drive-title.js

exports.handler = async (event, context) => {
  context.callbackWaitsForEmptyEventLoop = false;
  
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
    'Content-Type': 'application/json',
    'Cache-Control': 'public, max-age=300'
  };

  if (event.httpMethod === 'OPTIONS') {
    return { statusCode: 200, headers, body: '' };
  }

  const startTime = Date.now();
  
  try {
    const fileId = event.queryStringParameters?.fileId;
    
    if (!fileId) {
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ 
          error: 'fileId parameter is required',
          title: null,
          method: 'error'
        })
      };
    }

    console.log(`üîç [${new Date().toISOString()}] –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è: ${fileId}`);

    // –ú–µ—Ç–æ–¥—ã —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏
    const methods = [
      {
        name: 'google-api-v3',
        timeout: 5000,
        fn: () => getFileNameViaGoogleAPIv3(fileId)
      },
      {
        name: 'public-viewer-api',
        timeout: 8000,
        fn: () => getFileNameViaPublicViewerAPI(fileId)
      },
      {
        name: 'metadata-scraping',
        timeout: 10000,
        fn: () => getFileNameViaMetadataScraping(fileId)
      },
      {
        name: 'alternative-endpoints',
        timeout: 12000,
        fn: () => getFileNameViaAlternativeEndpoints(fileId)
      }
    ];

    // –ü—Ä–æ–±—É–µ–º –º–µ—Ç–æ–¥—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    for (const method of methods) {
      try {
        console.log(`üîÑ –ü—Ä–æ–±—É–µ–º –º–µ—Ç–æ–¥: ${method.name}`);
        
        const result = await Promise.race([
          method.fn(),
          new Promise((_, reject) => 
            setTimeout(() => reject(new Error('Timeout')), method.timeout)
          )
        ]);

        if (result && isValidTitle(result)) {
          const elapsed = Date.now() - startTime;
          console.log(`‚úÖ –£—Å–ø–µ—Ö —á–µ—Ä–µ–∑ ${method.name} –∑–∞ ${elapsed}ms: "${result}"`);
          
          return {
            statusCode: 200,
            headers,
            body: JSON.stringify({ 
              title: cleanTitle(result),
              method: method.name,
              fileId: fileId,
              elapsed: elapsed
            })
          };
        }
      } catch (error) {
        console.log(`‚ùå –ú–µ—Ç–æ–¥ ${method.name} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:`, error.message);
        continue;
      }
    }

    // Fallback
    const smartTitle = generateContextualFallback(fileId);
    const elapsed = Date.now() - startTime;
    
    console.log(`ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∑–∞ ${elapsed}ms: "${smartTitle}"`);
    
    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({ 
        title: smartTitle,
        method: 'contextual-fallback',
        fileId: fileId,
        elapsed: elapsed,
        note: '–í—Å–µ –º–µ—Ç–æ–¥—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —É–º–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ'
      })
    };

  } catch (error) {
    const elapsed = Date.now() - startTime;
    console.error(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞ ${elapsed}ms:`, error);
    
    const fallbackTitle = generateContextualFallback(
      event.queryStringParameters?.fileId || 'unknown'
    );
    
    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({ 
        title: fallbackTitle,
        method: 'error-fallback',
        error: error.message,
        elapsed: elapsed
      })
    };
  }
};

/**
 * –ú–ï–¢–û–î 1: Google Drive API v3 —Å –í–ê–®–ò–ú–ò –†–ï–ê–õ–¨–ù–´–ú–ò –∫–ª—é—á–∞–º–∏
 */
async function getFileNameViaGoogleAPIv3(fileId) {
  // –í–ê–®–ò –†–ï–ê–õ–¨–ù–´–ï API –∫–ª—é—á–∏
  const apiKeys = [
    process.env.GOOGLE_API_KEY_1, // –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    process.env.GOOGLE_API_KEY_2,
    process.env.GOOGLE_API_KEY_3,
    // –í–∞—à–∏ –Ω–∞—Å—Ç–æ—è—â–∏–µ –∫–ª—é—á–∏
    'AIzaSyAgBZt6xX69phg8vD2NUcrXtsVCFxrVV1w', // ‚úÖ –í–ê–® –ö–õ–Æ–ß 1
    'AIzaSyDxrdk_ipzlUefe49uiEslMWt7laGdz4OU', // ‚úÖ –í–ê–® –ö–õ–Æ–ß 2
  ].filter(Boolean);

  for (const apiKey of apiKeys) {
    try {
      const response = await fetch(
        `https://www.googleapis.com/drive/v3/files/${fileId}?fields=name,mimeType&key=${apiKey}`,
        {
          method: 'GET',
          headers: {
            'Accept': 'application/json',
            'User-Agent': 'FileNameExtractor/2.0'
          }
        }
      );

      if (response.status === 200) {
        const data = await response.json();
        if (data.name) {
          console.log(`‚úÖ API –∫–ª—é—á ${apiKey.substring(0, 15)}... —Å—Ä–∞–±–æ—Ç–∞–ª`);
          return data.name;
        }
      } else if (response.status === 403) {
        console.log(`‚ö†Ô∏è API –∫–ª—é—á ${apiKey.substring(0, 15)}... –∏—Å—á–µ—Ä–ø–∞–Ω, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π`);
        continue;
      } else if (response.status === 404) {
        console.log('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π');
        return null;
      }
    } catch (error) {
      console.log(`‚ùå API –∫–ª—é—á ${apiKey.substring(0, 15)}... –æ—à–∏–±–∫–∞:`, error.message);
      continue;
    }
  }
  
  return null;
}

/**
 * –ú–ï–¢–û–î 2: –ü—É–±–ª–∏—á–Ω—ã–π Viewer API (–±–µ–∑ –∫–ª—é—á–µ–π)
 */
async function getFileNameViaPublicViewerAPI(fileId) {
  try {
    const endpoints = [
      `https://clients6.google.com/drive/v2beta/files/${fileId}?fields=title`,
      `https://www.googleapis.com/drive/v2/files/${fileId}?fields=title`,
    ];

    for (const endpoint of endpoints) {
      try {
        const response = await fetch(endpoint, {
          headers: {
            'User-Agent': 'Mozilla/5.0 (compatible; FileExtractor/2.0)',
            'Accept': 'application/json',
            'Referer': 'https://drive.google.com/'
          }
        });

        if (response.ok) {
          const data = await response.json();
          if (data.title) {
            return data.title;
          }
        }
      } catch (error) {
        continue;
      }
    }
  } catch (error) {
    console.log('Public Viewer API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error.message);
  }
  
  return null;
}

/**
 * –ú–ï–¢–û–î 3: Scraping –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É
 */
async function getFileNameViaMetadataScraping(fileId) {
  try {
    const viewUrl = `https://drive.google.com/file/d/${fileId}/view`;
    
    const response = await fetch(viewUrl, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
        'Cache-Control': 'no-cache',
        'Pragma': 'no-cache'
      }
    });

    if (response.ok) {
      const html = await response.text();
      return extractTitleFromHTML(html);
    }
  } catch (error) {
    console.log('Metadata scraping –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error.message);
  }
  
  return null;
}

/**
 * –ú–ï–¢–û–î 4: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ endpoints
 */
async function getFileNameViaAlternativeEndpoints(fileId) {
  const endpoints = [
    `https://drive.google.com/uc?id=${fileId}`,
    `https://drive.google.com/file/d/${fileId}/preview`,
    `https://drive.google.com/feeds/default/private/full/${fileId}`,
  ];

  for (const endpoint of endpoints) {
    try {
      const response = await fetch(endpoint, {
        method: 'HEAD',
        redirect: 'manual',
        headers: {
          'User-Agent': 'Mozilla/5.0 (compatible; FileExtractor/2.0)'
        }
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Disposition
      const contentDisposition = response.headers.get('content-disposition');
      if (contentDisposition) {
        const patterns = [
          /filename\*=UTF-8''([^;]+)/i,
          /filename="([^"]+)"/i,
          /filename=([^;]+)/i
        ];

        for (const pattern of patterns) {
          const match = contentDisposition.match(pattern);
          if (match && match[1]) {
            let filename = decodeURIComponent(match[1].trim());
            return filename.replace(/\.(mp4|avi|mov|mkv|webm|m4v|jpg|jpeg|png|gif|pdf|doc|docx)$/i, '');
          }
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º Location header
      const location = response.headers.get('location');
      if (location) {
        const titleFromUrl = extractTitleFromUrl(location);
        if (titleFromUrl) return titleFromUrl;
      }

    } catch (error) {
      continue;
    }
  }
  
  return null;
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ HTML
 */
function extractTitleFromHTML(html) {
  if (!html) return null;

  const patterns = [
    /<title[^>]*>([^<]+)<\/title>/i,
    /<meta[^>]+property=["']og:title["'][^>]+content=["']([^"']+)["']/i,
    /"name"\s*:\s*"([^"]+)"/i,
    /"title"\s*:\s*"([^"]+)"/i,
    /data-title=["']([^"']+)["']/i,
    /var\s+title\s*=\s*["']([^"']+)["']/i,
  ];

  for (const pattern of patterns) {
    const match = html.match(pattern);
    if (match && match[1]) {
      let title = match[1].trim();
      
      // –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ HTML entities
      title = title.replace(/&quot;/g, '"')
                  .replace(/&amp;/g, '&')
                  .replace(/&lt;/g, '<')
                  .replace(/&gt;/g, '>')
                  .replace(/&#39;/g, "'")
                  .replace(/&nbsp;/g, ' ');
      
      // –û—á–∏—Å—Ç–∫–∞ –æ—Ç Google —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤
      title = title.replace(/ - Google Drive$/i, '')
                  .replace(/ - Google Docs$/i, '')
                  .replace(/ - –î–æ–∫—É–º–µ–Ω—Ç—ã Google$/i, '')
                  .replace(/^Google Drive - /, '');
      
      if (isValidTitle(title)) {
        return title;
      }
    }
  }

  return null;
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ URL
 */
function extractTitleFromUrl(url) {
  if (!url) return null;
  
  try {
    const urlObj = new URL(url);
    
    const titleParams = ['title', 'name', 'filename', 't'];
    for (const param of titleParams) {
      const value = urlObj.searchParams.get(param);
      if (value && isValidTitle(value)) {
        return decodeURIComponent(value);
      }
    }
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL
  }
  
  return null;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è
 */
function isValidTitle(title) {
  if (!title || typeof title !== 'string') return false;
  
  const cleaned = title.trim();
  
  if (cleaned.length === 0 || cleaned.length > 500) return false;
  
  const invalidPatterns = [
    /^untitled$/i,
    /^–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è$/i,
    /^document$/i,
    /^file$/i,
    /sign in/i,
    /–≤–æ–π—Ç–∏/i,
    /access denied/i,
    /–¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω/i,
    /error/i,
    /–æ—à–∏–±–∫–∞/i,
    /loading/i,
    /–∑–∞–≥—Ä—É–∑–∫–∞/i,
    /403 forbidden/i,
    /404 not found/i,
    /^google drive/i
  ];

  return !invalidPatterns.some(pattern => pattern.test(cleaned));
}

/**
 * –û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
 */
function cleanTitle(title) {
  if (!title) return title;
  
  let cleaned = title.trim();
  
  // –£–¥–∞–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
  cleaned = cleaned.replace(/\.(mp4|avi|mov|mkv|webm|m4v|jpg|jpeg|png|gif|pdf|doc|docx|xlsx|pptx)$/i, '');
  
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
  cleaned = cleaned.replace(/\s+/g, ' ').trim();
  
  // –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ
  cleaned = cleaned.replace(/^[\-_\.\s]+/, '').replace(/[\-_\.\s]+$/, '');
  
  return cleaned;
}

/**
 * –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π fallback
 */
function generateContextualFallback(fileId) {
  if (!fileId || fileId === 'unknown') {
    return '–ú–µ–¥–∏–∞—Ñ–∞–π–ª';
  }
  
  const templates = [
    '–í–∏–¥–µ–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è_–ø—Ä–æ–µ–∫—Ç–∞',
    '–û–±—É—á–∞—é—â–∏–π_–º–∞—Ç–µ—Ä–∏–∞–ª',
    '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è_–ø—Ä–æ–¥—É–∫—Ç–∞',
    '–†–µ–∫–ª–∞–º–Ω—ã–π_—Ä–æ–ª–∏–∫', 
    '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ_–≤–∏–¥–µ–æ',
    '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è_—Ç–æ–≤–∞—Ä–∞',
    '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π_–∫–æ–Ω—Ç–µ–Ω—Ç'
  ];
  
  let hash = 0;
  for (let i = 0; i < fileId.length; i++) {
    const char = fileId.charCodeAt(i);
    hash = ((hash << 5) - hash) + char;
    hash = hash & hash;
  }
  
  const templateIndex = Math.abs(hash) % templates.length;
  const template = templates[templateIndex];
  
  const shortId = fileId.substring(0, 6).toUpperCase();
  
  return `${template}_${shortId}`;
}
