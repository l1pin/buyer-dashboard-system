// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è Netlify —Ñ—É–Ω–∫—Ü–∏—è —Å –†–ï–ê–õ–¨–ù–´–ú–ò —Ä–∞–±–æ—á–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏

exports.handler = async (event, context) => {
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Access-Control-Allow-Methods': 'GET, OPTIONS',
    'Content-Type': 'application/json'
  };

  if (event.httpMethod === 'OPTIONS') {
    return { statusCode: 200, headers, body: '' };
  }

  try {
    const fileId = event.queryStringParameters?.fileId;
    
    if (!fileId) {
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ 
          error: 'fileId parameter is required',
          title: null 
        })
      };
    }

    console.log('üîç –†–ï–ê–õ–¨–ù–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è File ID:', fileId);

    // –ú–µ—Ç–æ–¥ 1: –ß–µ—Ä–µ–∑ HEAD –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Content-Disposition
    let title = await getFileNameViaContentDisposition(fileId);
    if (title) {
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ Content-Disposition:', title);
      return {
        statusCode: 200,
        headers,
        body: JSON.stringify({ 
          title: title,
          method: 'content-disposition',
          fileId: fileId 
        })
      };
    }

    // –ú–µ—Ç–æ–¥ 2: –ß–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ Google Drive export API
    title = await getFileNameViaExportAPI(fileId);
    if (title) {
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ Export API:', title);
      return {
        statusCode: 200,
        headers,
        body: JSON.stringify({ 
          title: title,
          method: 'export-api',
          fileId: fileId 
        })
      };
    }

    // –ú–µ—Ç–æ–¥ 3: –ß–µ—Ä–µ–∑ Google Drive Web API (–ø—É–±–ª–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã)
    title = await getFileNameViaWebAPI(fileId);
    if (title) {
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ Web API:', title);
      return {
        statusCode: 200,
        headers,
        body: JSON.stringify({ 
          title: title,
          method: 'web-api',
          fileId: fileId 
        })
      };
    }

    // –ú–µ—Ç–æ–¥ 4: –ß–µ—Ä–µ–∑ RSS feed (–¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –ø–∞–ø–æ–∫)
    title = await getFileNameViaRSS(fileId);
    if (title) {
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ RSS:', title);
      return {
        statusCode: 200,
        headers,
        body: JSON.stringify({ 
          title: title,
          method: 'rss',
          fileId: fileId 
        })
      };
    }

    // –ú–µ—Ç–æ–¥ 5: –ß–µ—Ä–µ–∑ HTML –ø–∞—Ä—Å–∏–Ω–≥ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    title = await getFileNameViaHTMLParsing(fileId);
    if (title) {
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ HTML –ø–∞—Ä—Å–∏–Ω–≥:', title);
      return {
        statusCode: 200,
        headers,
        body: JSON.stringify({ 
          title: title,
          method: 'html-parsing',
          fileId: fileId 
        })
      };
    }

    // –£–º–Ω—ã–π fallback
    const smartTitle = generateSmartTitle(fileId);
    console.log('ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–º–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:', smartTitle);
    
    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({ 
        title: smartTitle,
        method: 'smart-fallback',
        fileId: fileId 
      })
    };

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏:', error);
    
    // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É–º–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    const smartTitle = generateSmartTitle(event.queryStringParameters?.fileId || 'unknown');
    
    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({ 
        title: smartTitle,
        method: 'error-fallback',
        error: error.message
      })
    };
  }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Content-Disposition header
 */
async function getFileNameViaContentDisposition(fileId) {
  try {
    const downloadUrl = `https://drive.google.com/uc?export=download&id=${fileId}`;
    
    const response = await fetch(downloadUrl, {
      method: 'HEAD',
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
      },
      redirect: 'manual'
    });
    
    const contentDisposition = response.headers.get('content-disposition');
    if (contentDisposition) {
      const nameMatch = contentDisposition.match(/filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/);
      if (nameMatch && nameMatch[1]) {
        let filename = nameMatch[1].replace(/['"]/g, '');
        filename = decodeURIComponent(filename);
        return filename.replace(/\.(mp4|avi|mov|mkv|webm|m4v|jpg|jpeg|png|gif|pdf|doc|docx)$/i, '');
      }
    }
    
    return null;
  } catch (error) {
    console.log('Content-Disposition –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error.message);
    return null;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Google Drive Export API
 */
async function getFileNameViaExportAPI(fileId) {
  try {
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ export —Ñ–æ—Ä–º–∞—Ç—ã
    const exportFormats = ['txt', 'pdf', 'docx'];
    
    for (const format of exportFormats) {
      try {
        const exportUrl = `https://docs.google.com/document/d/${fileId}/export?format=${format}`;
        
        const response = await fetch(exportUrl, {
          method: 'HEAD',
          headers: {
            'User-Agent': 'Mozilla/5.0 (compatible; GoogleBot/2.1; +http://www.google.com/bot.html)'
          },
          redirect: 'manual'
        });
        
        const contentDisposition = response.headers.get('content-disposition');
        if (contentDisposition && contentDisposition.includes('filename')) {
          const nameMatch = contentDisposition.match(/filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/);
          if (nameMatch && nameMatch[1]) {
            let filename = nameMatch[1].replace(/['"]/g, '');
            filename = decodeURIComponent(filename);
            return filename.replace(/\.(txt|pdf|docx|mp4|avi|mov)$/i, '');
          }
        }
      } catch (formatError) {
        continue;
      }
    }
    
    return null;
  } catch (error) {
    console.log('Export API –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error.message);
    return null;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Google Drive Web API
 */
async function getFileNameViaWebAPI(fileId) {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π endpoint –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    const webApiUrl = `https://clients6.google.com/drive/v2beta/files/${fileId}?fields=title&key=web`;
    
    const response = await fetch(webApiUrl, {
      headers: {
        'Referer': 'https://drive.google.com/',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
      }
    });
    
    if (response.ok) {
      const data = await response.json();
      return data.title || null;
    }
    
    return null;
  } catch (error) {
    console.log('Web API –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error.message);
    return null;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ RSS feed (—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)
 */
async function getFileNameViaRSS(fileId) {
  try {
    const rssUrl = `https://drive.google.com/feed/id/${fileId}`;
    
    const response = await fetch(rssUrl, {
      headers: {
        'Accept': 'application/rss+xml, application/xml, text/xml',
        'User-Agent': 'Mozilla/5.0 RSS Reader'
      }
    });
    
    if (response.ok) {
      const rssText = await response.text();
      const titleMatch = rssText.match(/<title><!\[CDATA\[(.*?)\]\]><\/title>/);
      if (titleMatch && titleMatch[1]) {
        return titleMatch[1].trim();
      }
    }
    
    return null;
  } catch (error) {
    console.log('RSS –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error.message);
    return null;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ HTML –ø–∞—Ä—Å–∏–Ω–≥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
 */
async function getFileNameViaHTMLParsing(fileId) {
  try {
    const viewUrl = `https://drive.google.com/file/d/${fileId}/view`;
    
    const response = await fetch(viewUrl, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.5',
        'Accept-Encoding': 'gzip, deflate, br',
        'DNT': '1',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1'
      }
    });
    
    if (response.ok) {
      const html = await response.text();
      return extractTitleFromHTML(html);
    }
    
    return null;
  } catch (error) {
    console.log('HTML –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error.message);
    return null;
  }
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ HTML —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º
 */
function extractTitleFromHTML(html) {
  try {
    // –ú–µ—Ç–æ–¥ 1: –û—Å–Ω–æ–≤–Ω–æ–π title tag
    const titleMatch = html.match(/<title[^>]*>([^<]+)<\/title>/i);
    if (titleMatch && titleMatch[1]) {
      let title = titleMatch[1].trim();
      title = title.replace(/ - Google Drive$/i, '');
      title = title.replace(/ - Google Docs$/i, '');
      title = title.replace(/ - –î–æ–∫—É–º–µ–Ω—Ç—ã Google$/i, '');
      
      if (title && title.length > 0 && 
          title !== 'Untitled' && 
          title !== '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è' &&
          !title.includes('Sign in') &&
          !title.includes('–í–æ–π—Ç–∏') &&
          !title.includes('Access denied')) {
        return title;
      }
    }

    // –ú–µ—Ç–æ–¥ 2: Open Graph title
    const ogTitleMatch = html.match(/<meta[^>]+property=["']og:title["'][^>]+content=["']([^"']+)["']/i);
    if (ogTitleMatch && ogTitleMatch[1]) {
      const title = ogTitleMatch[1].trim();
      if (title && title !== 'Untitled' && title !== '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è') {
        return title;
      }
    }

    // –ú–µ—Ç–æ–¥ 3: JavaScript –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (Drive –∏–Ω–æ–≥–¥–∞ —Ö—Ä–∞–Ω–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ JS)
    const jsVarMatch = html.match(/['"]title['"][:\s]*['"]([^'"]+)['"]/i);
    if (jsVarMatch && jsVarMatch[1]) {
      return jsVarMatch[1].trim();
    }

    // –ú–µ—Ç–æ–¥ 4: data-title –∞—Ç—Ä–∏–±—É—Ç—ã
    const dataTitleMatch = html.match(/data-title=["']([^"']+)["']/i);
    if (dataTitleMatch && dataTitleMatch[1]) {
      return dataTitleMatch[1].trim();
    }

    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ extractTitleFromHTML:', error);
    return null;
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ fileId
 */
function generateSmartTitle(fileId) {
  if (!fileId || fileId === 'unknown') {
    return '–í–∏–¥–µ–æ—Ñ–∞–π–ª';
  }
  
  // –ë–æ–ª–µ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –∏ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
  const prefixes = [
    '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è',
    '–í–∏–¥–µ–æ—É—Ä–æ–∫', 
    '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è',
    '–û–±—É—á–∞—é—â–∏–π_–º–∞—Ç–µ—Ä–∏–∞–ª',
    '–†–µ–∫–ª–∞–º–Ω—ã–π_—Ä–æ–ª–∏–∫',
    '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ_–≤–∏–¥–µ–æ',
    '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è',
    '–ü—Ä–æ–º–æ_–º–∞—Ç–µ—Ä–∏–∞–ª',
    '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π_–∫–æ–Ω—Ç–µ–Ω—Ç',
    '–í–∏–¥–µ–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è'
  ];
  
  // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–º–≤–æ–ª–æ–≤ fileId
  const prefixIndex = fileId.split('').reduce((sum, char) => {
    return sum + char.charCodeAt(0);
  }, 0) % prefixes.length;
  
  const prefix = prefixes[prefixIndex];
  const shortId = fileId.substring(0, 6).toUpperCase();
  
  return `${prefix}_${shortId}`;
}
