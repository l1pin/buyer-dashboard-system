// –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª: netlify/functions/metrics-proxy.js

exports.handler = async (event, context) => {
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
    'Content-Type': 'application/json'
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–∞
  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 200,
      headers,
      body: ''
    };
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ POST –∑–∞–ø—Ä–æ—Å
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      headers,
      body: JSON.stringify({ error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' })
    };
  }

  try {
    // –ü–∞—Ä—Å–∏–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    let requestBody;
    try {
      requestBody = JSON.parse(event.body);
    } catch (e) {
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π JSON –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞' })
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞
    if (!requestBody.sql) {
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ error: 'SQL –∑–∞–ø—Ä–æ—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' })
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ SELECT –∑–∞–ø—Ä–æ—Å (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
    if (!/^\s*select\b/i.test(requestBody.sql)) {
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ error: '–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ SELECT –∑–∞–ø—Ä–æ—Å—ã' })
      };
    }

    console.log('üîç –ü—Ä–æ–∫—Å–∏ –∑–∞–ø—Ä–æ—Å –∫ API –º–µ—Ç—Ä–∏–∫:', {
      sql: requestBody.sql.substring(0, 100) + '...'
    });

    // URL API –º–µ—Ç—Ä–∏–∫
    const API_URL = 'https://api.trll-notif.com.ua/adsreportcollector/core.php';

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –º–µ—Ç—Ä–∏–∫
    const apiResponse = await fetch(API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'User-Agent': 'Netlify-Functions-Proxy/1.0'
      },
      body: JSON.stringify(requestBody),
      timeout: 30000 // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    });

    // –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
    const responseText = await apiResponse.text();
    
    if (!apiResponse.ok) {
      console.error('‚ùå –û—à–∏–±–∫–∞ API –º–µ—Ç—Ä–∏–∫:', apiResponse.status, responseText);
      return {
        statusCode: apiResponse.status,
        headers,
        body: JSON.stringify({ 
          error: `API error: ${apiResponse.status}`,
          details: responseText
        })
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
    if (!responseText || !responseText.trim()) {
      console.log('‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API –º–µ—Ç—Ä–∏–∫');
      return {
        statusCode: 200,
        headers,
        body: JSON.stringify([])
      };
    }

    // –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å JSON
    let jsonResponse;
    try {
      jsonResponse = JSON.parse(responseText);
    } catch (e) {
      console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π JSON –æ—Ç API –º–µ—Ç—Ä–∏–∫:', e.message);
      return {
        statusCode: 502,
        headers,
        body: JSON.stringify({ 
          error: '–ù–µ–≤–µ—Ä–Ω—ã–π JSON –æ—Ç API –º–µ—Ç—Ä–∏–∫',
          rawResponse: responseText.substring(0, 500)
        })
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ API
    if (jsonResponse && typeof jsonResponse === 'object' && jsonResponse.error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç API –º–µ—Ç—Ä–∏–∫:', jsonResponse.error);
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ 
          error: 'Database error',
          details: jsonResponse.error
        })
      };
    }

    console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API –º–µ—Ç—Ä–∏–∫, –∑–∞–ø–∏—Å–µ–π:', Array.isArray(jsonResponse) ? jsonResponse.length : '–Ω–µ –º–∞—Å—Å–∏–≤');

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    return {
      statusCode: 200,
      headers,
      body: JSON.stringify(jsonResponse)
    };

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ–∫—Å–∏ —Ñ—É–Ω–∫—Ü–∏–∏:', error);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
    let statusCode = 500;
    let errorMessage = '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';

    if (error.name === 'AbortError' || error.message.includes('timeout')) {
      statusCode = 504;
      errorMessage = '–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ API –º–µ—Ç—Ä–∏–∫';
    } else if (error.message.includes('fetch')) {
      statusCode = 502;
      errorMessage = 'API –º–µ—Ç—Ä–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
    }

    return {
      statusCode,
      headers,
      body: JSON.stringify({ 
        error: errorMessage,
        details: error.message
      })
    };
  }
};
