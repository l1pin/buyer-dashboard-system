// scripts/getCacheStats.js
const { createClient } = require('@supabase/supabase-js');
const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '../.env') });

const supabaseUrl = process.env.REACT_APP_SUPABASE_URL;
const supabaseKey = process.env.REACT_APP_SUPABASE_SERVICE_ROLE_KEY || process.env.REACT_APP_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Supabase');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function getCacheStats() {
  try {
    console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞...\n');

    // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    const { count, error: countError } = await supabase
      .from('metrics_cache')
      .select('*', { count: 'exact', head: true });

    if (countError) {
      throw countError;
    }

    console.log(`üìù –í—Å–µ–≥–æ –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–æ –≤–∏–¥–µ–æ: ${count}`);

    // –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    const { data: lastUpdate, error: lastError } = await supabase
      .from('metrics_cache')
      .select('last_updated')
      .order('last_updated', { ascending: false })
      .limit(1)
      .single();

    if (!lastError && lastUpdate) {
      console.log(`üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date(lastUpdate.last_updated).toLocaleString('ru-RU')}`);
    }

    // –õ–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    const { data: logs, error: logsError } = await supabase
      .from('metrics_cache_logs')
      .select('*')
      .order('started_at', { ascending: false })
      .limit(5);

    if (!logsError && logs && logs.length > 0) {
      console.log('\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:');
      logs.forEach((log, index) => {
        console.log(`  ${index + 1}. ${log.update_type === 'auto' ? 'ü§ñ –ê–≤—Ç–æ' : 'üë§ –†—É—á–Ω–æ–µ'} - ${log.videos_updated} —É—Å–ø–µ—à–Ω–æ, ${log.videos_failed} –æ—à–∏–±–æ–∫ - ${new Date(log.started_at).toLocaleString('ru-RU')}`);
      });
    }

    console.log('\n‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
    process.exit(1);
  }
}

getCacheStats();
